
> frontend@0.1.0 lint
> eslint . --report-unused-disable-directives --max-warnings 0 --format json

[{"filePath":"/workspace/frontend/.storybook/main.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'config' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":3,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { StorybookConfig } from '@storybook/react-vite';\n\nconst config: StorybookConfig = {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n  ],\n  framework: {\n    name: '@storybook/react-vite',\n    options: {},\n  },\n  docs: {\n    autodocs: 'tag',\n  },\n  core: {\n    builder: '@storybook/builder-vite',\n  },\n  typescript: {\n    reactDocgen: 'react-docgen-typescript',\n    reactDocgenTypescriptOptions: {\n      compilerOptions: {\n        allowSyntheticDefaultImports: false,\n        esModuleInterop: false,\n      },\n      propFilter: (prop) => {\n        if (prop.parent) {\n          return !prop.parent.fileName.includes('node_modules');\n        }\n        return true;\n      },\n    },\n  },\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/cypress.config.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'config' is defined but never used.","line":14,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  e2e: {\n    baseUrl: 'http://localhost:5173',\n    viewportWidth: 1280,\n    viewportHeight: 720,\n    defaultCommandTimeout: 10000,\n    requestTimeout: 10000,\n    responseTimeout: 10000,\n    video: true,\n    screenshotOnRunFailure: true,\n    chromeWebSecurity: false,\n    setupNodeEvents(on, config) {\n      // Register event listeners and plugins\n      on('task', {\n        log(message) {\n          console.log(message);\n          return null;\n        },\n      });\n    },\n  },\n  env: {\n    apiUrl: 'http://localhost:3000',\n  },\n  component: {\n    devServer: {\n      framework: 'react',\n      bundler: 'vite',\n    },\n    specPattern: 'src/**/*.cy.{js,jsx,ts,tsx}',\n    supportFile: 'cypress/support/component.ts',\n  },\n}); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/cypress/e2e/auth.cy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/cypress/e2e/comprehensive-flow.cy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/cypress/e2e/faq.cy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/cypress/e2e/invoice.cy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/cypress/e2e/load.cy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/cypress/e2e/referral.cy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/cypress/support/commands.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/cypress/support/e2e.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/public/chatbot-widget.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/assets/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Affiliate/AffiliateProgram.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showWithdrawModal' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":73,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\n\ninterface Referral {\n  id: string;\n  email: string;\n  status: 'pending' | 'active' | 'completed';\n  signupDate: number;\n  commission: number;\n  subscriptionValue?: number;\n}\n\ninterface CommissionTier {\n  name: string;\n  minReferrals: number;\n  commissionRate: number;\n}\n\ninterface PaymentRequest {\n  id: string;\n  amount: number;\n  requestDate: number;\n  status: 'pending' | 'processing' | 'completed' | 'rejected';\n  method: 'paypal' | 'bank_transfer' | 'stripe';\n}\n\nconst AffiliateProgram: React.FC = () => {\n  const [referralLink] = useState('https://aiorchestrator.com/ref/user123');\n  const [referrals] = useState<Referral[]>([\n    {\n      id: '1',\n      email: 'john.doe@example.com',\n      status: 'active',\n      signupDate: Date.now() - 7 * 24 * 60 * 60 * 1000,\n      commission: 50,\n      subscriptionValue: 99,\n    },\n    {\n      id: '2',\n      email: 'jane.smith@example.com',\n      status: 'completed',\n      signupDate: Date.now() - 14 * 24 * 60 * 60 * 1000,\n      commission: 75,\n      subscriptionValue: 149,\n    },\n    {\n      id: '3',\n      email: 'mike.johnson@example.com',\n      status: 'pending',\n      signupDate: Date.now() - 3 * 24 * 60 * 60 * 1000,\n      commission: 0,\n      subscriptionValue: 49,\n    },\n  ]);\n\n  const [paymentHistory] = useState<PaymentRequest[]>([\n    {\n      id: 'PAY-001',\n      amount: 125,\n      requestDate: Date.now() - 30 * 24 * 60 * 60 * 1000,\n      status: 'completed',\n      method: 'paypal',\n    },\n    {\n      id: 'PAY-002',\n      amount: 50,\n      requestDate: Date.now() - 15 * 24 * 60 * 60 * 1000,\n      status: 'pending',\n      method: 'bank_transfer',\n    },\n  ]);\n\n  const [minWithdrawal] = useState(25);\n  const [showWithdrawModal, setShowWithdrawModal] = useState(false);\n\n  const commissionTiers: CommissionTier[] = [\n    { name: 'Bronze', minReferrals: 0, commissionRate: 10 },\n    { name: 'Silver', minReferrals: 5, commissionRate: 15 },\n    { name: 'Gold', minReferrals: 10, commissionRate: 20 },\n    { name: 'Platinum', minReferrals: 25, commissionRate: 25 },\n  ];\n\n  const totalEarnings = referrals.reduce((sum, ref) => sum + ref.commission, 0);\n  const activeReferrals = referrals.filter(\n    (ref) => ref.status === 'active'\n  ).length;\n  const completedReferrals = referrals.filter(\n    (ref) => ref.status === 'completed'\n  ).length;\n\n  const currentTier = commissionTiers\n    .slice()\n    .reverse()\n    .find((tier) => completedReferrals >= tier.minReferrals);\n\n  const availableForWithdrawal = totalEarnings - paymentHistory\n    .filter((p: PaymentRequest) => p.status === 'completed')\n    .reduce((sum: number, p: PaymentRequest) => sum + p.amount, 0);\n\n  const pendingWithdrawals = paymentHistory\n    .filter((p: PaymentRequest) => p.status === 'pending' || p.status === 'processing')\n    .reduce((sum: number, p: PaymentRequest) => sum + p.amount, 0);\n\n  const exportReferralData = () => {\n    const csvContent = [\n      ['Email', 'Status', 'Signup Date', 'Commission', 'Subscription Value'].join(','),\n      ...referrals.map(ref => [\n        ref.email,\n        ref.status,\n        new Date(ref.signupDate).toLocaleDateString(),\n        `$${ref.commission}`,\n        `$${ref.subscriptionValue || 0}`\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `affiliate-referrals-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const exportPaymentHistory = () => {\n    const csvContent = [\n      ['ID', 'Amount', 'Request Date', 'Status', 'Method'].join(','),\n      ...paymentHistory.map(payment => [\n        payment.id,\n        `$${payment.amount}`,\n        new Date(payment.requestDate).toLocaleDateString(),\n        payment.status,\n        payment.method\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `affiliate-payments-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const requestWithdrawal = () => {\n    if (availableForWithdrawal >= minWithdrawal) {\n      setShowWithdrawModal(true);\n    }\n  };\n\n  return (\n    <div className=\"p-6\">\n      <h1 className=\"text-2xl font-bold mb-6\">Affiliate Program</h1>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-500 text-sm\">Total Earnings</p>\n              <p className=\"text-2xl font-semibold\">${totalEarnings}</p>\n            </div>\n            <span className=\"material-icons text-green-500\">payments</span>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-500 text-sm\">Available to Withdraw</p>\n              <p className=\"text-2xl font-semibold text-green-600\">${availableForWithdrawal}</p>\n            </div>\n            <span className=\"material-icons text-green-500\">account_balance_wallet</span>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-500 text-sm\">Active Referrals</p>\n              <p className=\"text-2xl font-semibold\">{activeReferrals}</p>\n            </div>\n            <span className=\"material-icons text-blue-500\">people</span>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-500 text-sm\">Completed Referrals</p>\n              <p className=\"text-2xl font-semibold\">{completedReferrals}</p>\n            </div>\n            <span className=\"material-icons text-purple-500\">check_circle</span>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-500 text-sm\">Current Tier</p>\n              <p className=\"text-2xl font-semibold\">{currentTier?.name}</p>\n            </div>\n            <span className=\"material-icons text-yellow-500\">star</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Withdrawal Section */}\n      <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-semibold\">Earnings & Withdrawals</h2>\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={exportPaymentHistory}\n              className=\"px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors flex items-center\"\n            >\n              <span className=\"material-icons mr-2\">file_download</span>\n              Export Payments\n            </button>\n            <button\n              onClick={requestWithdrawal}\n              disabled={availableForWithdrawal < minWithdrawal}\n              className={`px-4 py-2 rounded-lg transition-colors flex items-center ${\n                availableForWithdrawal >= minWithdrawal\n                  ? 'bg-blue-600 text-white hover:bg-blue-700'\n                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n              }`}\n            >\n              <span className=\"material-icons mr-2\">request_quote</span>\n              Request Withdrawal\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n          <div className=\"p-4 bg-green-50 rounded-lg\">\n            <p className=\"text-sm text-gray-600\">Available</p>\n            <p className=\"text-xl font-semibold text-green-600\">${availableForWithdrawal}</p>\n          </div>\n          <div className=\"p-4 bg-yellow-50 rounded-lg\">\n            <p className=\"text-sm text-gray-600\">Pending</p>\n            <p className=\"text-xl font-semibold text-yellow-600\">${pendingWithdrawals}</p>\n          </div>\n          <div className=\"p-4 bg-blue-50 rounded-lg\">\n            <p className=\"text-sm text-gray-600\">Min. Withdrawal</p>\n            <p className=\"text-xl font-semibold text-blue-600\">${minWithdrawal}</p>\n          </div>\n        </div>\n\n        {paymentHistory.length > 0 && (\n          <div>\n            <h3 className=\"text-md font-medium mb-3\">Recent Payments</h3>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full text-sm\">\n                <thead>\n                  <tr className=\"text-left border-b border-gray-200\">\n                    <th className=\"pb-2 font-medium\">Payment ID</th>\n                    <th className=\"pb-2 font-medium\">Amount</th>\n                    <th className=\"pb-2 font-medium\">Date</th>\n                    <th className=\"pb-2 font-medium\">Method</th>\n                    <th className=\"pb-2 font-medium\">Status</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-gray-200\">\n                  {paymentHistory.map((payment) => (\n                    <tr key={payment.id}>\n                      <td className=\"py-2\">{payment.id}</td>\n                      <td className=\"py-2\">${payment.amount}</td>\n                      <td className=\"py-2\">{new Date(payment.requestDate).toLocaleDateString()}</td>\n                      <td className=\"py-2 capitalize\">{payment.method.replace('_', ' ')}</td>\n                      <td className=\"py-2\">\n                        <span\n                          className={`px-2 py-1 text-xs font-medium rounded-full ${\n                            payment.status === 'completed'\n                              ? 'bg-green-100 text-green-700'\n                              : payment.status === 'pending'\n                              ? 'bg-yellow-100 text-yellow-700'\n                              : payment.status === 'processing'\n                              ? 'bg-blue-100 text-blue-700'\n                              : 'bg-red-100 text-red-700'\n                          }`}\n                        >\n                          {payment.status}\n                        </span>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-white rounded-lg shadow\">\n            <div className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"text-lg font-semibold\">Your Referrals</h2>\n                <button\n                  onClick={exportReferralData}\n                  className=\"px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors flex items-center\"\n                >\n                  <span className=\"material-icons mr-2\">file_download</span>\n                  Export Referrals\n                </button>\n              </div>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                                      <thead>\n                      <tr className=\"text-left border-b border-gray-200\">\n                        <th className=\"pb-3 font-medium\">Email</th>\n                        <th className=\"pb-3 font-medium\">Status</th>\n                        <th className=\"pb-3 font-medium\">Date</th>\n                        <th className=\"pb-3 font-medium text-right\">Subscription</th>\n                        <th className=\"pb-3 font-medium text-right\">Commission</th>\n                      </tr>\n                    </thead>\n                                      <tbody className=\"divide-y divide-gray-200\">\n                      {referrals.map((referral) => (\n                        <tr key={referral.id}>\n                          <td className=\"py-3\">{referral.email}</td>\n                          <td className=\"py-3\">\n                            <span\n                              className={`px-2 py-1 text-xs font-medium rounded-full ${\n                                referral.status === 'completed'\n                                  ? 'bg-green-100 text-green-700'\n                                  : referral.status === 'active'\n                                  ? 'bg-blue-100 text-blue-700'\n                                  : 'bg-yellow-100 text-yellow-700'\n                              }`}\n                            >\n                              {referral.status}\n                            </span>\n                          </td>\n                          <td className=\"py-3\">\n                            {new Date(referral.signupDate).toLocaleDateString()}\n                          </td>\n                          <td className=\"py-3 text-right\">${referral.subscriptionValue || 0}</td>\n                          <td className=\"py-3 text-right\">${referral.commission}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"lg:col-span-1\">\n          <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n            <h2 className=\"text-lg font-semibold mb-4\">Your Referral Link</h2>\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"text\"\n                value={referralLink}\n                readOnly\n                className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg bg-gray-50\"\n              />\n              <button\n                onClick={() => navigator.clipboard.writeText(referralLink)}\n                className=\"p-2 text-blue-600 hover:bg-blue-50 rounded-lg\"\n              >\n                <span className=\"material-icons\">content_copy</span>\n              </button>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-lg font-semibold mb-4\">Commission Tiers</h2>\n            <div className=\"space-y-4\">\n              {commissionTiers.map((tier) => (\n                <div\n                  key={tier.name}\n                  className={`p-4 rounded-lg border ${\n                    currentTier?.name === tier.name\n                      ? 'border-blue-500 bg-blue-50'\n                      : 'border-gray-200'\n                  }`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"font-medium\">{tier.name}</h3>\n                      <p className=\"text-sm text-gray-500\">\n                        {tier.minReferrals}+ referrals\n                      </p>\n                    </div>\n                    <p className=\"text-lg font-semibold\">\n                      {tier.commissionRate}%\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AffiliateProgram; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/AnalyticsDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":27,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useAnalytics } from '../hooks/useAnalytics';\nimport {\n  Card,\n  Title,\n  Text,\n  Grid,\n  Col,\n  Metric,\n  AreaChart,\n  DonutChart,\n  BarChart,\n  Legend,\n  TabGroup,\n  TabList,\n  Tab,\n  TabPanels,\n  TabPanel,\n} from '@tremor/react';\n\nexport const AnalyticsDashboard: React.FC = () => {\n  const {\n    metrics,\n    conversationTrends,\n    userEngagement,\n    botPerformance,\n    isLoading,\n    error,\n  } = useAnalytics();\n\n  if (error) {\n    return (\n      <Card>\n        <Text>Error loading analytics data: {error.message}</Text>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Title>Analytics Dashboard</Title>\n\n      {/* Key Metrics */}\n      <Grid numItems={1} numItemsSm={2} numItemsLg={3} className=\"gap-6\">\n        <Card>\n          <Text>User Engagement</Text>\n          <Metric>{metrics?.userEngagement.toFixed(2)}%</Metric>\n        </Card>\n        <Card>\n          <Text>Conversation Quality</Text>\n          <Metric>{metrics?.conversationQuality.toFixed(2)}%</Metric>\n        </Card>\n        <Card>\n          <Text>Bot Performance</Text>\n          <Metric>{metrics?.botPerformance.toFixed(2)}%</Metric>\n        </Card>\n      </Grid>\n\n      {/* Detailed Analytics */}\n      <TabGroup>\n        <TabList>\n          <Tab>Conversation Trends</Tab>\n          <Tab>User Engagement</Tab>\n          <Tab>Bot Performance</Tab>\n        </TabList>\n        <TabPanels>\n          <TabPanel>\n            <Card>\n              <Title>Conversation Volume Over Time</Title>\n              <AreaChart\n                className=\"h-72 mt-4\"\n                data={conversationTrends}\n                index=\"date\"\n                categories={['total', 'automated', 'escalated']}\n                colors={['blue', 'green', 'red']}\n              />\n            </Card>\n          </TabPanel>\n\n          <TabPanel>\n            <Grid numItems={1} numItemsLg={2} className=\"gap-6\">\n              <Card>\n                <Title>User Engagement by Channel</Title>\n                <DonutChart\n                  className=\"h-80 mt-4\"\n                  data={userEngagement.byChannel}\n                  category=\"value\"\n                  index=\"name\"\n                  colors={['blue', 'cyan', 'indigo']}\n                />\n                <Legend className=\"mt-4\" />\n              </Card>\n              <Card>\n                <Title>Session Duration Distribution</Title>\n                <BarChart\n                  className=\"h-80 mt-4\"\n                  data={userEngagement.sessionDuration}\n                  index=\"range\"\n                  categories={['count']}\n                  colors={['blue']}\n                />\n              </Card>\n            </Grid>\n          </TabPanel>\n\n          <TabPanel>\n            <Grid numItems={1} numItemsLg={2} className=\"gap-6\">\n              <Card>\n                <Title>Response Time Distribution</Title>\n                <BarChart\n                  className=\"h-80 mt-4\"\n                  data={botPerformance.responseTime}\n                  index=\"range\"\n                  categories={['count']}\n                  colors={['green']}\n                />\n              </Card>\n              <Card>\n                <Title>Resolution Rate by Category</Title>\n                <DonutChart\n                  className=\"h-80 mt-4\"\n                  data={botPerformance.resolutionRate}\n                  category=\"value\"\n                  index=\"category\"\n                  colors={['green', 'emerald', 'teal']}\n                />\n                <Legend className=\"mt-4\" />\n              </Card>\n            </Grid>\n          </TabPanel>\n        </TabPanels>\n      </TabGroup>\n\n      {/* Real-time Events */}\n      <Card>\n        <Title>Real-time Events</Title>\n        <div className=\"mt-4 space-y-2\">\n          {metrics?.recentEvents.map((event, index) => (\n            <div\n              key={index}\n              className=\"p-3 bg-gray-50 rounded-lg flex justify-between items-center\"\n            >\n              <div>\n                <Text className=\"font-medium\">{event.eventName}</Text>\n                <Text className=\"text-sm text-gray-500\">\n                  {JSON.stringify(event.properties)}\n                </Text>\n              </div>\n              <Text className=\"text-sm text-gray-500\">\n                {new Date(event.timestamp).toLocaleTimeString()}\n              </Text>\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Auth/EmailVerification.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":5,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":5,"endColumn":26},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":14,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":14,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nexport const VERIFY_EMAIL = gql`\n  mutation VerifyEmail($token: String!) {\n    verifyEmail(token: $token) {\n      success\n      message\n    }\n  }\n`;\n\nexport const RESEND_VERIFICATION = gql`\n  mutation ResendVerificationEmail {\n    resendVerificationEmail {\n      success\n      message\n    }\n  }\n`;\n\nexport const EmailVerification: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const token = searchParams.get('token');\n  const navigate = useNavigate();\n\n  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');\n  const [message, setMessage] = useState('');\n\n  const [verifyEmail] = useMutation(VERIFY_EMAIL, {\n    onCompleted: (data) => {\n      setStatus('success');\n      setMessage(data.verifyEmail.message);\n      setTimeout(() => navigate('/login'), 3000);\n    },\n    onError: (error) => {\n      setStatus('error');\n      setMessage(error.message);\n    },\n  });\n\n  const [resendVerification] = useMutation(RESEND_VERIFICATION, {\n    onCompleted: (data) => {\n      setStatus('success');\n      setMessage(data.resendVerificationEmail.message);\n    },\n    onError: (error) => {\n      setStatus('error');\n      setMessage(error.message);\n    },\n  });\n\n  useEffect(() => {\n    if (token) {\n      verifyEmail({ variables: { token } });\n    }\n  }, [token, verifyEmail]);\n\n  const handleResend = async () => {\n    setStatus('loading');\n    setMessage('');\n    await resendVerification();\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            Email Verification\n          </h2>\n        </div>\n\n        <div className=\"mt-8 space-y-6\">\n          {status === 'loading' && (\n            <div className=\"flex justify-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600\"></div>\n            </div>\n          )}\n\n          {status === 'success' && (\n            <div className=\"rounded-md bg-green-50 p-4\">\n              <div className=\"text-sm text-green-700\">{message}</div>\n            </div>\n          )}\n\n          {status === 'error' && (\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md bg-red-50 p-4\">\n                <div className=\"text-sm text-red-700\">{message}</div>\n              </div>\n\n              <button\n                onClick={handleResend}\n                className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n                data-testid=\"resend-button\"\n              >\n                Resend Verification Email\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Auth/ForgotPassword.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Auth/ForgotPassword.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Auth/Login.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Auth/MFASetup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Auth/PasswordResetForm.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":5,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":5,"endColumn":28},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":14,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":14,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nexport const RESET_PASSWORD = gql`\n  mutation ResetPassword($input: ResetPasswordInput!) {\n    resetPassword(input: $input) {\n      success\n      message\n    }\n  }\n`;\n\nexport const REQUEST_RESET = gql`\n  mutation RequestPasswordReset($email: String!) {\n    requestPasswordReset(email: $email) {\n      success\n      message\n    }\n  }\n`;\n\nexport const PasswordResetForm: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const token = searchParams.get('token');\n  const navigate = useNavigate();\n\n  const [email, setEmail] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  const [resetPassword] = useMutation(RESET_PASSWORD, {\n    onCompleted: (data) => {\n      setSuccess(data.resetPassword.message);\n      setTimeout(() => navigate('/login'), 3000);\n    },\n    onError: (error) => {\n      setError(error.message);\n    },\n  });\n\n  const [requestReset] = useMutation(REQUEST_RESET, {\n    onCompleted: (data) => {\n      setSuccess(data.requestPasswordReset.message);\n    },\n    onError: (error) => {\n      setError(error.message);\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setSuccess('');\n\n    if (token) {\n      // Reset password form\n      if (newPassword !== confirmPassword) {\n        setError('Passwords do not match');\n        return;\n      }\n\n      await resetPassword({\n        variables: {\n          input: {\n            token,\n            newPassword,\n          },\n        },\n      });\n    } else {\n      // Request reset form\n      await requestReset({\n        variables: {\n          email,\n        },\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            {token ? 'Reset Your Password' : 'Request Password Reset'}\n          </h2>\n        </div>\n\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          {error && (\n            <div className=\"rounded-md bg-red-50 p-4\">\n              <div className=\"text-sm text-red-700\">{error}</div>\n            </div>\n          )}\n\n          {success && (\n            <div className=\"rounded-md bg-green-50 p-4\">\n              <div className=\"text-sm text-green-700\">{success}</div>\n            </div>\n          )}\n\n          <div className=\"rounded-md shadow-sm -space-y-px\">\n            {token ? (\n              <>\n                <div>\n                  <label htmlFor=\"new-password\" className=\"sr-only\">\n                    New Password\n                  </label>\n                  <input\n                    id=\"new-password\"\n                    name=\"newPassword\"\n                    type=\"password\"\n                    required\n                    className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                    placeholder=\"New Password\"\n                    value={newPassword}\n                    onChange={(e) => setNewPassword(e.target.value)}\n                    data-testid=\"new-password-input\"\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"confirm-password\" className=\"sr-only\">\n                    Confirm Password\n                  </label>\n                  <input\n                    id=\"confirm-password\"\n                    name=\"confirmPassword\"\n                    type=\"password\"\n                    required\n                    className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                    placeholder=\"Confirm Password\"\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    data-testid=\"confirm-password-input\"\n                  />\n                </div>\n              </>\n            ) : (\n              <div>\n                <label htmlFor=\"email-address\" className=\"sr-only\">\n                  Email address\n                </label>\n                <input\n                  id=\"email-address\"\n                  name=\"email\"\n                  type=\"email\"\n                  autoComplete=\"email\"\n                  required\n                  className=\"appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                  placeholder=\"Email address\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  data-testid=\"email-input\"\n                />\n              </div>\n            )}\n          </div>\n\n          <div>\n            <button\n              type=\"submit\"\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n              data-testid=\"reset-button\"\n            >\n              {token ? 'Reset Password' : 'Send Reset Instructions'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Auth/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Auth/Register.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Auth/ResetPassword.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Auth/ResetPassword.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Auth/__tests__/EmailVerification.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Auth/__tests__/PasswordResetForm.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Button/Button.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Button/Button.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Button/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ChatInterface.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":9,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { useAuth } from '../hooks/useAuth';\nimport { useChat } from '../hooks/useChat';\nimport { Message } from '../types';\nimport { Card, Title, Text, TextInput, Button, ScrollArea } from '@tremor/react';\nimport { PaperAirplaneIcon } from '@heroicons/react/24/solid';\n\nexport const ChatInterface: React.FC = () => {\n  const { user } = useAuth();\n  const { messages, sendMessage, isLoading } = useChat();\n  const [input, setInput] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    await sendMessage(input);\n    setInput('');\n  };\n\n  return (\n    <Card className=\"h-[calc(100vh-2rem)] flex flex-col\">\n      <Title>Chat Support</Title>\n      <ScrollArea className=\"flex-grow mt-4 mb-4\">\n        <div className=\"space-y-4\">\n          {messages.map((message, index) => (\n            <div\n              key={index}\n              className={`flex ${\n                message.sender === 'user' ? 'justify-end' : 'justify-start'\n              }`}\n            >\n              <div\n                className={`max-w-[70%] p-3 rounded-lg ${\n                  message.sender === 'user'\n                    ? 'bg-blue-500 text-white'\n                    : 'bg-gray-100 text-gray-900'\n                }`}\n              >\n                <Text>{message.content}</Text>\n                {message.timestamp && (\n                  <Text className=\"text-xs mt-1 opacity-70\">\n                    {new Date(message.timestamp).toLocaleTimeString()}\n                  </Text>\n                )}\n              </div>\n            </div>\n          ))}\n          <div ref={messagesEndRef} />\n        </div>\n      </ScrollArea>\n      <form onSubmit={handleSubmit} className=\"mt-4 flex gap-2\">\n        <TextInput\n          placeholder=\"Type your message...\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          disabled={isLoading}\n          className=\"flex-grow\"\n        />\n        <Button\n          type=\"submit\"\n          disabled={isLoading}\n          icon={PaperAirplaneIcon}\n          loading={isLoading}\n        >\n          Send\n        </Button>\n      </form>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Container.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/PWA/PWAPrompt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/PageTitle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/PricingDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/Usage/UsageDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2802,2805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2802,2805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":226,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":226,"endColumn":55}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { BarChart2, AlertCircle, TrendingUp, Users, MessageSquare, RefreshCw, Zap } from 'lucide-react';\n\ninterface UsageStats {\n  current: {\n    messagesCount: number;\n    chatbotsCount: number;\n    teamMembersCount: number;\n    channelsCount: number;\n  };\n  limits: {\n    messages: number;\n    chatbots: number;\n    teamMembers: number;\n    channels: number;\n  };\n  percentages: {\n    messages: number;\n    chatbots: number;\n    teamMembers: number;\n    channels: number;\n  };\n}\n\nconst UsageDashboard: React.FC = () => {\n  const [usageStats, setUsageStats] = useState<UsageStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n\n  useEffect(() => {\n    fetchUsageStats();\n  }, []);\n\n  const fetchUsageStats = async () => {\n    try {\n      setRefreshing(true);\n      const response = await fetch('/api/usage/stats', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setUsageStats(data);\n      }\n    } catch (error) {\n      console.error('Error fetching usage stats:', error);\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  };\n\n  const handleRefresh = () => {\n    if (!refreshing) {\n      fetchUsageStats();\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px] bg-gradient-to-br from-gray-50 to-white\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"relative\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-blue-100 border-t-blue-600 mx-auto\"></div>\n            <Zap className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 h-5 w-5 text-blue-600\" />\n          </div>\n          <p className=\"text-gray-600 font-medium animate-pulse\">Loading your usage statistics...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!usageStats) {\n    return (\n      <div className=\"text-center p-8 bg-gradient-to-br from-gray-50 to-white rounded-2xl\">\n        <AlertCircle className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n        <p className=\"text-gray-500 text-lg\">Unable to load usage statistics</p>\n        <button \n          onClick={fetchUsageStats}\n          className=\"mt-4 bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-xl transition-all duration-200 transform hover:scale-105\"\n        >\n          Try Again\n        </button>\n      </div>\n    );\n  }\n\n  const UsageCard = ({ \n    title, \n    current, \n    limit, \n    percentage, \n    icon: Icon,\n    color \n  }: {\n    title: string;\n    current: number;\n    limit: number;\n    percentage: number;\n    icon: any;\n    color: string;\n  }) => (\n    <div className=\"bg-white rounded-2xl border border-gray-100 p-4 sm:p-6 lg:p-7 transform hover:-translate-y-1 hover:shadow-xl transition-all duration-300 group\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className={`p-3 rounded-xl bg-gradient-to-br ${color} shadow-lg`}>\n            <Icon className=\"h-6 w-6 text-white\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg lg:text-xl font-semibold text-gray-900 group-hover:text-gray-800 transition-colors\">{title}</h3>\n            <span className=\"text-sm text-gray-500 uppercase tracking-wide font-medium\">Usage</span>\n          </div>\n        </div>\n        {percentage >= 85 && (\n          <div className=\"flex items-center gap-1 px-2 py-1 bg-orange-50 text-orange-600 rounded-lg animate-pulse\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <span className=\"text-sm font-medium\">{percentage}%</span>\n          </div>\n        )}\n      </div>\n      \n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center text-sm\">\n          <span className=\"text-gray-500 font-medium\">Current usage</span>\n          <span className=\"font-bold text-gray-900 text-lg\">\n            {current.toLocaleString()} / {limit === 999 ? '∞' : limit.toLocaleString()}\n          </span>\n        </div>\n        \n        <div className=\"w-full bg-gray-100 rounded-full h-3 overflow-hidden\">\n          <div className={`h-full rounded-full transition-all duration-700 ease-out ${\n            percentage >= 95 ? 'bg-gradient-to-r from-red-500 to-red-600' :\n            percentage >= 85 ? 'bg-gradient-to-r from-orange-500 to-orange-600' :\n            percentage >= 70 ? 'bg-gradient-to-r from-yellow-500 to-yellow-600' : \n            'bg-gradient-to-r from-green-500 to-green-600'\n          } relative`}\n            style={{ width: `${Math.min(percentage, 100)}%` }}\n          >\n            <div className=\"absolute inset-0 bg-white opacity-20 animate-pulse\"></div>\n          </div>\n        </div>\n        \n        <div className=\"flex justify-between items-center text-xs\">\n          <span className=\"text-gray-500 font-medium\">{percentage}% used</span>\n          {percentage >= 80 && (\n            <span className=\"text-orange-600 font-bold bg-orange-50 px-2 py-1 rounded-md\">\n              Consider upgrading\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6 sm:space-y-8\">\n      {/* Enhanced Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 bg-gradient-to-r from-blue-50 to-indigo-50 p-4 sm:p-6 lg:p-8 rounded-2xl\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 mb-2 font-heading\">Usage & Limits</h1>\n          <p className=\"text-gray-600 text-base lg:text-lg font-body\">Monitor your plan usage and optimize your workflow</p>\n        </div>\n        \n        <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n          <button \n            onClick={handleRefresh}\n            disabled={refreshing}\n            className=\"group relative overflow-hidden bg-white hover:bg-gray-50 text-gray-700 px-4 py-2 rounded-xl border border-gray-200 transition-all duration-200 flex items-center gap-2\"\n          >\n            <RefreshCw className={`h-4 w-4 transition-transform duration-200 ${refreshing ? 'animate-spin' : 'group-hover:rotate-180'}`} />\n            <span>Refresh</span>\n          </button>\n          \n          <button \n            onClick={() => window.location.href = '/pricing'}\n            className=\"group relative overflow-hidden bg-gradient-primary hover:shadow-lg text-white px-6 py-3 rounded-xl transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-200\"\n          >\n            <span className=\"relative z-10\">Upgrade Plan</span>\n            <div className=\"absolute inset-0 bg-gradient-to-r from-blue-700 to-blue-800 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300 origin-left\"></div>\n          </button>\n        </div>\n      </div>\n\n      {/* Responsive Grid with Enhanced Spacing */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4 sm:gap-6 lg:gap-8\">\n        <UsageCard\n          title=\"Messages\"\n          current={usageStats.current.messagesCount}\n          limit={usageStats.limits.messages}\n          percentage={usageStats.percentages.messages}\n          icon={MessageSquare}\n          color=\"from-blue-500 to-blue-600\"\n        />\n        \n        <UsageCard\n          title=\"Chatbots\"\n          current={usageStats.current.chatbotsCount}\n          limit={usageStats.limits.chatbots}\n          percentage={usageStats.percentages.chatbots}\n          icon={BarChart2}\n          color=\"from-green-500 to-green-600\"\n        />\n        \n        <UsageCard\n          title=\"Team Members\"\n          current={usageStats.current.teamMembersCount}\n          limit={usageStats.limits.teamMembers}\n          percentage={usageStats.percentages.teamMembers}\n          icon={Users}\n          color=\"from-purple-500 to-purple-600\"\n        />\n        \n        <UsageCard\n          title=\"Channels\"\n          current={usageStats.current.channelsCount}\n          limit={usageStats.limits.channels}\n          percentage={usageStats.percentages.channels}\n          icon={TrendingUp}\n          color=\"from-orange-500 to-orange-600\"\n        />\n      </div>\n\n      {/* Enhanced Warning Section */}\n      {Object.entries(usageStats.percentages).some(([_, percentage]) => percentage >= 80) && (\n        <div className=\"bg-gradient-to-r from-orange-50 to-red-50 border border-orange-200 rounded-2xl p-6 transform hover:scale-[1.01] transition-all duration-300\">\n          <div className=\"flex items-center gap-3 mb-4\">\n            <div className=\"p-2 bg-orange-100 rounded-lg\">\n              <AlertCircle className=\"h-6 w-6 text-orange-600\" />\n            </div>\n            <h3 className=\"font-bold text-orange-800 text-xl\">Usage Warnings</h3>\n          </div>\n          <div className=\"text-base text-orange-700 space-y-2 mb-4\">\n            {Object.entries(usageStats.percentages).map(([key, percentage]) => {\n              if (percentage >= 80) {\n                return (\n                  <div key={key} className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n                    <span><strong>{key.charAt(0).toUpperCase() + key.slice(1)}</strong> usage is at <strong>{percentage}%</strong></span>\n                  </div>\n                );\n              }\n              return null;\n            })}\n          </div>\n          <button \n            onClick={() => window.location.href = '/pricing'}\n            className=\"group bg-orange-600 hover:bg-orange-700 text-white px-6 py-3 rounded-xl font-semibold transition-all duration-200 transform hover:scale-105 flex items-center gap-2\"\n          >\n            <span>Upgrade your plan</span>\n            <TrendingUp className=\"h-4 w-4 group-hover:translate-x-1 transition-transform\" />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UsageDashboard;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/WorkflowManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/__tests__/Skeleton.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/activity/ActivityFeed.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[545,548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[545,548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  Card,\n  Text,\n  Badge,\n  List,\n  ListItem,\n  Button,\n  Select,\n  SelectItem,\n  TextInput,\n  DateRangePicker,\n  Title,\n  Tab,\n  TabGroup,\n  TabList,\n  TabPanel,\n  TabPanels,\n} from '@tremor/react';\nimport { format } from 'date-fns';\n\ninterface Activity {\n  id: string;\n  type: 'user' | 'system' | 'integration';\n  action: string;\n  description: string;\n  timestamp: Date;\n  user?: {\n    id: string;\n    name: string;\n    avatar: string;\n  };\n  metadata?: Record<string, any>;\n  category?: string;\n  status?: 'success' | 'warning' | 'error';\n}\n\ninterface ActivityFilters {\n  type: string;\n  search: string;\n  dateRange: {\n    from: Date;\n    to: Date;\n  };\n  category: string;\n  status: string;\n}\n\nconst ActivityFeed: React.FC = () => {\n  const [activities, setActivities] = useState<Activity[]>([]);\n  const [filters, setFilters] = useState<ActivityFilters>({\n    type: '',\n    search: '',\n    dateRange: {\n      from: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n      to: new Date(),\n    },\n    category: '',\n    status: '',\n  });\n  const [isLive, setIsLive] = useState(true);\n  const [view, setView] = useState<'all' | 'grouped'>('all');\n\n  // Mock data - replace with real API calls\n  const fetchActivities = useCallback(async () => {\n    const mockActivities: Activity[] = [\n      {\n        id: '1',\n        type: 'user',\n        action: 'login',\n        description: 'User logged into the system',\n        timestamp: new Date(),\n        category: 'Authentication',\n        status: 'success',\n        user: {\n          id: 'user1',\n          name: 'John Doe',\n          avatar: 'https://api.dicebear.com/7.x/avatars/svg?seed=John',\n        },\n      },\n      {\n        id: '2',\n        type: 'system',\n        action: 'backup',\n        description: 'System backup completed successfully',\n        timestamp: new Date(Date.now() - 3600000),\n        category: 'Maintenance',\n        status: 'success',\n      },\n      {\n        id: '3',\n        type: 'integration',\n        action: 'webhook',\n        description: 'Webhook received from external service',\n        timestamp: new Date(Date.now() - 7200000),\n        category: 'Integration',\n        status: 'warning',\n        metadata: {\n          service: 'GitHub',\n          event: 'push',\n        },\n      },\n    ];\n    setActivities(prev => [...mockActivities, ...prev].slice(0, 50)); // Keep last 50 activities\n  }, []);\n\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n\n  useEffect(() => {\n    if (isLive) {\n      const interval = setInterval(fetchActivities, 30000); // Poll every 30 seconds\n      return () => clearInterval(interval);\n    }\n  }, [isLive, fetchActivities]);\n\n  const filteredActivities = activities.filter((activity) => {\n    const matchesType = !filters.type || activity.type === filters.type;\n    const matchesSearch =\n      !filters.search ||\n      activity.description.toLowerCase().includes(filters.search.toLowerCase()) ||\n      activity.action.toLowerCase().includes(filters.search.toLowerCase());\n    const matchesDateRange =\n      activity.timestamp >= filters.dateRange.from &&\n      activity.timestamp <= filters.dateRange.to;\n    const matchesCategory = !filters.category || activity.category === filters.category;\n    const matchesStatus = !filters.status || activity.status === filters.status;\n\n    return matchesType && matchesSearch && matchesDateRange && matchesCategory && matchesStatus;\n  });\n\n  const groupedActivities = filteredActivities.reduce((groups, activity) => {\n    const date = format(activity.timestamp, 'yyyy-MM-dd');\n    if (!groups[date]) {\n      groups[date] = [];\n    }\n    groups[date].push(activity);\n    return groups;\n  }, {} as Record<string, Activity[]>);\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'user':\n        return '👤';\n      case 'system':\n        return '🔧';\n      case 'integration':\n        return '🔌';\n      default:\n        return '📝';\n    }\n  };\n\n  const getStatusColor = (status?: string) => {\n    switch (status) {\n      case 'success':\n        return 'green';\n      case 'warning':\n        return 'yellow';\n      case 'error':\n        return 'red';\n      default:\n        return 'gray';\n    }\n  };\n\n  const categories = Array.from(new Set(activities.map(a => a.category).filter(Boolean))) as string[];\n  const statuses = Array.from(new Set(activities.map(a => a.status).filter(Boolean))) as string[];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <Title>Activity Feed</Title>\n          <Text>Track all system activities and events</Text>\n        </div>\n        <div className=\"space-x-2\">\n          <Button\n            size=\"sm\"\n            variant=\"secondary\"\n            onClick={() => setIsLive(!isLive)}\n            color={isLive ? \"red\" : \"blue\"}\n          >\n            {isLive ? 'Pause Updates' : 'Resume Updates'}\n          </Button>\n          <Badge color={isLive ? \"green\" : \"gray\"}>\n            {isLive ? 'Live' : 'Paused'}\n          </Badge>\n        </div>\n      </div>\n\n      <Card>\n        <TabGroup>\n          <TabList>\n            <Tab>Filters</Tab>\n            <Tab>View Options</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4\">\n                <div>\n                  <Text>Activity Type</Text>\n                  <Select\n                    value={filters.type}\n                    onValueChange={(value) => setFilters({ ...filters, type: value })}\n                  >\n                    <SelectItem value=\"\">All Types</SelectItem>\n                    <SelectItem value=\"user\">User</SelectItem>\n                    <SelectItem value=\"system\">System</SelectItem>\n                    <SelectItem value=\"integration\">Integration</SelectItem>\n                  </Select>\n                </div>\n\n                <div>\n                  <Text>Category</Text>\n                  <Select\n                    value={filters.category}\n                    onValueChange={(value) => setFilters({ ...filters, category: value })}\n                  >\n                    <SelectItem value=\"\">All Categories</SelectItem>\n                    {categories.map((category) => (\n                      <SelectItem key={category} value={category}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </Select>\n                </div>\n\n                <div>\n                  <Text>Status</Text>\n                  <Select\n                    value={filters.status}\n                    onValueChange={(value) => setFilters({ ...filters, status: value })}\n                  >\n                    <SelectItem value=\"\">All Statuses</SelectItem>\n                    {statuses.map((status) => (\n                      <SelectItem key={status} value={status}>\n                        {status}\n                      </SelectItem>\n                    ))}\n                  </Select>\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <Text>Search</Text>\n                  <TextInput\n                    placeholder=\"Search activities...\"\n                    value={filters.search}\n                    onChange={(e) => setFilters({ ...filters, search: e.target.value })}\n                  />\n                </div>\n\n                <div>\n                  <Text>Date Range</Text>\n                  <DateRangePicker\n                    value={filters.dateRange}\n                    onValueChange={(value) => {\n                      if (value.from && value.to) {\n                        setFilters({ ...filters, dateRange: { from: value.from, to: value.to } });\n                      }\n                    }}\n                  />\n                </div>\n              </div>\n            </TabPanel>\n            <TabPanel>\n              <div className=\"p-4\">\n                <Text>View Type</Text>\n                <div className=\"flex space-x-2 mt-2\">\n                  <Button\n                    size=\"sm\"\n                    variant={view === 'all' ? 'primary' : 'secondary'}\n                    onClick={() => setView('all')}\n                  >\n                    All Activities\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant={view === 'grouped' ? 'primary' : 'secondary'}\n                    onClick={() => setView('grouped')}\n                  >\n                    Grouped by Date\n                  </Button>\n                </div>\n              </div>\n            </TabPanel>\n          </TabPanels>\n        </TabGroup>\n      </Card>\n\n      {view === 'all' ? (\n        <Card>\n          <List>\n            {filteredActivities.map((activity) => (\n              <ListItem key={activity.id} className=\"py-4\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"flex-shrink-0 text-2xl\">\n                    {getActivityIcon(activity.type)}\n                  </div>\n                  <div className=\"flex-grow min-w-0\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Text className=\"font-medium\">{activity.action}</Text>\n                      <Badge color={getStatusColor(activity.status)}>\n                        {activity.status}\n                      </Badge>\n                      {activity.category && (\n                        <Badge color=\"gray\">{activity.category}</Badge>\n                      )}\n                    </div>\n                    <Text className=\"text-gray-500 mt-1\">{activity.description}</Text>\n                    {activity.metadata && (\n                      <div className=\"mt-2 text-sm text-gray-500\">\n                        <pre className=\"bg-gray-50 p-2 rounded\">\n                          {JSON.stringify(activity.metadata, null, 2)}\n                        </pre>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"flex-shrink-0 text-sm text-gray-500\">\n                    {format(activity.timestamp, 'MMM d, yyyy HH:mm')}\n                  </div>\n                </div>\n              </ListItem>\n            ))}\n          </List>\n        </Card>\n      ) : (\n        <div className=\"space-y-6\">\n          {Object.entries(groupedActivities).map(([date, activities]) => (\n            <Card key={date}>\n              <div className=\"border-b border-gray-200 pb-2 mb-4\">\n                <Text className=\"font-medium\">{format(new Date(date), 'MMMM d, yyyy')}</Text>\n              </div>\n              <List>\n                {activities.map((activity) => (\n                  <ListItem key={activity.id} className=\"py-4\">\n                    <div className=\"flex items-start space-x-4\">\n                      <div className=\"flex-shrink-0 text-2xl\">\n                        {getActivityIcon(activity.type)}\n                      </div>\n                      <div className=\"flex-grow min-w-0\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Text className=\"font-medium\">{activity.action}</Text>\n                          <Badge color={getStatusColor(activity.status)}>\n                            {activity.status}\n                          </Badge>\n                          {activity.category && (\n                            <Badge color=\"gray\">{activity.category}</Badge>\n                          )}\n                        </div>\n                        <Text className=\"text-gray-500 mt-1\">{activity.description}</Text>\n                      </div>\n                      <div className=\"flex-shrink-0 text-sm text-gray-500\">\n                        {format(activity.timestamp, 'HH:mm')}\n                      </div>\n                    </div>\n                  </ListItem>\n                ))}\n              </List>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ActivityFeed; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/analytics/Analytics.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[537,540],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[537,540],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[784,787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[784,787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  Legend,\n  LineChart,\n  Line,\n  Brush,\n} from 'recharts';\nimport {\n  ConversationTrend,\n  UserEngagement,\n  BotPerformance,\n} from '../../types';\n\nconst COLORS = {\n  blue: '#3B82F6',\n  red: '#EF4444',\n  green: '#10B981',\n  yellow: '#F59E0B',\n  purple: '#8B5CF6',\n  gray: '#6B7280',\n};\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className=\"bg-white p-3 rounded-lg shadow-lg border border-gray-100\">\n        <p className=\"text-sm font-medium text-gray-900\">{label}</p>\n        {payload.map((entry: any, index: number) => (\n          <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n            {entry.name}: {entry.value}\n            {entry.unit || ''}\n          </p>\n        ))}\n      </div>\n    );\n  }\n  return null;\n};\n\nconst Analytics: React.FC = () => {\n  const [timeRange, setTimeRange] = useState<'24h' | '7d' | '30d' | '90d'>('7d');\n  const [selectedMetric, setSelectedMetric] = useState<'total' | 'automated' | 'escalated'>('total');\n\n  const trends: ConversationTrend[] = [\n    { date: '2024-03-01', total: 150, automated: 120, escalated: 30 },\n    { date: '2024-03-02', total: 180, automated: 150, escalated: 30 },\n    { date: '2024-03-03', total: 200, automated: 170, escalated: 30 },\n    { date: '2024-03-04', total: 220, automated: 190, escalated: 30 },\n    { date: '2024-03-05', total: 250, automated: 220, escalated: 30 },\n  ];\n\n  const engagement: UserEngagement = {\n    byChannel: [\n      { name: 'Website', value: 45 },\n      { name: 'Mobile App', value: 30 },\n      { name: 'Social Media', value: 15 },\n      { name: 'Email', value: 10 },\n    ],\n    sessionDuration: [\n      { range: '0-1 min', count: 100 },\n      { range: '1-5 min', count: 250 },\n      { range: '5-15 min', count: 150 },\n      { range: '15+ min', count: 50 },\n    ],\n  };\n\n  const performance: BotPerformance = {\n    responseTime: [\n      { range: '0-2s', count: 300 },\n      { range: '2-5s', count: 200 },\n      { range: '5-10s', count: 100 },\n      { range: '10s+', count: 50 },\n    ],\n    resolutionRate: [\n      { category: 'Resolved', value: 75, color: COLORS.green },\n      { category: 'Escalated', value: 15, color: COLORS.yellow },\n      { category: 'Abandoned', value: 10, color: COLORS.red },\n    ],\n  };\n\n  const handleMetricClick = useCallback((metric: 'total' | 'automated' | 'escalated') => {\n    setSelectedMetric(metric);\n  }, []);\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto bg-gray-50\">\n      {/* Header with Time Range Selector */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Analytics</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Monitor your chatbot's performance and user engagement\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2 bg-white rounded-lg shadow-sm p-1\">\n          {(['24h', '7d', '30d', '90d'] as const).map((range) => (\n            <button\n              key={range}\n              onClick={() => setTimeRange(range)}\n              className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors ${\n                timeRange === range\n                  ? 'bg-blue-100 text-blue-600'\n                  : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n              }`}\n            >\n              {range}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        {/* Conversation Trends */}\n        <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">Conversation Trends</h2>\n            <div className=\"flex gap-2 bg-gray-50 p-1 rounded-lg\">\n              {[\n                { key: 'total', label: 'Total', color: COLORS.gray },\n                { key: 'automated', label: 'Automated', color: COLORS.blue },\n                { key: 'escalated', label: 'Escalated', color: COLORS.red },\n              ].map(({ key, label, color }) => (\n                <button\n                  key={key}\n                  onClick={() => handleMetricClick(key as 'total' | 'automated' | 'escalated')}\n                  className={`px-2 py-1 text-xs rounded-md transition-colors ${\n                    selectedMetric === key\n                      ? 'bg-white shadow font-medium'\n                      : 'hover:bg-white'\n                  }`}\n                >\n                  <span className=\"inline-block w-2 h-2 rounded-full mr-1\" style={{ backgroundColor: color }}></span>\n                  {label}\n                </button>\n              ))}\n            </div>\n          </div>\n          <div className=\"h-[300px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart\n                data={trends}\n                margin={{ top: 20, right: 30, left: 20, bottom: 20 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                <XAxis\n                  dataKey=\"date\"\n                  tickFormatter={(date) => new Date(date).toLocaleDateString()}\n                  stroke=\"#6B7280\"\n                  tick={{ fill: '#6B7280' }}\n                />\n                <YAxis \n                  stroke=\"#6B7280\"\n                  tick={{ fill: '#6B7280' }}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Line\n                  type=\"monotone\"\n                  dataKey={selectedMetric}\n                  stroke={\n                    selectedMetric === 'total'\n                      ? COLORS.gray\n                      : selectedMetric === 'automated'\n                      ? COLORS.blue\n                      : COLORS.red\n                  }\n                  strokeWidth={2}\n                  dot={{ r: 4, fill: 'white', strokeWidth: 2 }}\n                  activeDot={{ r: 6, fill: 'white', strokeWidth: 2 }}\n                />\n                <Brush \n                  dataKey=\"date\" \n                  height={30} \n                  stroke={COLORS.blue}\n                  fill=\"#F3F4F6\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n\n        {/* Channel Performance */}\n        <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n          <h2 className=\"text-lg font-semibold mb-4 text-gray-900\">Channel Performance</h2>\n          <div className=\"h-[300px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart\n                data={engagement.byChannel}\n                margin={{ top: 20, right: 50, left: 80, bottom: 20 }}\n                layout=\"vertical\"\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                <XAxis \n                  type=\"number\" \n                  domain={[0, 100]}\n                  stroke=\"#6B7280\"\n                  tick={{ fill: '#6B7280' }}\n                />\n                <YAxis \n                  dataKey=\"name\" \n                  type=\"category\" \n                  width={70}\n                  stroke=\"#6B7280\"\n                  tick={{ fill: '#6B7280' }}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Bar\n                  dataKey=\"value\"\n                  fill={COLORS.blue}\n                  radius={[0, 4, 4, 0]}\n                  label={{ \n                    position: 'right', \n                    fill: '#6B7280',\n                    formatter: (value: number) => `${value}%`\n                  }}\n                  unit=\"%\"\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Response Time Distribution */}\n        <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n          <h2 className=\"text-lg font-semibold mb-4 text-gray-900\">Response Time Distribution</h2>\n          <div className=\"h-[300px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart\n                data={performance.responseTime}\n                margin={{ top: 20, right: 30, left: 20, bottom: 20 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                <XAxis \n                  dataKey=\"range\"\n                  stroke=\"#6B7280\"\n                  tick={{ fill: '#6B7280' }}\n                />\n                <YAxis \n                  stroke=\"#6B7280\"\n                  tick={{ fill: '#6B7280' }}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Bar\n                  dataKey=\"count\"\n                  fill={COLORS.purple}\n                  radius={[4, 4, 0, 0]}\n                  name=\"Responses\"\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n\n        {/* Resolution Rate */}\n        <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n          <h2 className=\"text-lg font-semibold mb-4 text-gray-900\">Resolution Rate</h2>\n          <div className=\"h-[300px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart margin={{ top: 20, right: 50, left: 20, bottom: 20 }}>\n                <Pie\n                  data={performance.resolutionRate}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={60}\n                  outerRadius={80}\n                  paddingAngle={5}\n                  dataKey=\"value\"\n                  label={({\n                    cx,\n                    cy,\n                    midAngle,\n                    innerRadius,\n                    outerRadius,\n                    value,\n                    index,\n                  }) => {\n                    const RADIAN = Math.PI / 180;\n                    const radius = 25 + innerRadius + (outerRadius - innerRadius);\n                    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n                    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n                    return (\n                      <text\n                        x={x}\n                        y={y}\n                        fill={performance.resolutionRate[index].color}\n                        textAnchor={x > cx ? 'start' : 'end'}\n                        dominantBaseline=\"central\"\n                        className=\"text-sm font-medium\"\n                      >\n                        {`${value}%`}\n                      </text>\n                    );\n                  }}\n                >\n                  {performance.resolutionRate.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip content={<CustomTooltip />} />\n                <Legend\n                  verticalAlign=\"middle\"\n                  align=\"right\"\n                  layout=\"vertical\"\n                  iconType=\"circle\"\n                  wrapperStyle={{\n                    paddingLeft: '20px',\n                  }}\n                />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n\n        {/* Session Duration */}\n        <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n          <h2 className=\"text-lg font-semibold mb-4 text-gray-900\">Session Duration</h2>\n          <div className=\"h-[300px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart\n                data={engagement.sessionDuration}\n                margin={{ top: 20, right: 30, left: 20, bottom: 20 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                <XAxis \n                  dataKey=\"range\"\n                  stroke=\"#6B7280\"\n                  tick={{ fill: '#6B7280' }}\n                />\n                <YAxis \n                  stroke=\"#6B7280\"\n                  tick={{ fill: '#6B7280' }}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Bar\n                  dataKey=\"count\"\n                  fill={COLORS.green}\n                  radius={[4, 4, 0, 0]}\n                  name=\"Sessions\"\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n\n        {/* Key Metrics Summary */}\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h2 className=\"text-lg font-semibold mb-4\">Key Metrics</h2>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"p-4 bg-blue-50 rounded-lg hover:shadow-md transition-shadow cursor-pointer\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Total Conversations</h3>\n              <p className=\"text-2xl font-bold text-blue-600 mt-1\">\n                {trends.reduce((sum, t) => sum + t.total, 0)}\n              </p>\n              <p className=\"text-sm text-blue-600 mt-1\">\n                +{Math.round((trends[trends.length - 1].total - trends[0].total) / trends[0].total * 100)}% vs previous\n              </p>\n            </div>\n            <div className=\"p-4 bg-green-50 rounded-lg hover:shadow-md transition-shadow cursor-pointer\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Automation Rate</h3>\n              <p className=\"text-2xl font-bold text-green-600 mt-1\">\n                {Math.round(trends.reduce((sum, t) => sum + t.automated, 0) / trends.reduce((sum, t) => sum + t.total, 0) * 100)}%\n              </p>\n              <p className=\"text-sm text-green-600 mt-1\">\n                Target: 85%\n              </p>\n            </div>\n            <div className=\"p-4 bg-yellow-50 rounded-lg hover:shadow-md transition-shadow cursor-pointer\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Avg Response Time</h3>\n              <p className=\"text-2xl font-bold text-yellow-600 mt-1\">1.8s</p>\n              <p className=\"text-sm text-yellow-600 mt-1\">\n                -0.3s vs previous\n              </p>\n            </div>\n            <div className=\"p-4 bg-purple-50 rounded-lg hover:shadow-md transition-shadow cursor-pointer\">\n              <h3 className=\"text-sm font-medium text-gray-500\">User Satisfaction</h3>\n              <p className=\"text-2xl font-bold text-purple-600 mt-1\">4.5/5</p>\n              <p className=\"text-sm text-purple-600 mt-1\">\n                +0.2 vs previous\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Analytics; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/analytics/AnalyticsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/analytics/Dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":1,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Card, Title, AreaChart, DonutChart, BarChart } from '@tremor/react';\nimport { useQuery } from '@tanstack/react-query';\nimport { format } from 'date-fns';\nimport { motion } from 'framer-motion';\nimport { fetchAnalytics } from '../../services/analytics';\n\ninterface AnalyticsData {\n  revenue: {\n    current: number;\n    previous: number;\n    trend: number;\n    history: Array<{\n      date: string;\n      value: number;\n    }>;\n  };\n  users: {\n    total: number;\n    active: number;\n    new: number;\n    churn: number;\n    byPlan: Array<{\n      plan: string;\n      count: number;\n    }>;\n  };\n  usage: {\n    apiCalls: number;\n    storage: number;\n    bandwidth: number;\n  };\n  engagement: {\n    dailyActiveUsers: number;\n    averageSessionTime: number;\n    features: Array<{\n      name: string;\n      usage: number;\n    }>;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const { data, isLoading, error } = useQuery<AnalyticsData>({\n    queryKey: ['analytics'],\n    queryFn: fetchAnalytics,\n    refetchInterval: 300000 // 5 minutes\n  });\n\n  if (isLoading) return <div>Loading analytics...</div>;\n  if (error) return <div>Error loading analytics</div>;\n  if (!data) return null;\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Revenue Metrics */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <Card>\n          <Title>Revenue Overview</Title>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n            <div className=\"p-4 bg-white rounded-lg shadow\">\n              <h3 className=\"text-gray-500\">Current MRR</h3>\n              <p className=\"text-2xl font-bold\">${data.revenue.current.toLocaleString()}</p>\n              <span className={`text-sm ${data.revenue.trend >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                {data.revenue.trend >= 0 ? '↑' : '↓'} {Math.abs(data.revenue.trend)}%\n              </span>\n            </div>\n            {/* Add more revenue metrics */}\n          </div>\n          <AreaChart\n            data={data.revenue.history}\n            index=\"date\"\n            categories={[\"value\"]}\n            colors={[\"blue\"]}\n            valueFormatter={(value) => `$${value.toLocaleString()}`}\n            yAxisWidth={60}\n          />\n        </Card>\n      </motion.div>\n\n      {/* User Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <motion.div\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n        >\n          <Card>\n            <Title>User Distribution</Title>\n            <DonutChart\n              data={data.users.byPlan}\n              category=\"count\"\n              index=\"plan\"\n              valueFormatter={(value) => `${value.toLocaleString()} users`}\n              colors={[\"blue\", \"cyan\", \"indigo\"]}\n            />\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, x: 20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n        >\n          <Card>\n            <Title>User Metrics</Title>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <h4 className=\"text-gray-500\">Total Users</h4>\n                <p className=\"text-xl font-bold\">{data.users.total.toLocaleString()}</p>\n              </div>\n              <div>\n                <h4 className=\"text-gray-500\">Active Users</h4>\n                <p className=\"text-xl font-bold\">{data.users.active.toLocaleString()}</p>\n              </div>\n              <div>\n                <h4 className=\"text-gray-500\">New Users</h4>\n                <p className=\"text-xl font-bold\">{data.users.new.toLocaleString()}</p>\n              </div>\n              <div>\n                <h4 className=\"text-gray-500\">Churn Rate</h4>\n                <p className=\"text-xl font-bold\">{data.users.churn}%</p>\n              </div>\n            </div>\n          </Card>\n        </motion.div>\n      </div>\n\n      {/* Usage Metrics */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5, delay: 0.4 }}\n      >\n        <Card>\n          <Title>System Usage</Title>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <h4 className=\"text-gray-500\">API Calls</h4>\n              <p className=\"text-xl font-bold\">{data.usage.apiCalls.toLocaleString()}</p>\n            </div>\n            <div>\n              <h4 className=\"text-gray-500\">Storage Used</h4>\n              <p className=\"text-xl font-bold\">{formatBytes(data.usage.storage)}</p>\n            </div>\n            <div>\n              <h4 className=\"text-gray-500\">Bandwidth</h4>\n              <p className=\"text-xl font-bold\">{formatBytes(data.usage.bandwidth)}/s</p>\n            </div>\n          </div>\n        </Card>\n      </motion.div>\n\n      {/* Feature Usage */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5, delay: 0.6 }}\n      >\n        <Card>\n          <Title>Feature Usage</Title>\n          <BarChart\n            data={data.engagement.features}\n            index=\"name\"\n            categories={[\"usage\"]}\n            colors={[\"blue\"]}\n            valueFormatter={(value) => value.toLocaleString()}\n            yAxisWidth={48}\n          />\n        </Card>\n      </motion.div>\n    </div>\n  );\n};\n\nconst formatBytes = (bytes: number): string => {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n};\n\nexport default Dashboard; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/audit/AuditLogViewer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[679,682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[679,682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  Card,\n  Text,\n  Badge,\n  Button,\n  Select,\n  SelectItem,\n  TextInput,\n  DateRangePicker,\n  Title,\n  Table,\n  TableHead,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Tab,\n  TabGroup,\n  TabList,\n  TabPanel,\n  TabPanels,\n} from '@tremor/react';\nimport { format } from 'date-fns';\n\ninterface AuditLog {\n  id: string;\n  timestamp: Date;\n  action: string;\n  user: {\n    id: string;\n    name: string;\n    role: string;\n  };\n  resource: {\n    type: string;\n    id: string;\n    name: string;\n  };\n  details: string;\n  status: 'success' | 'failure';\n  ipAddress: string;\n  metadata?: Record<string, any>;\n}\n\ninterface AuditFilters {\n  action: string;\n  user: string;\n  resource: string;\n  status: string;\n  dateRange: {\n    from: Date;\n    to: Date;\n  };\n  search: string;\n}\n\nconst AuditLogViewer: React.FC = () => {\n  const [logs, setLogs] = useState<AuditLog[]>([]);\n  const [filters, setFilters] = useState<AuditFilters>({\n    action: '',\n    user: '',\n    resource: '',\n    status: '',\n    dateRange: {\n      from: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n      to: new Date(),\n    },\n    search: '',\n  });\n  const [isLive, setIsLive] = useState(true);\n  const [view, setView] = useState<'table' | 'detailed'>('table');\n\n  // Mock data - replace with real API calls\n  const fetchLogs = useCallback(async () => {\n    const mockLogs: AuditLog[] = [\n      {\n        id: '1',\n        timestamp: new Date(),\n        action: 'user.login',\n        user: {\n          id: 'user1',\n          name: 'John Doe',\n          role: 'admin',\n        },\n        resource: {\n          type: 'auth',\n          id: 'session1',\n          name: 'User Session',\n        },\n        details: 'User logged in successfully',\n        status: 'success',\n        ipAddress: '192.168.1.1',\n        metadata: {\n          browser: 'Chrome',\n          os: 'Windows',\n        },\n      },\n      {\n        id: '2',\n        timestamp: new Date(Date.now() - 3600000),\n        action: 'data.update',\n        user: {\n          id: 'user2',\n          name: 'Jane Smith',\n          role: 'editor',\n        },\n        resource: {\n          type: 'document',\n          id: 'doc1',\n          name: 'Annual Report',\n        },\n        details: 'Document updated',\n        status: 'success',\n        ipAddress: '192.168.1.2',\n      },\n      {\n        id: '3',\n        timestamp: new Date(Date.now() - 7200000),\n        action: 'settings.change',\n        user: {\n          id: 'user1',\n          name: 'John Doe',\n          role: 'admin',\n        },\n        resource: {\n          type: 'system',\n          id: 'settings1',\n          name: 'System Settings',\n        },\n        details: 'Failed to update system settings',\n        status: 'failure',\n        ipAddress: '192.168.1.1',\n        metadata: {\n          error: 'Invalid configuration',\n        },\n      },\n    ];\n    setLogs(prev => [...mockLogs, ...prev].slice(0, 100)); // Keep last 100 logs\n  }, []);\n\n  useEffect(() => {\n    fetchLogs();\n  }, [fetchLogs]);\n\n  useEffect(() => {\n    if (isLive) {\n      const interval = setInterval(fetchLogs, 30000); // Poll every 30 seconds\n      return () => clearInterval(interval);\n    }\n  }, [isLive, fetchLogs]);\n\n  const filteredLogs = logs.filter((log) => {\n    const matchesAction = !filters.action || log.action === filters.action;\n    const matchesUser = !filters.user || log.user.id === filters.user;\n    const matchesResource = !filters.resource || log.resource.type === filters.resource;\n    const matchesStatus = !filters.status || log.status === filters.status;\n    const matchesDateRange =\n      log.timestamp >= filters.dateRange.from &&\n      log.timestamp <= filters.dateRange.to;\n    const matchesSearch =\n      !filters.search ||\n      log.details.toLowerCase().includes(filters.search.toLowerCase()) ||\n      log.user.name.toLowerCase().includes(filters.search.toLowerCase()) ||\n      log.resource.name.toLowerCase().includes(filters.search.toLowerCase());\n\n    return (\n      matchesAction &&\n      matchesUser &&\n      matchesResource &&\n      matchesStatus &&\n      matchesDateRange &&\n      matchesSearch\n    );\n  });\n\n  const uniqueActions = Array.from(new Set(logs.map(log => log.action)));\n  const uniqueUsers = Array.from(new Set(logs.map(log => log.user.id)));\n  const uniqueResources = Array.from(new Set(logs.map(log => log.resource.type)));\n\n  const exportLogs = () => {\n    const csv = [\n      ['Timestamp', 'Action', 'User', 'Resource', 'Details', 'Status', 'IP Address'],\n      ...filteredLogs.map(log => [\n        format(log.timestamp, 'yyyy-MM-dd HH:mm:ss'),\n        log.action,\n        log.user.name,\n        log.resource.name,\n        log.details,\n        log.status,\n        log.ipAddress,\n      ]),\n    ]\n      .map(row => row.join(','))\n      .join('\\n');\n\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `audit-logs-${format(new Date(), 'yyyy-MM-dd')}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <Title>Audit Logs</Title>\n          <Text>Track and monitor all system activities</Text>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            size=\"sm\"\n            variant=\"secondary\"\n            onClick={() => setIsLive(!isLive)}\n            color={isLive ? \"red\" : \"blue\"}\n          >\n            {isLive ? 'Pause Updates' : 'Resume Updates'}\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"secondary\"\n            onClick={exportLogs}\n          >\n            Export CSV\n          </Button>\n        </div>\n      </div>\n\n      <Card>\n        <TabGroup>\n          <TabList>\n            <Tab>Filters</Tab>\n            <Tab>View Options</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4\">\n                <div>\n                  <Text>Action</Text>\n                  <Select\n                    value={filters.action}\n                    onValueChange={(value) => setFilters({ ...filters, action: value })}\n                  >\n                    <SelectItem value=\"\">All Actions</SelectItem>\n                    {uniqueActions.map((action) => (\n                      <SelectItem key={action} value={action}>\n                        {action}\n                      </SelectItem>\n                    ))}\n                  </Select>\n                </div>\n\n                <div>\n                  <Text>User</Text>\n                  <Select\n                    value={filters.user}\n                    onValueChange={(value) => setFilters({ ...filters, user: value })}\n                  >\n                    <SelectItem value=\"\">All Users</SelectItem>\n                    {uniqueUsers.map((userId) => (\n                      <SelectItem key={userId} value={userId}>\n                        {logs.find(log => log.user.id === userId)?.user.name}\n                      </SelectItem>\n                    ))}\n                  </Select>\n                </div>\n\n                <div>\n                  <Text>Resource Type</Text>\n                  <Select\n                    value={filters.resource}\n                    onValueChange={(value) => setFilters({ ...filters, resource: value })}\n                  >\n                    <SelectItem value=\"\">All Resources</SelectItem>\n                    {uniqueResources.map((resource) => (\n                      <SelectItem key={resource} value={resource}>\n                        {resource}\n                      </SelectItem>\n                    ))}\n                  </Select>\n                </div>\n\n                <div>\n                  <Text>Status</Text>\n                  <Select\n                    value={filters.status}\n                    onValueChange={(value) => setFilters({ ...filters, status: value })}\n                  >\n                    <SelectItem value=\"\">All Statuses</SelectItem>\n                    <SelectItem value=\"success\">Success</SelectItem>\n                    <SelectItem value=\"failure\">Failure</SelectItem>\n                  </Select>\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <Text>Search</Text>\n                  <TextInput\n                    placeholder=\"Search logs...\"\n                    value={filters.search}\n                    onChange={(e) => setFilters({ ...filters, search: e.target.value })}\n                  />\n                </div>\n\n                <div>\n                  <Text>Date Range</Text>\n                  <DateRangePicker\n                    value={filters.dateRange}\n                    onValueChange={(value) => {\n                      if (value.from && value.to) {\n                        setFilters({ ...filters, dateRange: { from: value.from, to: value.to } });\n                      }\n                    }}\n                  />\n                </div>\n              </div>\n            </TabPanel>\n            <TabPanel>\n              <div className=\"p-4\">\n                <Text>View Type</Text>\n                <div className=\"flex space-x-2 mt-2\">\n                  <Button\n                    size=\"xs\"\n                    variant={view === 'table' ? 'primary' : 'secondary'}\n                    onClick={() => setView('table')}\n                  >\n                    Table View\n                  </Button>\n                  <Button\n                    size=\"xs\"\n                    variant={view === 'detailed' ? 'primary' : 'secondary'}\n                    onClick={() => setView('detailed')}\n                  >\n                    Detailed View\n                  </Button>\n                </div>\n              </div>\n            </TabPanel>\n          </TabPanels>\n        </TabGroup>\n      </Card>\n\n      {view === 'table' ? (\n        <Card>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableHeaderCell>Timestamp</TableHeaderCell>\n                <TableHeaderCell>Action</TableHeaderCell>\n                <TableHeaderCell>User</TableHeaderCell>\n                <TableHeaderCell>Resource</TableHeaderCell>\n                <TableHeaderCell>Details</TableHeaderCell>\n                <TableHeaderCell>Status</TableHeaderCell>\n                <TableHeaderCell>IP Address</TableHeaderCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {filteredLogs.map((log) => (\n                <TableRow key={log.id}>\n                  <TableCell>{format(log.timestamp, 'MMM d, HH:mm:ss')}</TableCell>\n                  <TableCell>{log.action}</TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <Text>{log.user.name}</Text>\n                      <Badge size=\"sm\" color=\"gray\">\n                        {log.user.role}\n                      </Badge>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Text>{log.resource.name}</Text>\n                    <Text className=\"text-xs text-gray-500\">{log.resource.type}</Text>\n                  </TableCell>\n                  <TableCell>{log.details}</TableCell>\n                  <TableCell>\n                    <Badge\n                      color={log.status === 'success' ? 'green' : 'red'}\n                    >\n                      {log.status}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>{log.ipAddress}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {filteredLogs.map((log) => (\n            <Card key={log.id}>\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Text className=\"font-medium\">{log.action}</Text>\n                    <Badge\n                      color={log.status === 'success' ? 'green' : 'red'}\n                    >\n                      {log.status}\n                    </Badge>\n                  </div>\n                  <Text className=\"text-sm text-gray-500 mt-1\">\n                    {format(log.timestamp, 'MMM d, yyyy HH:mm:ss')}\n                  </Text>\n                </div>\n                <Badge color=\"gray\">{log.ipAddress}</Badge>\n              </div>\n\n              <div className=\"mt-4 grid grid-cols-2 gap-4\">\n                <div>\n                  <Text className=\"font-medium\">User</Text>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <Text>{log.user.name}</Text>\n                    <Badge size=\"sm\" color=\"gray\">\n                      {log.user.role}\n                    </Badge>\n                  </div>\n                </div>\n\n                <div>\n                  <Text className=\"font-medium\">Resource</Text>\n                  <div className=\"mt-1\">\n                    <Text>{log.resource.name}</Text>\n                    <Text className=\"text-sm text-gray-500\">{log.resource.type}</Text>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-4\">\n                <Text className=\"font-medium\">Details</Text>\n                <Text className=\"mt-1\">{log.details}</Text>\n              </div>\n\n              {log.metadata && (\n                <div className=\"mt-4\">\n                  <Text className=\"font-medium\">Additional Information</Text>\n                  <pre className=\"mt-1 bg-gray-50 p-2 rounded text-sm\">\n                    {JSON.stringify(log.metadata, null, 2)}\n                  </pre>\n                </div>\n              )}\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AuditLogViewer; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/charts/AreaChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/charts/BarChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/charts/DonutChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/charts/LineChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/charts/UsageTrendsChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/chat/ChatInterface.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/chatbot/ChatbotConversation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'id' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":39,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useParams } from 'react-router-dom';\n\ninterface Message {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: string;\n}\n\nconst defaultMessages: Message[] = [\n  {\n    id: '1',\n    role: 'user',\n    content: 'Hi, I need help with my order.',\n    timestamp: '2024-03-20T10:30:00Z',\n  },\n  {\n    id: '2',\n    role: 'assistant',\n    content: 'Hello! I\\'d be happy to help you with your order. Could you please provide your order number?',\n    timestamp: '2024-03-20T10:30:05Z',\n  },\n  {\n    id: '3',\n    role: 'user',\n    content: 'My order number is #12345',\n    timestamp: '2024-03-20T10:30:15Z',\n  },\n  {\n    id: '4',\n    role: 'assistant',\n    content: 'Thank you for providing the order number. I can see that your order #12345 was placed yesterday and is currently being processed. Is there something specific you\\'d like to know about it?',\n    timestamp: '2024-03-20T10:30:20Z',\n  },\n];\n\nconst ChatbotConversation: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const [messages, setMessages] = React.useState<Message[]>(defaultMessages);\n  const [newMessage, setNewMessage] = React.useState('');\n  const messagesEndRef = React.useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  React.useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newMessage.trim()) return;\n\n    const userMessage: Message = {\n      id: String(Date.now()),\n      role: 'user',\n      content: newMessage,\n      timestamp: new Date().toISOString(),\n    };\n\n    setMessages([...messages, userMessage]);\n    setNewMessage('');\n\n    // TODO: Implement actual chatbot API call\n    setTimeout(() => {\n      const botMessage: Message = {\n        id: String(Date.now() + 1),\n        role: 'assistant',\n        content: 'I understand your message. How else can I assist you?',\n        timestamp: new Date().toISOString(),\n      };\n      setMessages(prev => [...prev, botMessage]);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto bg-gray-50 min-h-[calc(100vh-4rem)]\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Conversation</h1>\n        <p className=\"text-gray-600 mt-1\">\n          Chat history with your AI assistant\n        </p>\n      </div>\n\n      <div className=\"bg-white shadow-lg rounded-lg border border-gray-100 flex flex-col h-[calc(100vh-16rem)]\">\n        <div className=\"flex-1 overflow-y-auto p-6 space-y-4\">\n          {messages.map((message) => (\n            <div\n              key={message.id}\n              className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n            >\n              <div\n                className={`max-w-[70%] rounded-lg p-4 ${\n                  message.role === 'user'\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-gray-100 text-gray-900'\n                }`}\n              >\n                <p className=\"text-sm\">{message.content}</p>\n                <p className={`text-xs mt-1 ${\n                  message.role === 'user' ? 'text-blue-100' : 'text-gray-500'\n                }`}>\n                  {new Date(message.timestamp).toLocaleTimeString()}\n                </p>\n              </div>\n            </div>\n          ))}\n          <div ref={messagesEndRef} />\n        </div>\n\n        <div className=\"border-t border-gray-100 p-4 bg-gray-50\">\n          <form onSubmit={handleSubmit} className=\"flex space-x-4\">\n            <input\n              type=\"text\"\n              value={newMessage}\n              onChange={(e) => setNewMessage(e.target.value)}\n              placeholder=\"Type your message...\"\n              className=\"flex-1 rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n            />\n            <button\n              type=\"submit\"\n              className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors shadow-sm\"\n            >\n              <svg\n                className=\"w-5 h-5 mr-1.5\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\"\n                />\n              </svg>\n              Send\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatbotConversation; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/chatbot/ChatbotCreate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/chatbot/ChatbotCustomization.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onSave' is defined but never used.","line":53,"column":70,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":76},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setOpacity' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":61,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showIntegrationsModal' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":67,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowIntegrationsModal' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":67,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'customGradient' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":68,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCustomGradient' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":68,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'configData' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":89,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5247,5250],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5247,5250],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":211,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7616,7619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7616,7619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getSampleResponseByLanguage' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":303,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":303,"endColumn":36}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport IntegrationManager from './IntegrationManager';\nimport ChatbotWidget from './ChatbotWidget';\nimport ChatbotTester from './ChatbotTester';\nimport IntegrationDocs from './IntegrationDocs';\nimport { MessageSquare, X, Send, Minimize2, RefreshCw, Eye, Code, TestTube, Book, Settings as SettingsIcon } from 'lucide-react';\n\ninterface ChatbotCustomizationProps {\n  onSave?: () => void;\n}\n\nconst FONT_OPTIONS = [\n  { name: 'Inter', value: 'font-inter' },\n  { name: 'Roboto', value: 'font-roboto' },\n  { name: 'Open Sans', value: 'font-opensans' },\n  { name: 'Poppins', value: 'font-poppins' },\n  { name: 'Montserrat', value: 'font-montserrat' }\n];\n\nconst BUBBLE_SHAPES = [\n  { name: 'Round', value: 'rounded-full' },\n  { name: 'Soft', value: 'rounded-xl' },\n  { name: 'Sharp', value: 'rounded-md' },\n  { name: 'Square', value: 'rounded-none' }\n];\n\nconst FONT_SIZES = [\n  { name: 'Small', value: 'sm' },\n  { name: 'Medium', value: 'md' },\n  { name: 'Large', value: 'lg' }\n];\n\nconst COLOR_GRADIENTS = [\n  { from: '#4F46E5', to: '#2563EB', name: 'Blue' },\n  { from: '#DC2626', to: '#B91C1C', name: 'Red' },\n  { from: '#059669', to: '#047857', name: 'Green' },\n  { from: '#D97706', to: '#B45309', name: 'Orange' },\n  { from: '#7C3AED', to: '#5B21B6', name: 'Purple' },\n  { from: '#F59E0B', to: '#D97706', name: 'Amber' },\n  { from: '#EC4899', to: '#BE185D', name: 'Pink' },\n  { from: '#10B981', to: '#059669', name: 'Emerald' }\n];\n\nconst INTEGRATIONS = [\n  { name: 'Shopify', icon: '🛍️', primary: true },\n  { name: 'WhatsApp', icon: '💬' },\n  { name: 'Facebook Messenger', icon: '📱' },\n  { name: 'Telegram', icon: '📬' },\n  { name: 'Instagram', icon: '📸' },\n  { name: 'Website', icon: '🌐' }\n];\n\nconst ChatbotCustomization: React.FC<ChatbotCustomizationProps> = ({ onSave }) => {\n  const [name, setName] = useState('AI Assistant');\n  const [language, setLanguage] = useState('English');\n  const [welcomeMessage, setWelcomeMessage] = useState('Hi! How can I help you today?');\n  const [avatar, setAvatar] = useState<File | null>(null);\n  const [chatIcon, setChatIcon] = useState<File | null>(null);\n  const [primaryColor, setPrimaryColor] = useState('#4F46E5');\n  const [gradient, setGradient] = useState<{ from: string; to: string }>(COLOR_GRADIENTS[0]);\n  const [opacity, setOpacity] = useState(100);\n  const [selectedFont, setSelectedFont] = useState(FONT_OPTIONS[0]);\n  const [fontSize, setFontSize] = useState(FONT_SIZES[1]);\n  const [bubbleShape, setBubbleShape] = useState(BUBBLE_SHAPES[1]);\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\n  const [previewDevice, setPreviewDevice] = useState<'desktop' | 'tablet' | 'mobile'>('desktop');\n  const [showIntegrationsModal, setShowIntegrationsModal] = useState(false);\n  const [customGradient, setCustomGradient] = useState({ from: '#4F46E5', to: '#2563EB' });\n  const [isPreviewOpen, setIsPreviewOpen] = useState(true);\n  const [currentTab, setCurrentTab] = useState<'customization' | 'integrations' | 'test' | 'docs'>('customization');\n  const [chatbotId] = useState('chatbot_' + Math.random().toString(36).substr(2, 9));\n  const [shopifyIntegration, setShopifyIntegration] = useState({\n    isConnected: false,\n    storeUrl: '',\n    accessToken: '',\n    isInstalling: false\n  });\n\n  const handleSaveAndPublish = async () => {\n    try {\n      // Show loading state\n      const button = document.querySelector('[data-save-publish-btn]') as HTMLButtonElement;\n      if (button) {\n        button.disabled = true;\n        button.textContent = 'Saving...';\n      }\n\n      // Simulate API call to save configuration\n      const configData = {\n        id: chatbotId,\n        name,\n        language,\n        welcomeMessage,\n        avatar: avatar ? await convertFileToBase64(avatar) : undefined,\n        chatIcon: chatIcon ? await convertFileToBase64(chatIcon) : undefined,\n        primaryColor,\n        gradient,\n        opacity,\n        selectedFont,\n        fontSize,\n        bubbleShape,\n        theme\n      };\n\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Show success feedback\n      alert('Chatbot configuration saved and published successfully!');\n      \n      // Reset button\n      if (button) {\n        button.disabled = false;\n        button.textContent = 'Save & Publish';\n      }\n\n      // Redirect to integrations tab after successful save\n      setCurrentTab('integrations');\n      \n    } catch (error) {\n      // Show error feedback\n      alert('Failed to save configuration. Please try again.');\n      console.error('Save error:', error);\n      \n      // Reset button\n      const button = document.querySelector('[data-save-publish-btn]') as HTMLButtonElement;\n      if (button) {\n        button.disabled = false;\n        button.textContent = 'Save & Publish';\n      }\n    }\n  };\n\n  // Helper function to convert file to base64\n  const convertFileToBase64 = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleIntegrationComplete = (integration: any) => {\n    console.log('Integration completed:', integration);\n    // Here you can add logic to save the integration\n  };\n\n  const handleShopifyOneClickInstall = async () => {\n    setShopifyIntegration(prev => ({ ...prev, isInstalling: true }));\n    \n    try {\n      // Generate the widget installation script\n      const widgetScript = `\n<!-- AI Orchestrator Chatbot Widget -->\n<script>\n  window.aiOrchestratorConfig = {\n    chatbotId: '${chatbotId}',\n    name: '${name}',\n    primaryColor: '${primaryColor}',\n    gradient: ${JSON.stringify(gradient)},\n    theme: '${theme}',\n    welcomeMessage: '${welcomeMessage}',\n    language: '${language}',\n    fontFamily: '${selectedFont.name}',\n    fontSize: '${fontSize.value}',\n    bubbleShape: '${bubbleShape.value}'\n  };\n</script>\n<script src=\"https://cdn.ai-orchestrator.com/widget/v1/chatbot.js\" async></script>\n<!-- End AI Orchestrator Chatbot Widget -->`;\n\n      // Copy widget script to clipboard\n      await navigator.clipboard.writeText(widgetScript);\n      \n      // Simulate installation process with better UX\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      // Generate Shopify theme installation instructions\n      const instructions = {\n        script: widgetScript,\n        installSteps: [\n          'Copy the widget code above',\n          'Go to your Shopify Admin → Online Store → Themes',\n          'Click \"Actions\" → \"Edit code\" for your active theme',\n          'Open the theme.liquid file',\n          'Paste the widget code before the closing </body> tag',\n          'Save the file'\n        ],\n        webhookUrl: `https://api.ai-orchestrator.com/webhook/shopify/${chatbotId}`,\n        testUrl: `${window.location.origin}/test-widget?shopify=true&chatbot=${chatbotId}`\n      };\n\n      // Show installation success modal\n      showShopifyInstallationModal(instructions);\n      \n      // Only set as connected after successful installation process\n      setShopifyIntegration(prev => ({ \n        ...prev, \n        isInstalling: false,\n        isConnected: true \n      }));\n      \n    } catch (error) {\n      console.error('Shopify installation failed:', error);\n      alert('Installation failed. Please try again or contact support.');\n      setShopifyIntegration(prev => ({ ...prev, isInstalling: false }));\n    }\n  };\n\n  const showShopifyInstallationModal = (instructions: any) => {\n    // Create a more readable modal with better styling\n    const modal = document.createElement('div');\n    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50';\n    modal.innerHTML = `\n      <div class=\"bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        <div class=\"p-6 border-b border-gray-200\">\n          <div class=\"flex items-center justify-between\">\n            <h3 class=\"text-xl font-semibold text-gray-900\">Shopify Widget Installation</h3>\n            <button onclick=\"this.closest('.fixed').remove()\" class=\"text-gray-400 hover:text-gray-600 text-2xl\">&times;</button>\n          </div>\n        </div>\n        <div class=\"p-6\">\n          <div class=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-6\">\n            <p class=\"text-green-800 font-medium\">✅ Widget code generated and copied to clipboard!</p>\n          </div>\n          <div class=\"space-y-6\">\n            <div>\n              <h4 class=\"font-semibold text-gray-900 mb-3\">Installation Steps:</h4>\n              <ol class=\"list-decimal list-inside space-y-2 text-gray-700\">\n                ${instructions.installSteps.map((step: string) => `<li class=\"leading-relaxed\">${step}</li>`).join('')}\n              </ol>\n            </div>\n            <div>\n              <h4 class=\"font-semibold text-gray-900 mb-3\">Widget Code:</h4>\n              <div class=\"bg-gray-900 rounded-lg p-4 overflow-x-auto\">\n                <pre class=\"text-green-400 text-sm font-mono whitespace-pre-wrap\">${instructions.script}</pre>\n              </div>\n            </div>\n            <div class=\"flex space-x-3\">\n              <button onclick=\"navigator.clipboard.writeText(\\`${instructions.script.replace(/`/g, '\\\\`')}\\`); this.textContent='Copied!'; setTimeout(() => this.textContent='Copy Code Again', 2000)\" class=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium\">Copy Code Again</button>\n              <button onclick=\"window.open('${instructions.testUrl}', '_blank')\" class=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 font-medium\">Test Widget</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n    document.body.appendChild(modal);\n  };\n\n  const getPreviewWidth = () => {\n    switch (previewDevice) {\n      case 'mobile': return 'w-[320px] max-w-[320px]';\n      case 'tablet': return 'w-[400px] max-w-[400px]';\n      default: return 'w-[600px] max-w-[600px]';\n    }\n  };\n\n  const getPreviewHeight = () => {\n    switch (previewDevice) {\n      case 'mobile': return 'h-[420px]';\n      case 'tablet': return 'h-[460px]';\n      default: return 'h-[550px]';\n    }\n  };\n\n  const getWelcomeMessageByLanguage = (lang?: string) => {\n    const l = lang || language;\n    const messages = {\n      'English': 'Hi! How can I help you today?',\n      'Spanish': '¡Hola! ¿Cómo puedo ayudarte hoy?',\n      'French': 'Bonjour! Comment puis-je vous aider aujourd\\'hui?',\n      'Italian': 'Ciao! Come posso aiutarti oggi?',\n      'German': 'Hallo! Wie kann ich Ihnen heute helfen?'\n    };\n    return messages[l as keyof typeof messages] || messages.English;\n  };\n\n  const getPlaceholderByLanguage = (lang?: string) => {\n    const l = lang || language;\n    const placeholders = {\n      'English': 'Type your message...',\n      'Spanish': 'Escribe tu mensaje...',\n      'French': 'Tapez votre message...',\n      'Italian': 'Scrivi il tuo messaggio...',\n      'German': 'Geben Sie Ihre Nachricht ein...'\n    };\n    return placeholders[l as keyof typeof placeholders] || placeholders.English;\n  };\n\n  const getOnlineStatusByLanguage = (lang?: string) => {\n    const l = lang || language;\n    const statuses = {\n      'English': '🟢 Online · Typically replies instantly',\n      'Spanish': '🟢 En línea · Responde típicamente al instante',\n      'French': '🟢 En ligne · Répond généralement instantanément',\n      'Italian': '🟢 Online · Risponde tipicamente all\\'istante',\n      'German': '🟢 Online · Antwortet normalerweise sofort'\n    };\n    return statuses[l as keyof typeof statuses] || statuses.English;\n  };\n\n  const getSampleResponseByLanguage = (lang?: string) => {\n    const l = lang || language;\n    const responses = {\n      'English': 'I\\'d be happy to help you with your order! Could you please provide your order number?',\n      'Spanish': '¡Estaría encantado de ayudarte con tu pedido! ¿Podrías proporcionar tu número de pedido?',\n      'French': 'Je serais ravi de vous aider avec votre commande! Pourriez-vous fournir votre numéro de commande?',\n      'Italian': 'Sarei felice di aiutarti con il tuo ordine! Potresti fornire il numero dell\\'ordine?',\n      'German': 'Ich helfe Ihnen gerne bei Ihrer Bestellung! Könnten Sie bitte Ihre Bestellnummer angeben?'\n    };\n    return responses[l as keyof typeof responses] || responses.English;\n  };\n\n  const chatbotConfig = {\n    id: chatbotId,\n    name,\n    primaryColor,\n    gradient,\n    theme,\n    welcomeMessage,\n    language,\n    avatar: avatar ? URL.createObjectURL(avatar) : undefined,\n    chatIcon: chatIcon ? URL.createObjectURL(chatIcon) : undefined,\n    fontFamily: selectedFont.value,\n    fontSize: fontSize.value,\n    bubbleShape: bubbleShape.value\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50/50 pt-16\">\n      <div className=\"max-w-[1400px] mx-auto px-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center py-4\">\n          <div>\n            <h1 className=\"text-2xl font-semibold text-gray-900\">Chatbot Customization</h1>\n            <p className=\"mt-1 text-sm text-gray-500\">Customize your chatbot's appearance and behavior</p>\n          </div>\n          <button\n            onClick={handleSaveAndPublish}\n            data-save-publish-btn\n            className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            Save & Publish\n          </button>\n        </div>\n\n        {/* Tabs */}\n        <div className=\"bg-white rounded-lg shadow-sm mb-6\">\n          <div className=\"border-b border-gray-200\">\n            <nav className=\"-mb-px flex space-x-8 px-6 overflow-x-auto\">\n              <button\n                onClick={() => setCurrentTab('customization')}\n                className={`py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${\n                  currentTab === 'customization'\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                Customization\n              </button>\n              <button\n                onClick={() => setCurrentTab('integrations')}\n                className={`py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${\n                  currentTab === 'integrations'\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n                              >\n                  Integrations\n                </button>\n                <button\n                  onClick={() => setCurrentTab('test')}\n                className={`py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${\n                  currentTab === 'test'\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                Test\n              </button>\n              <button\n                onClick={() => setCurrentTab('docs')}\n                className={`py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${\n                  currentTab === 'docs'\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                Documentation\n              </button>\n            </nav>\n          </div>\n        </div>\n\n        {/* Tab Content */}\n        <div>\n          {currentTab === 'customization' && (\n            <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n              {/* Left Column - Settings */}\n              <div className=\"xl:col-span-2 space-y-6\">\n                {/* Basic Settings Section */}\n                <div className=\"bg-white rounded-lg shadow-sm\">\n                  <div className=\"p-6\">\n                    <h2 className=\"text-base font-medium text-gray-900 mb-4\">Basic Settings</h2>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700\">Chatbot Name</label>\n                        <input\n                          type=\"text\"\n                          value={name}\n                          onChange={(e) => setName(e.target.value)}\n                          className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 text-gray-900 focus:bg-white focus:border-blue-500 focus:ring-blue-500\"\n                          placeholder=\"Enter chatbot name\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700\">Language</label>\n                        <select\n                          value={language}\n                          onChange={(e) => {\n                            setLanguage(e.target.value);\n                            setWelcomeMessage(getWelcomeMessageByLanguage(e.target.value));\n                          }}\n                          className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 text-gray-900 focus:bg-white focus:border-blue-500 focus:ring-blue-500\"\n                        >\n                          <option value=\"English\">English</option>\n                          <option value=\"Spanish\">Spanish</option>\n                          <option value=\"French\">French</option>\n                          <option value=\"Italian\">Italian</option>\n                          <option value=\"German\">German</option>\n                        </select>\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700\">Welcome Message</label>\n                        <textarea\n                          value={welcomeMessage}\n                          onChange={(e) => setWelcomeMessage(e.target.value)}\n                          rows={3}\n                          className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 text-gray-900 focus:bg-white focus:border-blue-500 focus:ring-blue-500\"\n                          placeholder=\"Enter welcome message\"\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Chatbot Avatar</label>\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center overflow-hidden flex-shrink-0\">\n                              {avatar ? (\n                                <img src={URL.createObjectURL(avatar)} alt=\"Avatar\" className=\"w-full h-full object-cover\" />\n                              ) : (\n                                <span className=\"text-gray-400 text-lg font-bold\">{name.charAt(0).toUpperCase()}</span>\n                              )}\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <input\n                                type=\"file\"\n                                accept=\"image/*\"\n                                onChange={(e) => {\n                                  const file = e.target.files?.[0];\n                                  if (file) setAvatar(file);\n                                }}\n                                className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\n                              />\n                              {avatar && (\n                                <button\n                                  onClick={() => setAvatar(null)}\n                                  className=\"mt-1 text-xs text-red-600 hover:text-red-800\"\n                                >\n                                  Remove\n                                </button>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Chat Icon</label>\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center overflow-hidden flex-shrink-0\">\n                              {chatIcon ? (\n                                <img src={URL.createObjectURL(chatIcon)} alt=\"Chat Icon\" className=\"w-full h-full object-cover\" />\n                              ) : (\n                                <svg className=\"w-6 h-6 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n                                </svg>\n                              )}\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <input\n                                type=\"file\"\n                                accept=\"image/*\"\n                                onChange={(e) => {\n                                  const file = e.target.files?.[0];\n                                  if (file) setChatIcon(file);\n                                }}\n                                className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\n                              />\n                              {chatIcon && (\n                                <button\n                                  onClick={() => setChatIcon(null)}\n                                  className=\"mt-1 text-xs text-red-600 hover:text-red-800\"\n                                >\n                                  Remove\n                                </button>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Appearance Settings */}\n                <div className=\"bg-white rounded-lg shadow-sm\">\n                  <div className=\"p-6\">\n                    <h2 className=\"text-base font-medium text-gray-900 mb-4\">Appearance</h2>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700\">Primary Color</label>\n                        <div className=\"mt-1 flex items-center space-x-2\">\n                          <input\n                            type=\"color\"\n                            value={primaryColor}\n                            onChange={(e) => setPrimaryColor(e.target.value)}\n                            className=\"h-10 w-20 rounded border border-gray-300\"\n                          />\n                          <input\n                            type=\"text\"\n                            value={primaryColor}\n                            onChange={(e) => setPrimaryColor(e.target.value)}\n                            className=\"flex-1 rounded-md border border-gray-300 px-3 py-2 bg-gray-50 text-gray-900 focus:bg-white focus:border-blue-500 focus:ring-blue-500\"\n                          />\n                        </div>\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700\">Gradient</label>\n                        <div className=\"mt-2 grid grid-cols-4 gap-2\">\n                          {COLOR_GRADIENTS.map((grad, index) => (\n                            <button\n                              key={index}\n                              onClick={() => setGradient(grad)}\n                              className={`h-12 rounded-lg border-2 ${\n                                gradient.from === grad.from && gradient.to === grad.to\n                                  ? 'border-blue-500'\n                                  : 'border-gray-200'\n                              }`}\n                              style={{\n                                background: `linear-gradient(135deg, ${grad.from}, ${grad.to})`\n                              }}\n                              title={grad.name}\n                            />\n                          ))}\n                        </div>\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-3\">Theme</label>\n                        <div className=\"grid grid-cols-2 gap-3\">\n                          <label className={`relative flex items-center justify-center p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                            theme === 'light' \n                              ? 'border-blue-500 bg-blue-50 text-blue-700' \n                              : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'\n                          }`}>\n                            <input\n                              type=\"radio\"\n                              value=\"light\"\n                              checked={theme === 'light'}\n                              onChange={(e) => setTheme(e.target.value as 'light' | 'dark')}\n                              className=\"sr-only\"\n                            />\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-8 h-8 bg-white border border-gray-300 rounded-md flex items-center justify-center\">\n                                <div className=\"w-4 h-4 bg-gray-100 rounded-sm\"></div>\n                              </div>\n                              <span className=\"font-medium\">Light Theme</span>\n                            </div>\n                            {theme === 'light' && (\n                              <div className=\"absolute top-2 right-2\">\n                                <svg className=\"w-5 h-5 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                                </svg>\n                              </div>\n                            )}\n                          </label>\n                          <label className={`relative flex items-center justify-center p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                            theme === 'dark' \n                              ? 'border-blue-500 bg-blue-50 text-blue-700' \n                              : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'\n                          }`}>\n                            <input\n                              type=\"radio\"\n                              value=\"dark\"\n                              checked={theme === 'dark'}\n                              onChange={(e) => setTheme(e.target.value as 'light' | 'dark')}\n                              className=\"sr-only\"\n                            />\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-8 h-8 bg-gray-800 border border-gray-600 rounded-md flex items-center justify-center\">\n                                <div className=\"w-4 h-4 bg-gray-600 rounded-sm\"></div>\n                              </div>\n                              <span className=\"font-medium\">Dark Theme</span>\n                            </div>\n                            {theme === 'dark' && (\n                              <div className=\"absolute top-2 right-2\">\n                                <svg className=\"w-5 h-5 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                                </svg>\n                              </div>\n                            )}\n                          </label>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Typography Settings */}\n                <div className=\"bg-white rounded-lg shadow-sm\">\n                  <div className=\"p-6\">\n                    <h2 className=\"text-base font-medium text-gray-900 mb-4\">Typography</h2>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700\">Font Family</label>\n                        <select\n                          value={selectedFont.value}\n                          onChange={(e) => setSelectedFont(FONT_OPTIONS.find(f => f.value === e.target.value) || FONT_OPTIONS[0])}\n                          className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 text-gray-900 focus:bg-white focus:border-blue-500 focus:ring-blue-500\"\n                        >\n                          {FONT_OPTIONS.map(font => (\n                            <option key={font.value} value={font.value}>\n                              {font.name}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700\">Font Size</label>\n                        <select\n                          value={fontSize.value}\n                          onChange={(e) => setFontSize(FONT_SIZES.find(f => f.value === e.target.value) || FONT_SIZES[1])}\n                          className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 text-gray-900 focus:bg-white focus:border-blue-500 focus:ring-blue-500\"\n                        >\n                          {FONT_SIZES.map(size => (\n                            <option key={size.value} value={size.value}>\n                              {size.name}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700\">Message Bubble Shape</label>\n                        <select\n                          value={bubbleShape.value}\n                          onChange={(e) => setBubbleShape(BUBBLE_SHAPES.find(b => b.value === e.target.value) || BUBBLE_SHAPES[1])}\n                          className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 text-gray-900 focus:bg-white focus:border-blue-500 focus:ring-blue-500\"\n                        >\n                          {BUBBLE_SHAPES.map(shape => (\n                            <option key={shape.value} value={shape.value}>\n                              {shape.name}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Right Column - Enhanced Real-Time Preview */}\n              <div className=\"space-y-6\">\n                {/* Preview Header */}\n                <div className=\"bg-white rounded-lg shadow-sm p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h2 className=\"text-base font-medium text-gray-900\">Live Preview</h2>\n                    <div className=\"flex items-center space-x-2\">\n                      <button\n                        onClick={() => setIsPreviewOpen(!isPreviewOpen)}\n                        className=\"p-2 text-gray-400 hover:text-gray-600 transition-colors\"\n                      >\n                        {isPreviewOpen ? <Minimize2 className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </button>\n                      <select\n                        value={previewDevice}\n                        onChange={(e) => setPreviewDevice(e.target.value as 'desktop' | 'tablet' | 'mobile')}\n                        className=\"text-sm border border-gray-300 rounded-md px-2 py-1\"\n                      >\n                        <option value=\"desktop\">Desktop</option>\n                        <option value=\"tablet\">Tablet</option>\n                        <option value=\"mobile\">Mobile</option>\n                      </select>\n                    </div>\n                  </div>\n                  \n                  {isPreviewOpen && (\n                    <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\n                      {/* Device Frame */}\n                      <div className=\"bg-gray-100 p-2 flex justify-center\">\n                        <div \n                          className=\"bg-white shadow-lg rounded-lg overflow-hidden transition-all duration-300\"\n                          style={{\n                            width: getPreviewWidth(),\n                            height: getPreviewHeight()\n                          }}\n                        >\n                          {/* Chatbot Widget Preview */}\n                          <div className=\"relative h-full\">\n                            {/* Header */}\n                            <div className={`p-4 border-b flex items-center justify-between ${\n                              theme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'\n                            }`}>\n                              <div className=\"flex items-center space-x-3\">\n                                <div \n                                  className=\"w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 text-white text-sm font-bold overflow-hidden\"\n                                  style={{\n                                    background: `linear-gradient(135deg, ${gradient.from}, ${gradient.to})`\n                                  }}\n                                >\n                                  {avatar ? (\n                                    <img \n                                      src={URL.createObjectURL(avatar)} \n                                      alt=\"Avatar\" \n                                      className=\"w-full h-full object-cover rounded-full\" \n                                    />\n                                  ) : (\n                                    <span className=\"text-xs\">\n                                      {name.charAt(0).toUpperCase()}\n                                    </span>\n                                  )}\n                                </div>\n                                <div>\n                                  <div className={`font-medium ${\n                                    fontSize.value === 'sm' ? 'text-sm' :\n                                    fontSize.value === 'md' ? 'text-base' : 'text-lg'\n                                  } ${\n                                    theme === 'dark' ? 'text-white' : 'text-gray-900'\n                                  }`} style={{ fontFamily: selectedFont.name }}>\n                                    {name}\n                                  </div>\n                                  <div className={`text-xs ${\n                                    theme === 'dark' ? 'text-gray-300' : 'text-gray-600'\n                                  }`}>\n                                    {getOnlineStatusByLanguage()}\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Messages */}\n                            <div className={`flex-1 p-4 space-y-3 overflow-y-auto ${\n                              theme === 'dark' ? 'bg-gray-900' : 'bg-gray-50'\n                            }`}>\n                              {/* Welcome Message */}\n                              <div className=\"flex items-start space-x-2\">\n                                <div \n                                  className=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 text-white text-xs font-bold overflow-hidden\"\n                                  style={{\n                                    background: `linear-gradient(135deg, ${gradient.from}, ${gradient.to})`\n                                  }}\n                                >\n                                  {avatar ? (\n                                    <img \n                                      src={URL.createObjectURL(avatar)} \n                                      alt=\"Avatar\" \n                                      className=\"w-full h-full object-cover rounded-full\" \n                                    />\n                                  ) : (\n                                    <span className=\"text-xs\">\n                                      {name.charAt(0).toUpperCase()}\n                                    </span>\n                                  )}\n                                </div>\n                                <div \n                                  className={`max-w-xs p-3 ${bubbleShape.value} ${\n                                    theme === 'dark' ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n                                  } shadow-sm break-words`}\n                                  style={{\n                                    fontSize: fontSize.value === 'sm' ? '14px' : \n                                            fontSize.value === 'md' ? '16px' : '18px',\n                                    fontFamily: selectedFont.name\n                                  }}\n                                >\n                                  {welcomeMessage}\n                                </div>\n                              </div>\n\n                              {/* Typing Indicator */}\n                              <div className=\"flex items-start space-x-2\">\n                                <div \n                                  className=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 text-white text-xs font-bold overflow-hidden\"\n                                  style={{\n                                    background: `linear-gradient(135deg, ${gradient.from}, ${gradient.to})`\n                                  }}\n                                >\n                                  {avatar ? (\n                                    <img \n                                      src={URL.createObjectURL(avatar)} \n                                      alt=\"Avatar\" \n                                      className=\"w-full h-full object-cover rounded-full\" \n                                    />\n                                  ) : (\n                                    <span className=\"text-xs\">\n                                      {name.charAt(0).toUpperCase()}\n                                    </span>\n                                  )}\n                                </div>\n                                <div className={`p-3 ${bubbleShape.value} ${\n                                  theme === 'dark' ? 'bg-gray-700' : 'bg-white'\n                                } shadow-sm`}>\n                                  <div className=\"flex space-x-1\">\n                                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{animationDelay: '0.1s'}}></div>\n                                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Input Area */}\n                            <div className={`p-4 border-t flex-shrink-0 ${\n                              theme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'\n                            }`}>\n                              <div className=\"flex space-x-3\">\n                                <input\n                                  type=\"text\"\n                                  placeholder={getPlaceholderByLanguage()}\n                                  className={`flex-1 px-4 py-2 border rounded-lg min-w-0 ${\n                                    theme === 'dark' \n                                      ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' \n                                      : 'bg-gray-50 border-gray-300 text-gray-900 placeholder-gray-500'\n                                  } focus:outline-none focus:ring-2 focus:ring-opacity-50 transition-all`}\n                                  style={{\n                                    fontSize: fontSize.value === 'sm' ? '14px' : \n                                            fontSize.value === 'md' ? '16px' : '18px',\n                                    fontFamily: selectedFont.name,\n                                    focusRingColor: primaryColor\n                                  }}\n                                />\n                                <button\n                                  className=\"px-4 py-2 rounded-lg text-white transition-all hover:shadow-lg transform hover:scale-105 flex-shrink-0\"\n                                  style={{\n                                    background: `linear-gradient(135deg, ${gradient.from}, ${gradient.to})`,\n                                  }}\n                                >\n                                  <svg className=\"w-5 h-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7l5 5m0 0l-5 5m5-5H6\" />\n                                  </svg>\n                                </button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {/* Preview Controls */}\n                      <div className=\"p-4 border-t border-gray-200 bg-gray-50\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-gray-600\">✨ Live preview updates as you type</span>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                            <span className=\"text-green-600 font-medium\">Real-time</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {currentTab === 'integrations' && (\n            <div className=\"space-y-6\">\n              {/* Shopify One-Click Integration */}\n              <div className=\"bg-white rounded-lg shadow-sm p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-2xl\">🛍️</span>\n                    <div>\n                      <h3 className=\"text-lg font-medium text-gray-900\">Shopify Widget Integration</h3>\n                      <p className=\"text-sm text-gray-500\">\n                        Generate and install a customized chatbot widget directly in your Shopify theme\n                      </p>\n                    </div>\n                  </div>\n                  <button\n                    onClick={handleShopifyOneClickInstall}\n                    disabled={shopifyIntegration.isInstalling}\n                    className={`inline-flex items-center px-6 py-3 border border-transparent text-sm font-medium rounded-md ${\n                      shopifyIntegration.isConnected\n                        ? 'bg-green-600 text-white cursor-default'\n                        : shopifyIntegration.isInstalling\n                        ? 'bg-gray-400 text-white cursor-not-allowed'\n                        : 'bg-blue-600 text-white hover:bg-blue-700'\n                    } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500`}\n                  >\n                    {shopifyIntegration.isInstalling ? (\n                      <>\n                        <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                        </svg>\n                        Installing...\n                      </>\n                    ) : shopifyIntegration.isConnected ? (\n                      <>\n                        <svg className=\"w-5 h-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                        </svg>\n                        Connected\n                      </>\n                    ) : (\n                      <>\n                        <svg className=\"w-5 h-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n                        </svg>\n                        Install Widget\n                      </>\n                    )}\n                  </button>\n                </div>\n                \n                {shopifyIntegration.isConnected && (\n                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                    <div className=\"flex\">\n                      <div className=\"flex-shrink-0\">\n                        <svg className=\"h-5 w-5 text-green-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                          <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                        </svg>\n                      </div>\n                      <div className=\"ml-3\">\n                        <h3 className=\"text-sm font-medium text-green-800\">Successfully Connected!</h3>\n                        <div className=\"mt-2 text-sm text-green-700\">\n                          <p>Your chatbot widget has been installed and is now active on your Shopify store. Customers can start chatting immediately.</p>\n                        </div>\n                        <div className=\"mt-3\">\n                          <button\n                            onClick={() => setShopifyIntegration(prev => ({ ...prev, isConnected: false }))}\n                            className=\"text-sm text-green-800 hover:text-green-900 underline\"\n                          >\n                            Disconnect Widget\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Other Integrations */}\n              <IntegrationManager \n                chatbotId={chatbotId}\n                onIntegrationToggle={handleIntegrationComplete}\n              />\n            </div>\n          )}\n\n          {currentTab === 'test' && (\n            <ChatbotTester chatbotConfig={chatbotConfig} />\n          )}\n\n          {currentTab === 'docs' && (\n            <IntegrationDocs chatbotId={chatbotId} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatbotCustomization; \n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/chatbot/ChatbotEdit.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/chatbot/ChatbotList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/chatbot/ChatbotTester.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'runTests' and 'sendMessage'. Either include them or remove the dependency array.","line":173,"column":6,"nodeType":"ArrayExpression","endLine":173,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [hasAutoSentMessage, runTests, sendMessage]","fix":{"range":[5033,5053],"text":"[hasAutoSentMessage, runTests, sendMessage]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\n// Icons will be represented with emojis for better compatibility\n\ninterface ChatbotTesterProps {\n  chatbotConfig: {\n    id: string;\n    name: string;\n    primaryColor: string;\n    gradient: { from: string; to: string };\n    theme: 'light' | 'dark';\n    welcomeMessage: string;\n    language: string;\n    avatar?: string;\n    chatIcon?: string;\n    fontFamily: string;\n    fontSize: string;\n    bubbleShape: string;\n  };\n}\n\ninterface TestMessage {\n  id: string;\n  text: string;\n  sender: 'user' | 'bot';\n  timestamp: Date;\n}\n\nconst ChatbotTester: React.FC<ChatbotTesterProps> = ({ chatbotConfig }) => {\n  const [messages, setMessages] = useState<TestMessage[]>([\n    {\n      id: '1',\n      text: chatbotConfig.welcomeMessage,\n      sender: 'bot',\n      timestamp: new Date()\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [previewDevice, setPreviewDevice] = useState<'desktop' | 'tablet' | 'mobile'>('desktop');\n  const [hasAutoSentMessage, setHasAutoSentMessage] = useState(false);\n  const [testResults, setTestResults] = useState<{\n    responsiveness: boolean;\n    styling: boolean;\n    functionality: boolean;\n    integration: boolean;\n  }>({\n    responsiveness: false,\n    styling: false,\n    functionality: false,\n    integration: false\n  });\n\n  const sendMessage = async () => {\n    if (!inputMessage.trim()) return;\n\n    const userMessage: TestMessage = {\n      id: Date.now().toString(),\n      text: inputMessage,\n      sender: 'user',\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsTyping(true);\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botMessage: TestMessage = {\n        id: (Date.now() + 1).toString(),\n        text: `Thank you for your message: \"${inputMessage}\". This is a test of the ${chatbotConfig.name} chatbot.`,\n        sender: 'bot',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, botMessage]);\n      setIsTyping(false);\n    }, 1000 + Math.random() * 2000); // Random delay between 1-3 seconds\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  const runTests = async () => {\n    // Reset all tests\n    setTestResults({\n      responsiveness: false,\n      styling: false,\n      functionality: false,\n      integration: false\n    });\n\n    // Test responsiveness\n    const testResponsiveness = () => {\n      return new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n          const container = document.querySelector('.chatbot-test-container');\n          const isResponsive = container && container.getBoundingClientRect().width > 0;\n          setTestResults(prev => ({ ...prev, responsiveness: !!isResponsive }));\n          resolve(!!isResponsive);\n        }, 500);\n      });\n    };\n\n    // Test styling\n    const testStyling = () => {\n      return new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n          const header = document.querySelector('.chatbot-header');\n          const hasCorrectStyling = header && getComputedStyle(header).background.includes('gradient');\n          setTestResults(prev => ({ ...prev, styling: !!hasCorrectStyling }));\n          resolve(!!hasCorrectStyling);\n        }, 1000);\n      });\n    };\n\n    // Test functionality\n    const testFunctionality = () => {\n      return new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n          // Test if we can send a message\n          const testMessage = \"Test message\";\n          setInputMessage(testMessage);\n          setTimeout(() => {\n            sendMessage();\n            setTestResults(prev => ({ ...prev, functionality: true }));\n            resolve(true);\n          }, 100);\n        }, 1500);\n      });\n    };\n\n    // Test integration\n    const testIntegration = () => {\n      return new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n          // Simulate successful integration test\n          setTestResults(prev => ({ ...prev, integration: true }));\n          resolve(true);\n        }, 2000);\n      });\n    };\n\n    // Run tests sequentially\n    try {\n      await testResponsiveness();\n      await testStyling();\n      await testFunctionality();\n      await testIntegration();\n    } catch (error) {\n      console.error('Test execution failed:', error);\n    }\n  };\n\n  useEffect(() => {\n    // Auto-run tests after component mounts\n    setTimeout(runTests, 1000);\n\n    // Auto-send a test message when the component mounts\n    if (!hasAutoSentMessage) {\n      setTimeout(() => {\n        const testMessage = \"Hi there! I'm testing your chatbot.\";\n        setInputMessage(testMessage);\n        setTimeout(() => {\n          sendMessage();\n          setHasAutoSentMessage(true);\n        }, 1500); // Small delay to simulate natural user interaction\n      }, 2000); // Wait 2 seconds after component mounts\n    }\n  }, [hasAutoSentMessage]);\n\n  const getBubbleRadius = () => {\n    switch (chatbotConfig.bubbleShape) {\n      case 'rounded-full': return '20px';\n      case 'rounded-xl': return '12px';\n      case 'rounded-md': return '6px';\n      default: return '0px';\n    }\n  };\n\n  const getFontSize = () => {\n    switch (chatbotConfig.fontSize) {\n      case 'sm': return '14px';\n      case 'md': return '16px';\n      case 'lg': return '18px';\n      default: return '16px';\n    }\n  };\n\n  const getPreviewWidth = () => {\n    switch (previewDevice) {\n      case 'mobile': return 'w-[320px] max-w-[320px]';\n      case 'tablet': return 'w-[450px] max-w-[450px]';\n      default: return 'w-[600px] max-w-[600px]'; // Increased from 500px to match customization tab\n    }\n  };\n\n  const getPreviewHeight = () => {\n    switch (previewDevice) {\n      case 'mobile': return 'h-[420px]';\n      case 'tablet': return 'h-[480px]';\n      default: return 'h-[550px]'; // Increased to match customization tab\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Test Header */}\n      <div className=\"bg-white rounded-lg shadow-sm p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-medium text-gray-900\">Chatbot Testing</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Test your chatbot across different devices and verify functionality\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={() => setPreviewDevice('desktop')}\n                className={`px-3 py-1 text-xs rounded-md transition-all ${\n                  previewDevice === 'desktop'\n                    ? 'bg-blue-500 text-white shadow-sm'\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                }`}\n              >\n                💻 Desktop\n              </button>\n              <button\n                onClick={() => setPreviewDevice('tablet')}\n                className={`px-3 py-1 text-xs rounded-md transition-all ${\n                  previewDevice === 'tablet'\n                    ? 'bg-blue-500 text-white shadow-sm'\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                }`}\n              >\n                📱 Tablet\n              </button>\n              <button\n                onClick={() => setPreviewDevice('mobile')}\n                className={`px-3 py-1 text-xs rounded-md transition-all ${\n                  previewDevice === 'mobile'\n                    ? 'bg-blue-500 text-white shadow-sm'\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                }`}\n              >\n                📱 Mobile\n              </button>\n            </div>\n            <button\n              onClick={runTests}\n              className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n            >\n              🔄 Run Tests\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Chatbot Preview */}\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h4 className=\"text-base font-medium text-gray-900\">Live Preview - {previewDevice.charAt(0).toUpperCase() + previewDevice.slice(1)}</h4>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-green-600 font-medium text-xs\">Live Testing</span>\n            </div>\n          </div>\n          \n          <div className=\"bg-gradient-to-br from-gray-50 to-gray-100 rounded-lg p-6 flex items-center justify-center min-h-[500px] overflow-hidden\">\n            <div className={`${getPreviewWidth()} transition-all duration-300 mx-auto`}>\n              {/* Website mockup */}\n              <div className=\"bg-white rounded-lg shadow-sm border p-4 mb-4\">\n                <div className=\"flex items-center space-x-2 mb-3\">\n                  <div className=\"w-3 h-3 bg-red-400 rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-yellow-400 rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-green-400 rounded-full\"></div>\n                  <div className=\"flex-1 bg-gray-100 rounded-sm h-6 flex items-center px-3\">\n                    <span className=\"text-xs text-gray-500\">yourwebsite.com</span>\n                  </div>\n                </div>\n                <div \n                  className=\"bg-gray-50 rounded flex items-center justify-center text-gray-400 text-sm relative overflow-hidden\"\n                  style={{\n                    height: previewDevice === 'mobile' ? '200px' : previewDevice === 'tablet' ? '250px' : '300px'\n                  }}\n                >\n                  <div className=\"text-center\">\n                    <h3 className=\"font-semibold mb-2\">Test Environment</h3>\n                    <p className=\"text-xs\">Simulating {previewDevice} view</p>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Chatbot Widget */}\n              <div \n                className={`chatbot-test-container border rounded-lg overflow-hidden shadow-xl mx-auto flex flex-col ${getPreviewHeight()}`}\n                style={{ \n                  width: previewDevice === 'mobile' ? '300px' : previewDevice === 'tablet' ? '400px' : '500px', // Increased widths\n                  fontFamily: chatbotConfig.fontFamily,\n                  fontSize: getFontSize()\n                }}\n              >\n                {/* Header */}\n                <div \n                  className=\"chatbot-header p-4 flex items-center space-x-3 text-white flex-shrink-0\"\n                  style={{\n                    background: `linear-gradient(135deg, ${chatbotConfig.gradient.from}, ${chatbotConfig.gradient.to})`\n                  }}\n                >\n                  <div className=\"w-10 h-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm overflow-hidden flex-shrink-0\">\n                    {chatbotConfig.avatar ? (\n                      <img src={chatbotConfig.avatar} alt=\"Avatar\" className=\"w-full h-full object-cover rounded-full\" />\n                    ) : (\n                      <span className=\"text-white font-bold text-sm\">\n                        {chatbotConfig.name.charAt(0).toUpperCase()}\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"min-w-0 flex-1\">\n                    <div className={`font-semibold truncate ${\n                      chatbotConfig.fontSize === 'sm' ? 'text-sm' : \n                      chatbotConfig.fontSize === 'md' ? 'text-base' : 'text-lg'\n                    }`}>\n                      {chatbotConfig.name}\n                    </div>\n                    <div className=\"text-xs opacity-90 truncate\">🟢 Online · Test Mode</div>\n                  </div>\n                </div>\n\n                {/* Messages */}\n                <div className={`flex-1 p-4 overflow-y-auto ${\n                  chatbotConfig.theme === 'dark' ? 'bg-gray-900' : 'bg-gray-50'\n                }`}>\n                  <div className=\"space-y-3\">\n                    {messages.map((message) => (\n                      <div\n                        key={message.id}\n                        className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\n                      >\n                        {message.sender === 'bot' && (\n                          <div className=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 bg-gradient-to-r from-blue-500 to-purple-500 text-white text-xs font-bold overflow-hidden mr-2\">\n                            {chatbotConfig.avatar ? (\n                              <img \n                                src={chatbotConfig.avatar} \n                                alt=\"Avatar\" \n                                className=\"w-full h-full object-cover rounded-full\" \n                              />\n                            ) : (\n                              <span className=\"text-xs\">\n                                {chatbotConfig.name.charAt(0).toUpperCase()}\n                              </span>\n                            )}\n                          </div>\n                        )}\n                        <div\n                          className={`max-w-xs px-3 py-2 shadow-sm break-words ${\n                            message.sender === 'user'\n                              ? 'text-white'\n                              : chatbotConfig.theme === 'dark' \n                                ? 'bg-gray-700 text-white' \n                                : 'bg-white text-gray-900'\n                          }`}\n                          style={{\n                            borderRadius: getBubbleRadius(),\n                            background: message.sender === 'user' ? chatbotConfig.primaryColor : undefined\n                          }}\n                        >\n                          {message.text}\n                        </div>\n                      </div>\n                    ))}\n                    {isTyping && (\n                      <div className=\"flex justify-start\">\n                        <div className=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 bg-gradient-to-r from-blue-500 to-purple-500 text-white text-xs font-bold overflow-hidden mr-2\">\n                          {chatbotConfig.avatar ? (\n                            <img \n                              src={chatbotConfig.avatar} \n                              alt=\"Avatar\" \n                              className=\"w-full h-full object-cover rounded-full\" \n                            />\n                          ) : (\n                            <span className=\"text-xs\">\n                              {chatbotConfig.name.charAt(0).toUpperCase()}\n                            </span>\n                          )}\n                        </div>\n                        <div className={`px-3 py-2 shadow-sm ${\n                          chatbotConfig.theme === 'dark' ? 'bg-gray-700' : 'bg-white'\n                        }`} style={{ borderRadius: getBubbleRadius() }}>\n                          <div className=\"flex space-x-1\">\n                            <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                            <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                            <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Input */}\n                <div className={`p-4 border-t flex-shrink-0 ${\n                  chatbotConfig.theme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'\n                }`}>\n                  <div className=\"flex space-x-3\">\n                    <input\n                      type=\"text\"\n                      value={inputMessage}\n                      onChange={(e) => setInputMessage(e.target.value)}\n                      onKeyPress={handleKeyPress}\n                      placeholder=\"Type a message...\"\n                      className={`flex-1 px-4 py-2 border rounded-lg min-w-0 ${\n                        chatbotConfig.theme === 'dark' \n                          ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' \n                          : 'bg-gray-50 border-gray-300 text-gray-900 placeholder-gray-500'\n                      } focus:outline-none focus:ring-2 focus:ring-opacity-50 transition-all`}\n                      style={{\n                        fontSize: getFontSize(),\n                        focusRingColor: chatbotConfig.primaryColor\n                      }}\n                    />\n                    <button\n                      onClick={sendMessage}\n                      className=\"px-4 py-2 rounded-lg text-white transition-all hover:shadow-lg transform hover:scale-105 flex-shrink-0\"\n                      style={{\n                        background: `linear-gradient(135deg, ${chatbotConfig.gradient.from}, ${chatbotConfig.gradient.to})`\n                      }}\n                    >\n                      <svg className=\"w-5 h-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7l5 5m0 0l-5 5m5-5H6\" />\n                      </svg>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Test Results */}\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h4 className=\"text-base font-medium text-gray-900 mb-4\">Test Results</h4>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                  testResults.responsiveness ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-400'\n                }`}>\n                  {testResults.responsiveness ? '✓' : '○'}\n                </div>\n                <div>\n                  <div className=\"font-medium text-gray-900\">Responsiveness</div>\n                  <div className=\"text-sm text-gray-500\">Chatbot displays correctly</div>\n                </div>\n              </div>\n              <span className={`text-sm font-medium ${\n                testResults.responsiveness ? 'text-green-600' : 'text-gray-400'\n              }`}>\n                {testResults.responsiveness ? 'Passed' : 'Pending'}\n              </span>\n            </div>\n\n            <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                  testResults.styling ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-400'\n                }`}>\n                  {testResults.styling ? '✓' : '○'}\n                </div>\n                <div>\n                  <div className=\"font-medium text-gray-900\">Styling</div>\n                  <div className=\"text-sm text-gray-500\">Colors and design applied</div>\n                </div>\n              </div>\n              <span className={`text-sm font-medium ${\n                testResults.styling ? 'text-green-600' : 'text-gray-400'\n              }`}>\n                {testResults.styling ? 'Passed' : 'Pending'}\n              </span>\n            </div>\n\n            <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                  testResults.functionality ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-400'\n                }`}>\n                  {testResults.functionality ? '✓' : '○'}\n                </div>\n                <div>\n                  <div className=\"font-medium text-gray-900\">Functionality</div>\n                  <div className=\"text-sm text-gray-500\">Input and messaging works</div>\n                </div>\n              </div>\n              <span className={`text-sm font-medium ${\n                testResults.functionality ? 'text-green-600' : 'text-gray-400'\n              }`}>\n                {testResults.functionality ? 'Passed' : 'Pending'}\n              </span>\n            </div>\n\n            <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                  testResults.integration ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-400'\n                }`}>\n                  {testResults.integration ? '✓' : '○'}\n                </div>\n                <div>\n                  <div className=\"font-medium text-gray-900\">Integration</div>\n                  <div className=\"text-sm text-gray-500\">Ready for deployment</div>\n                </div>\n              </div>\n              <span className={`text-sm font-medium ${\n                testResults.integration ? 'text-green-600' : 'text-gray-400'\n              }`}>\n                {testResults.integration ? 'Passed' : 'Pending'}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n            <h5 className=\"font-medium text-blue-900 mb-2\">Testing Tips</h5>\n            <ul className=\"text-sm text-blue-800 space-y-1\">\n              <li>• Try sending different types of messages</li>\n              <li>• Test on different screen sizes</li>\n              <li>• Verify the chatbot responds correctly</li>\n              <li>• Check that styling matches your configuration</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatbotTester; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/chatbot/ChatbotWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/chatbot/EnhancedChatbotPreview.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'typingTimeout' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":51,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setTypingTimeout' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":51,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":41},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'messages.length'. Either include it or remove the dependency array.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [config.welcomeMessage, messages.length]","fix":{"range":[1824,1847],"text":"[config.welcomeMessage, messages.length]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { MessageSquare, X, Send, Minimize2, Maximize2, Settings, RefreshCw } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface Message {\n  id: string;\n  text: string;\n  isUser: boolean;\n  timestamp: Date;\n  isTyping?: boolean;\n}\n\ninterface ChatbotConfig {\n  id: string;\n  name: string;\n  primaryColor: string;\n  gradient: { from: string; to: string };\n  theme: 'light' | 'dark';\n  welcomeMessage: string;\n  language: string;\n  avatar?: string;\n  chatIcon?: string;\n  fontFamily: string;\n  fontSize: string;\n  bubbleShape: string;\n  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n  size?: 'small' | 'medium' | 'large';\n  showBranding?: boolean;\n  autoOpen?: boolean;\n  triggerDelay?: number;\n}\n\ninterface EnhancedChatbotPreviewProps {\n  config: ChatbotConfig;\n  isLivePreview?: boolean;\n  onConfigChange?: (config: Partial<ChatbotConfig>) => void;\n  className?: string;\n}\n\nconst EnhancedChatbotPreview: React.FC<EnhancedChatbotPreviewProps> = ({\n  config,\n  isLivePreview = true,\n  onConfigChange,\n  className = ''\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingTimeout, setTypingTimeout] = useState<NodeJS.Timeout | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Initialize with welcome message\n  useEffect(() => {\n    if (config.welcomeMessage && messages.length === 0) {\n      setMessages([{\n        id: 'welcome',\n        text: config.welcomeMessage,\n        isUser: false,\n        timestamp: new Date()\n      }]);\n    }\n  }, [config.welcomeMessage]);\n\n  // Auto-scroll to bottom\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Auto-open functionality\n  useEffect(() => {\n    if (config.autoOpen && config.triggerDelay) {\n      const timer = setTimeout(() => {\n        setIsOpen(true);\n      }, config.triggerDelay * 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [config.autoOpen, config.triggerDelay]);\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      text: inputMessage,\n      isUser: true,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n\n    // Simulate bot typing\n    setIsTyping(true);\n    const responses = [\n      \"Thank you for your message! I'm here to help you.\",\n      \"I understand your question. Let me provide you with the information you need.\",\n      \"That's a great question! Here's what I can tell you about that.\",\n      \"I'm processing your request. Give me just a moment to find the best answer.\",\n      \"Thanks for reaching out! I'm happy to assist you with that.\"\n    ];\n\n    const randomResponse = responses[Math.floor(Math.random() * responses.length)];\n\n    setTimeout(() => {\n      setIsTyping(false);\n      const botMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        text: randomResponse,\n        isUser: false,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, botMessage]);\n    }, 1000 + Math.random() * 2000);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const resetChat = () => {\n    setMessages([{\n      id: 'welcome',\n      text: config.welcomeMessage,\n      isUser: false,\n      timestamp: new Date()\n    }]);\n  };\n\n  const getFontSizeClass = () => {\n    switch (config.fontSize) {\n      case 'sm': return 'text-sm';\n      case 'lg': return 'text-lg';\n      default: return 'text-base';\n    }\n  };\n\n  const getBubbleShapeClass = () => {\n    switch (config.bubbleShape) {\n      case 'rounded-full': return 'rounded-full';\n      case 'rounded-xl': return 'rounded-xl';\n      case 'rounded-md': return 'rounded-md';\n      case 'rounded-none': return 'rounded-none';\n      default: return 'rounded-xl';\n    }\n  };\n\n  const getSizeClasses = () => {\n    switch (config.size) {\n      case 'small': return { window: 'w-80 h-96', button: 'w-12 h-12' };\n      case 'large': return { window: 'w-96 h-[32rem]', button: 'w-16 h-16' };\n      default: return { window: 'w-88 h-[28rem]', button: 'w-14 h-14' };\n    }\n  };\n\n  const getPositionClass = () => {\n    switch (config.position) {\n      case 'bottom-left': return 'bottom-4 left-4';\n      case 'top-right': return 'top-4 right-4';\n      case 'top-left': return 'top-4 left-4';\n      default: return 'bottom-4 right-4';\n    }\n  };\n\n  const sizeClasses = getSizeClasses();\n\n  return (\n    <div className={`relative ${className}`}>\n      {/* Preview Container */}\n      <div className=\"relative\">\n        {/* Desktop/Tablet Preview */}\n        <div className=\"hidden md:block\">\n          <div className=\"bg-gray-100 rounded-lg p-8 min-h-[500px] relative overflow-hidden\">\n            {/* Background Pattern */}\n            <div className=\"absolute inset-0 opacity-5\">\n              <div className=\"absolute inset-0\" style={{\n                backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.1'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")`,\n              }} />\n            </div>\n\n            {/* Preview Info */}\n            <div className=\"relative z-10 mb-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Live Preview</h3>\n                  <p className=\"text-sm text-gray-600\">\n                    This is exactly how your chatbot will appear on your website\n                  </p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <button\n                    onClick={resetChat}\n                    className=\"p-2 text-gray-500 hover:text-gray-700 hover:bg-white rounded-lg transition-colors\"\n                    title=\"Reset Chat\"\n                  >\n                    <RefreshCw className=\"w-4 h-4\" />\n                  </button>\n                  <div className=\"flex items-center space-x-1 text-xs text-gray-500\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n                    <span>Live Preview</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Website Mockup */}\n            <div className=\"relative bg-white rounded-lg shadow-lg overflow-hidden border border-gray-200\">\n              {/* Browser Bar */}\n              <div className=\"bg-gray-100 px-4 py-3 border-b border-gray-200\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex space-x-1\">\n                    <div className=\"w-3 h-3 bg-red-400 rounded-full\"></div>\n                    <div className=\"w-3 h-3 bg-yellow-400 rounded-full\"></div>\n                    <div className=\"w-3 h-3 bg-green-400 rounded-full\"></div>\n                  </div>\n                  <div className=\"flex-1 bg-white rounded-md px-3 py-1 text-xs text-gray-600\">\n                    https://yourwebsite.com\n                  </div>\n                </div>\n              </div>\n\n              {/* Website Content */}\n              <div className=\"p-8 h-96 bg-gradient-to-br from-blue-50 to-indigo-100 relative\">\n                <div className=\"text-center\">\n                  <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Your Website</h1>\n                  <p className=\"text-gray-600 mb-8\">Your chatbot will appear here for visitors to interact with.</p>\n                  <div className=\"space-y-2 text-left max-w-md mx-auto\">\n                    <div className=\"bg-white/50 h-4 rounded animate-pulse\"></div>\n                    <div className=\"bg-white/50 h-4 rounded animate-pulse w-3/4\"></div>\n                    <div className=\"bg-white/50 h-4 rounded animate-pulse w-1/2\"></div>\n                  </div>\n                </div>\n\n                {/* Chatbot Widget */}\n                <div className={`absolute ${getPositionClass()} z-50`}>\n                  <AnimatePresence>\n                    {isOpen && !isMinimized && (\n                      <motion.div\n                        initial={{ opacity: 0, scale: 0.8, y: 20 }}\n                        animate={{ opacity: 1, scale: 1, y: 0 }}\n                        exit={{ opacity: 0, scale: 0.8, y: 20 }}\n                        className={`${sizeClasses.window} bg-white rounded-lg shadow-xl border border-gray-200 overflow-hidden mb-4`}\n                        style={{ fontFamily: config.fontFamily }}\n                      >\n                        {/* Header */}\n                        <div \n                          className=\"px-4 py-3 text-white flex items-center justify-between\"\n                          style={{\n                            background: config.gradient \n                              ? `linear-gradient(135deg, ${config.gradient.from}, ${config.gradient.to})`\n                              : config.primaryColor\n                          }}\n                        >\n                          <div className=\"flex items-center space-x-3\">\n                            {config.avatar ? (\n                              <img\n                                src={config.avatar}\n                                alt={config.name}\n                                className=\"w-8 h-8 rounded-full border-2 border-white/20\"\n                              />\n                            ) : (\n                              <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n                                <MessageSquare className=\"w-4 h-4\" />\n                              </div>\n                            )}\n                            <div>\n                              <div className=\"font-semibold text-sm\">{config.name}</div>\n                              <div className=\"text-xs opacity-90\">Online</div>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <button\n                              onClick={() => setIsMinimized(true)}\n                              className=\"text-white/80 hover:text-white transition-colors\"\n                            >\n                              <Minimize2 className=\"w-4 h-4\" />\n                            </button>\n                            <button\n                              onClick={() => setIsOpen(false)}\n                              className=\"text-white/80 hover:text-white transition-colors\"\n                            >\n                              <X className=\"w-4 h-4\" />\n                            </button>\n                          </div>\n                        </div>\n\n                        {/* Messages */}\n                        <div className={`flex-1 overflow-y-auto p-4 space-y-3 ${getFontSizeClass()} bg-gray-50`} style={{ height: '280px' }}>\n                          {messages.map((message) => (\n                            <motion.div\n                              key={message.id}\n                              initial={{ opacity: 0, y: 10 }}\n                              animate={{ opacity: 1, y: 0 }}\n                              className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}\n                            >\n                              <div\n                                className={`max-w-xs px-3 py-2 ${getBubbleShapeClass()} ${getFontSizeClass()} ${\n                                  message.isUser\n                                    ? 'text-white ml-auto'\n                                    : 'bg-white text-gray-900 border border-gray-200'\n                                }`}\n                                style={{\n                                  backgroundColor: message.isUser \n                                    ? config.primaryColor \n                                    : undefined\n                                }}\n                              >\n                                {message.text}\n                              </div>\n                            </motion.div>\n                          ))}\n\n                          {isTyping && (\n                            <motion.div\n                              initial={{ opacity: 0, y: 10 }}\n                              animate={{ opacity: 1, y: 0 }}\n                              className=\"flex justify-start\"\n                            >\n                              <div className={`max-w-xs px-3 py-2 ${getBubbleShapeClass()} bg-white text-gray-900 border border-gray-200`}>\n                                <div className=\"flex space-x-1\">\n                                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                                </div>\n                              </div>\n                            </motion.div>\n                          )}\n                          <div ref={messagesEndRef} />\n                        </div>\n\n                        {/* Input */}\n                        <div className=\"p-4 border-t border-gray-200 bg-white\">\n                          <div className=\"flex space-x-2\">\n                            <input\n                              type=\"text\"\n                              value={inputMessage}\n                              onChange={(e) => setInputMessage(e.target.value)}\n                              onKeyPress={handleKeyPress}\n                              placeholder=\"Type a message...\"\n                              className={`flex-1 px-3 py-2 border border-gray-300 ${getBubbleShapeClass()} focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${getFontSizeClass()}`}\n                            />\n                            <button\n                              onClick={handleSendMessage}\n                              disabled={!inputMessage.trim()}\n                              className=\"px-4 py-2 text-white rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n                              style={{ backgroundColor: config.primaryColor }}\n                            >\n                              <Send className=\"w-4 h-4\" />\n                            </button>\n                          </div>\n                          {config.showBranding && (\n                            <div className=\"text-xs text-gray-500 text-center mt-2\">\n                              Powered by AI Orchestrator\n                            </div>\n                          )}\n                        </div>\n                      </motion.div>\n                    )}\n\n                    {isOpen && isMinimized && (\n                      <motion.div\n                        initial={{ opacity: 0, scale: 0.8 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        exit={{ opacity: 0, scale: 0.8 }}\n                        className=\"bg-white rounded-lg shadow-lg p-3 mb-4 border border-gray-200 cursor-pointer\"\n                        onClick={() => setIsMinimized(false)}\n                        style={{\n                          background: config.gradient \n                            ? `linear-gradient(135deg, ${config.gradient.from}, ${config.gradient.to})`\n                            : config.primaryColor\n                        }}\n                      >\n                        <div className=\"flex items-center space-x-2 text-white\">\n                          <MessageSquare className=\"w-5 h-5\" />\n                          <span className=\"text-sm font-medium\">{config.name}</span>\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setIsOpen(false);\n                            }}\n                            className=\"ml-auto text-white/80 hover:text-white\"\n                          >\n                            <X className=\"w-4 h-4\" />\n                          </button>\n                        </div>\n                      </motion.div>\n                    )}\n                  </AnimatePresence>\n\n                  {/* Chat Button */}\n                  <motion.button\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={() => setIsOpen(!isOpen)}\n                    className={`${sizeClasses.button} rounded-full shadow-lg flex items-center justify-center text-white transition-all duration-300`}\n                    style={{\n                      background: config.gradient \n                        ? `linear-gradient(135deg, ${config.gradient.from}, ${config.gradient.to})`\n                        : config.primaryColor\n                    }}\n                  >\n                    <AnimatePresence mode=\"wait\">\n                      {isOpen ? (\n                        <motion.div\n                          key=\"close\"\n                          initial={{ rotate: -90, opacity: 0 }}\n                          animate={{ rotate: 0, opacity: 1 }}\n                          exit={{ rotate: 90, opacity: 0 }}\n                          transition={{ duration: 0.2 }}\n                        >\n                          <X className=\"w-6 h-6\" />\n                        </motion.div>\n                      ) : (\n                        <motion.div\n                          key=\"open\"\n                          initial={{ rotate: 90, opacity: 0 }}\n                          animate={{ rotate: 0, opacity: 1 }}\n                          exit={{ rotate: -90, opacity: 0 }}\n                          transition={{ duration: 0.2 }}\n                        >\n                          {config.chatIcon ? (\n                            <img src={config.chatIcon} alt=\"Chat\" className=\"w-6 h-6 rounded-full\" />\n                          ) : (\n                            <MessageSquare className=\"w-6 h-6\" />\n                          )}\n                        </motion.div>\n                      )}\n                    </AnimatePresence>\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Preview */}\n        <div className=\"md:hidden\">\n          <div className=\"bg-gray-100 rounded-lg p-4\">\n            <div className=\"text-center mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Mobile Preview</h3>\n              <p className=\"text-sm text-gray-600\">Tap the button to test your chatbot</p>\n            </div>\n            \n            <div className=\"relative bg-gray-800 rounded-2xl p-2 mx-auto max-w-sm\">\n              <div className=\"bg-white rounded-xl h-96 p-4 relative overflow-hidden\">\n                {/* Mobile content simulation */}\n                <div className=\"text-center space-y-4\">\n                  <div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded animate-pulse w-3/4 mx-auto\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded animate-pulse w-1/2 mx-auto\"></div>\n                </div>\n\n                {/* Mobile Chatbot Widget */}\n                <div className=\"absolute bottom-4 right-4\">\n                  <button\n                    onClick={() => setIsOpen(!isOpen)}\n                    className=\"w-12 h-12 rounded-full shadow-lg flex items-center justify-center text-white\"\n                    style={{ backgroundColor: config.primaryColor }}\n                  >\n                    <MessageSquare className=\"w-5 h-5\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      {isLivePreview && (\n        <div className=\"mt-4 flex flex-wrap gap-2 justify-center\">\n          <button\n            onClick={() => setIsOpen(true)}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm\"\n          >\n            Open Chat\n          </button>\n          <button\n            onClick={resetChat}\n            className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors text-sm\"\n          >\n            Reset Chat\n          </button>\n          <button\n            onClick={() => onConfigChange?.({ autoOpen: !config.autoOpen })}\n            className={`px-4 py-2 rounded-lg transition-colors text-sm ${\n              config.autoOpen \n                ? 'bg-green-600 text-white hover:bg-green-700' \n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n            }`}\n          >\n            Auto-open: {config.autoOpen ? 'ON' : 'OFF'}\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EnhancedChatbotPreview;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/chatbot/IntegrationDocs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/chatbot/IntegrationManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showSetupModal' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":55,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowSetupModal' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":55,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":468,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":468,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17373,17376],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17373,17376],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { \n  CheckCircle, \n  Circle, \n  AlertCircle, \n  ExternalLink, \n  Copy, \n  RefreshCw,\n  Zap,\n  Shield,\n  Globe,\n  MessageSquare,\n  ShoppingBag,\n  Send,\n  Users,\n  Settings,\n  Eye,\n  Download,\n  Code\n} from 'lucide-react';\n\ninterface Integration {\n  id: string;\n  name: string;\n  description: string;\n  icon: React.ReactNode;\n  status: 'connected' | 'disconnected' | 'pending' | 'error';\n  isPopular?: boolean;\n  category: 'messaging' | 'ecommerce' | 'social' | 'website';\n  setupSteps: string[];\n  requirements: string[];\n  benefits: string[];\n  webhookUrl?: string;\n  apiKey?: string;\n  lastSync?: string;\n  messageCount?: number;\n  errorMessage?: string;\n}\n\ninterface IntegrationManagerProps {\n  chatbotId: string;\n  onIntegrationToggle?: (integrationId: string, enabled: boolean) => void;\n}\n\nconst IntegrationManager: React.FC<IntegrationManagerProps> = ({ \n  chatbotId, \n  onIntegrationToggle \n}) => {\n  const [integrations, setIntegrations] = useState<Integration[]>([]);\n  const [selectedIntegration, setSelectedIntegration] = useState<Integration | null>(null);\n  const [isConnecting, setIsConnecting] = useState<string | null>(null);\n  const [showSetupModal, setShowSetupModal] = useState(false);\n  const [activeTab, setActiveTab] = useState<'all' | 'connected' | 'available'>('all');\n  const [copied, setCopied] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Initialize integrations with comprehensive data\n    const defaultIntegrations: Integration[] = [\n      {\n        id: 'website',\n        name: 'Website Widget',\n        description: 'Embed the chatbot directly on your website with customizable appearance',\n        icon: <Globe className=\"w-6 h-6\" />,\n        status: 'connected',\n        isPopular: true,\n        category: 'website',\n        setupSteps: [\n          'Copy the provided JavaScript code',\n          'Paste it before the closing </body> tag on your website',\n          'Customize the widget appearance in the settings',\n          'Test the chatbot functionality'\n        ],\n        requirements: ['Website with HTML access', 'Basic technical knowledge'],\n        benefits: [\n          '24/7 customer support',\n          'Instant visitor engagement',\n          'Customizable design',\n          'Mobile responsive',\n          'Analytics tracking'\n        ],\n        webhookUrl: `https://api.yourdomain.com/webhook/chatbot/${chatbotId}`,\n        lastSync: '2 minutes ago',\n        messageCount: 1247\n      },\n      {\n        id: 'whatsapp',\n        name: 'WhatsApp Business',\n        description: 'Connect to WhatsApp Business API for direct customer messaging',\n        icon: <MessageSquare className=\"w-6 h-6\" />,\n        status: 'disconnected',\n        isPopular: true,\n        category: 'messaging',\n        setupSteps: [\n          'Verify your business with WhatsApp',\n          'Get WhatsApp Business API approval',\n          'Configure webhook URLs',\n          'Test message flows',\n          'Set up phone number verification'\n        ],\n        requirements: [\n          'WhatsApp Business Account',\n          'Verified business phone number',\n          'Meta Business Manager access',\n          'SSL certificate for webhooks'\n        ],\n        benefits: [\n          'Reach 2+ billion users',\n          'Rich media support',\n          'High engagement rates',\n          'International messaging',\n          'Business verification badge'\n        ]\n      },\n      {\n        id: 'messenger',\n        name: 'Facebook Messenger',\n        description: 'Integrate with Facebook Messenger for social media customer support',\n        icon: <Send className=\"w-6 h-6\" />,\n        status: 'disconnected',\n        category: 'messaging',\n        setupSteps: [\n          'Create Facebook App',\n          'Configure Messenger platform',\n          'Set up page access token',\n          'Configure webhook for your page',\n          'Submit for app review'\n        ],\n        requirements: [\n          'Facebook Business Page',\n          'Facebook Developer Account',\n          'Page Admin permissions',\n          'Valid SSL webhook endpoint'\n        ],\n        benefits: [\n          'Native Facebook integration',\n          'Rich interactive elements',\n          'Persistent menu options',\n          'Quick replies support',\n          'User profile access'\n        ]\n      },\n      {\n        id: 'instagram',\n        name: 'Instagram Direct Messages',\n        description: 'Connect to Instagram Business API for direct customer messaging and story interactions',\n        icon: <Users className=\"w-6 h-6\" />,\n        status: 'disconnected',\n        isPopular: true,\n        category: 'social',\n        setupSteps: [\n          'Create a Facebook Business Account',\n          'Convert to Instagram Business Profile',\n          'Connect Instagram to Facebook Page',\n          'Configure Instagram Basic Display API',\n          'Set up webhook endpoints for message handling',\n          'Submit for Instagram API review'\n        ],\n        requirements: [\n          'Instagram Business Account',\n          'Facebook Business Page',\n          'Meta Developer Account',\n          'Valid webhook endpoint with SSL'\n        ],\n        benefits: [\n          'Direct message automation',\n          'Story mentions notifications',\n          'Visual content engagement',\n          'Young audience reach',\n          'Social commerce integration'\n        ]\n      },\n      {\n        id: 'telegram',\n        name: 'Telegram Bot',\n        description: 'Create a Telegram bot for your community and customer support',\n        icon: <Zap className=\"w-6 h-6\" />,\n        status: 'disconnected',\n        category: 'messaging',\n        setupSteps: [\n          'Message @BotFather on Telegram',\n          'Create a new bot with /newbot command',\n          'Get your bot token',\n          'Configure webhook URL',\n          'Set bot commands and description'\n        ],\n        requirements: [\n          'Telegram account',\n          'Bot token from BotFather',\n          'Webhook endpoint'\n        ],\n        benefits: [\n          'Group and channel support',\n          'File sharing capabilities',\n          'Inline keyboards',\n          'Command-based interactions',\n          'Developer-friendly API'\n        ]\n      },\n    ];\n\n    setIntegrations(defaultIntegrations);\n  }, [chatbotId]);\n\n  const handleConnectIntegration = async (integration: Integration) => {\n    setIsConnecting(integration.id);\n    \n    try {\n      // Simulate proper API validation and connection process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Add validation logic for different integration types\n      let connectionSuccess = false;\n      let errorMessage = '';\n\n      switch (integration.id) {\n        case 'whatsapp':\n          // Simulate WhatsApp Business API validation\n          const hasValidPhoneNumber = Math.random() > 0.3; // 70% success rate\n          if (hasValidPhoneNumber) {\n            connectionSuccess = true;\n          } else {\n            errorMessage = 'WhatsApp Business verification failed. Please check your phone number and business verification status.';\n          }\n          break;\n        \n        case 'messenger':\n          // Simulate Facebook Messenger setup validation\n          const hasFacebookPage = Math.random() > 0.2; // 80% success rate\n          if (hasFacebookPage) {\n            connectionSuccess = true;\n          } else {\n            errorMessage = 'Facebook page connection failed. Please ensure your page has proper permissions and try again.';\n          }\n          break;\n        \n        case 'telegram':\n          // Simulate Telegram bot token validation\n          const hasValidBotToken = Math.random() > 0.1; // 90% success rate\n          if (hasValidBotToken) {\n            connectionSuccess = true;\n          } else {\n            errorMessage = 'Invalid Telegram bot token. Please check your token from @BotFather and try again.';\n          }\n          break;\n        \n        case 'instagram':\n          // Simulate Instagram Business API validation\n          const hasInstagramBusiness = Math.random() > 0.3; // 70% success rate\n          if (hasInstagramBusiness) {\n            connectionSuccess = true;\n          } else {\n            errorMessage = 'Instagram Business account verification failed. Please ensure your account is converted to a Business profile and try again.';\n          }\n          break;\n        \n        default:\n          // For other integrations, simulate a general connection process\n          connectionSuccess = Math.random() > 0.2; // 80% success rate\n          if (!connectionSuccess) {\n            errorMessage = 'Connection failed. Please check your configuration and try again.';\n          }\n      }\n\n      if (connectionSuccess) {\n        // Update integration status to connected\n        setIntegrations(prev => prev.map(int => \n          int.id === integration.id \n            ? { ...int, status: 'connected', lastSync: 'Just now', messageCount: 0, errorMessage: undefined }\n            : int\n        ));\n        \n        onIntegrationToggle?.(integration.id, true);\n        \n        // Show success notification\n        const successModal = document.createElement('div');\n        successModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50';\n        successModal.innerHTML = `\n          <div class=\"bg-white rounded-xl max-w-md w-full p-6\">\n            <div class=\"flex items-center space-x-3 mb-4\">\n              <div class=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                <svg class=\"w-6 h-6 text-green-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\n                </svg>\n              </div>\n              <div>\n                <h3 class=\"text-lg font-semibold text-gray-900\">Connection Successful!</h3>\n                <p class=\"text-gray-600\">${integration.name} has been connected successfully.</p>\n              </div>\n            </div>\n            <button onclick=\"this.closest('.fixed').remove()\" class=\"w-full px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 font-medium\">\n              Continue\n            </button>\n          </div>\n        `;\n        document.body.appendChild(successModal);\n        setTimeout(() => successModal.remove(), 3000);\n        \n      } else {\n        // Update integration status to error\n        setIntegrations(prev => prev.map(int => \n          int.id === integration.id \n            ? { ...int, status: 'error', errorMessage }\n            : int\n        ));\n      }\n      \n    } catch (error) {\n      // Handle unexpected errors\n      setIntegrations(prev => prev.map(int => \n        int.id === integration.id \n          ? { ...int, status: 'error', errorMessage: 'An unexpected error occurred. Please try again later.' }\n          : int\n      ));\n    } finally {\n      setIsConnecting(null);\n    }\n  };\n\n  const handleDisconnectIntegration = async (integration: Integration) => {\n    setIsConnecting(integration.id);\n    \n    try {\n      // Simulate API call to disconnect\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      setIntegrations(prev => prev.map(int => \n        int.id === integration.id \n          ? { ...int, status: 'disconnected', lastSync: undefined, messageCount: undefined, errorMessage: undefined }\n          : int\n      ));\n      \n      onIntegrationToggle?.(integration.id, false);\n      \n      // Show disconnect notification\n      const disconnectModal = document.createElement('div');\n      disconnectModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50';\n      disconnectModal.innerHTML = `\n        <div class=\"bg-white rounded-xl max-w-md w-full p-6\">\n          <div class=\"flex items-center space-x-3 mb-4\">\n            <div class=\"w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center\">\n              <svg class=\"w-6 h-6 text-yellow-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n              </svg>\n            </div>\n            <div>\n              <h3 class=\"text-lg font-semibold text-gray-900\">Integration Disconnected</h3>\n              <p class=\"text-gray-600\">${integration.name} has been disconnected successfully.</p>\n            </div>\n          </div>\n          <button onclick=\"this.closest('.fixed').remove()\" class=\"w-full px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 font-medium\">\n            Close\n          </button>\n        </div>\n      `;\n      document.body.appendChild(disconnectModal);\n      setTimeout(() => disconnectModal.remove(), 3000);\n      \n    } catch (error) {\n      console.error('Failed to disconnect integration:', error);\n      \n      // Show error notification\n      const errorModal = document.createElement('div');\n      errorModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50';\n      errorModal.innerHTML = `\n        <div class=\"bg-white rounded-xl max-w-md w-full p-6\">\n          <div class=\"flex items-center space-x-3 mb-4\">\n            <div class=\"w-12 h-12 bg-red-100 rounded-full flex items-center justify-center\">\n              <svg class=\"w-6 h-6 text-red-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            </div>\n            <div>\n              <h3 class=\"text-lg font-semibold text-gray-900\">Disconnection Failed</h3>\n              <p class=\"text-gray-600\">Failed to disconnect ${integration.name}. Please try again.</p>\n            </div>\n          </div>\n          <button onclick=\"this.closest('.fixed').remove()\" class=\"w-full px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 font-medium\">\n            Close\n          </button>\n        </div>\n      `;\n      document.body.appendChild(errorModal);\n      setTimeout(() => errorModal.remove(), 3000);\n    } finally {\n      setIsConnecting(null);\n    }\n  };\n\n  const copyToClipboard = async (text: string, type: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopied(type);\n      setTimeout(() => setCopied(null), 2000);\n    } catch (error) {\n      console.error('Failed to copy:', error);\n    }\n  };\n\n  const getStatusBadge = (status: Integration['status']) => {\n    switch (status) {\n      case 'connected':\n        return <Badge className=\"bg-green-100 text-green-800 border border-green-200\">Connected</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800 border border-yellow-200\">Pending</Badge>;\n      case 'error':\n        return <Badge className=\"bg-red-100 text-red-800 border border-red-200\">Error</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800 border border-gray-200\">Not Connected</Badge>;\n    }\n  };\n\n  const getStatusIcon = (status: Integration['status']) => {\n    switch (status) {\n      case 'connected':\n        return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\n      case 'pending':\n        return <RefreshCw className=\"w-5 h-5 text-yellow-500 animate-spin\" />;\n      case 'error':\n        return <AlertCircle className=\"w-5 h-5 text-red-500\" />;\n      default:\n        return <Circle className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  const filteredIntegrations = integrations.filter(integration => {\n    switch (activeTab) {\n      case 'connected':\n        return integration.status === 'connected';\n      case 'available':\n        return integration.status === 'disconnected';\n      default:\n        return true;\n    }\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-semibold text-gray-900\">Integrations</h2>\n          <p className=\"text-gray-600 mt-1\">\n            Connect your chatbot to multiple platforms and reach customers everywhere\n          </p>\n        </div>\n        <Button \n          onClick={() => window.location.reload()} \n          variant=\"outline\"\n          leftIcon={<RefreshCw className=\"w-4 h-4\" />}\n        >\n          Refresh Status\n        </Button>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b border-gray-200\">\n        <nav className=\"-mb-px flex space-x-8\">\n          {[\n            { id: 'all', label: 'All Integrations', count: integrations.length },\n            { id: 'connected', label: 'Connected', count: integrations.filter(i => i.status === 'connected').length },\n            { id: 'available', label: 'Available', count: integrations.filter(i => i.status === 'disconnected').length }\n          ].map(tab => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={`py-2 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${\n                activeTab === tab.id\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              {tab.label} ({tab.count})\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Integration Grid */}\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        {filteredIntegrations.map(integration => (\n          <Card key={integration.id} className=\"relative overflow-hidden hover:shadow-lg transition-all duration-200\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n                  <div className={`p-2 rounded-lg ${\n                    integration.status === 'connected' ? 'bg-green-100' : 'bg-gray-100'\n                  }`}>\n                    {integration.icon}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center space-x-2\">\n                      <CardTitle className=\"text-lg truncate text-gray-900\">{integration.name}</CardTitle>\n                      {integration.isPopular && (\n                        <Badge className=\"bg-purple-100 text-purple-700 text-xs whitespace-nowrap\">Popular</Badge>\n                      )}\n                    </div>\n                    <div className=\"mt-1\">{getStatusBadge(integration.status)}</div>\n                  </div>\n                </div>\n                <div className=\"flex-shrink-0 ml-2\">\n                  {getStatusIcon(integration.status)}\n                </div>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"space-y-4\">\n              <CardDescription className=\"text-sm leading-relaxed text-gray-700\">\n                {integration.description}\n              </CardDescription>\n\n              {integration.status === 'connected' && (\n                <div className=\"bg-green-50 rounded-lg p-3 space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-green-700\">Messages</span>\n                    <span className=\"font-medium text-green-900\">{integration.messageCount?.toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-green-700\">Last sync</span>\n                    <span className=\"font-medium text-green-900\">{integration.lastSync}</span>\n                  </div>\n                </div>\n              )}\n\n              {integration.status === 'error' && integration.errorMessage && (\n                <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n                  <p className=\"text-sm text-red-700\">{integration.errorMessage}</p>\n                </div>\n              )}\n\n              <div className=\"flex space-x-2\">\n                {integration.status === 'connected' ? (\n                  <>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setSelectedIntegration(integration)}\n                      leftIcon={<Settings className=\"w-4 h-4\" />}\n                      className=\"flex-1\"\n                    >\n                      Configure\n                    </Button>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => handleDisconnectIntegration(integration)}\n                      disabled={isConnecting === integration.id}\n                      className=\"flex-1\"\n                    >\n                      {isConnecting === integration.id ? 'Disconnecting...' : 'Disconnect'}\n                    </Button>\n                  </>\n                ) : (\n                  <>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setSelectedIntegration(integration)}\n                      leftIcon={<Eye className=\"w-4 h-4\" />}\n                      className=\"flex-1\"\n                    >\n                      Details\n                    </Button>\n                    <Button\n                      variant=\"primary\"\n                      size=\"sm\"\n                      onClick={() => handleConnectIntegration(integration)}\n                      disabled={isConnecting === integration.id}\n                      className=\"flex-1\"\n                    >\n                      {isConnecting === integration.id ? 'Connecting...' : 'Connect'}\n                    </Button>\n                  </>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Integration Details Modal */}\n      {selectedIntegration && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6 border-b border-gray-200\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"p-2 bg-blue-100 rounded-lg\">\n                    {selectedIntegration.icon}\n                  </div>\n                  <div>\n                    <h3 className=\"text-xl font-semibold\">{selectedIntegration.name}</h3>\n                    <p className=\"text-gray-600\">{selectedIntegration.description}</p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => setSelectedIntegration(null)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  ✕\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"p-6 grid gap-6 md:grid-cols-2\">\n              {/* Setup Steps */}\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-3\">Setup Steps</h4>\n                <ol className=\"space-y-2\">\n                  {selectedIntegration.setupSteps.map((step, index) => (\n                    <li key={index} className=\"flex items-start space-x-3\">\n                      <span className=\"flex-shrink-0 w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-medium\">\n                        {index + 1}\n                      </span>\n                      <span className=\"text-sm text-gray-700\">{step}</span>\n                    </li>\n                  ))}\n                </ol>\n              </div>\n\n              {/* Requirements */}\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-3\">Requirements</h4>\n                <ul className=\"space-y-2\">\n                  {selectedIntegration.requirements.map((req, index) => (\n                    <li key={index} className=\"flex items-start space-x-2\">\n                      <Shield className=\"w-4 h-4 text-gray-400 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-sm text-gray-700\">{req}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n\n              {/* Benefits */}\n              <div className=\"md:col-span-2\">\n                <h4 className=\"font-semibold text-gray-900 mb-3\">Benefits</h4>\n                <div className=\"grid gap-2 md:grid-cols-2\">\n                  {selectedIntegration.benefits.map((benefit, index) => (\n                    <div key={index} className=\"flex items-start space-x-2\">\n                      <CheckCircle className=\"w-4 h-4 text-green-500 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-sm text-gray-700\">{benefit}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Integration Details */}\n              {selectedIntegration.status === 'connected' && selectedIntegration.webhookUrl && (\n                <div className=\"md:col-span-2 bg-gray-50 rounded-lg p-4\">\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">Integration Details</h4>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">Webhook URL</label>\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"text\"\n                          value={selectedIntegration.webhookUrl}\n                          readOnly\n                          className=\"flex-1 px-3 py-2 bg-white border border-gray-300 rounded-lg text-sm\"\n                        />\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard(selectedIntegration.webhookUrl!, 'webhook')}\n                          leftIcon={<Copy className=\"w-4 h-4\" />}\n                        >\n                          {copied === 'webhook' ? 'Copied!' : 'Copy'}\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"p-6 border-t border-gray-200 flex justify-end space-x-3\">\n              <Button variant=\"outline\" onClick={() => setSelectedIntegration(null)}>\n                Close\n              </Button>\n              {selectedIntegration.status === 'disconnected' && (\n                <Button\n                  variant=\"primary\"\n                  onClick={() => {\n                    setSelectedIntegration(null);\n                    handleConnectIntegration(selectedIntegration);\n                  }}\n                  leftIcon={<Zap className=\"w-4 h-4\" />}\n                >\n                  Connect Now\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default IntegrationManager; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/common/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/Benefits/BenefitBullet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/Benefits/BenefitSection.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":30,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":30,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport Image from \"next/image\";\nimport clsx from \"clsx\";\nimport { motion, Variants } from \"framer-motion\";\nimport BenefitBullet from \"./BenefitBullet\";\nimport SectionTitle from \"../SectionTitle\";\nimport { IBenefit } from \"@/types\";\n\ninterface Props {\n  benefit: IBenefit;\n  imageAtRight?: boolean;\n}\n\nconst containerVariants: Variants = {\n  offscreen: { opacity: 0, y: 100 },\n  onscreen: {\n    opacity: 1,\n    y: 0,\n    transition: {\n      type: \"spring\",\n      bounce: 0.2,\n      duration: 0.9,\n      delayChildren: 0.2,\n      staggerChildren: 0.1,\n    },\n  },\n};\n\nexport const childVariants = {\n  offscreen: { opacity: 0, x: -50 },\n  onscreen: {\n    opacity: 1,\n    x: 0,\n    transition: { type: \"spring\", bounce: 0.2, duration: 1 },\n  },\n};\n\nconst BenefitSection: React.FC<Props> = ({ benefit, imageAtRight }) => {\n  const { title, description, imageSrc, bullets } = benefit;\n\n  return (\n    <motion.div\n      className=\"flex flex-col-reverse lg:flex-row items-center justify-between gap-10 py-10\"\n      variants={containerVariants}\n      initial=\"offscreen\"\n      whileInView=\"onscreen\"\n      viewport={{ once: true }}\n    >\n      {/* Text section */}\n      <div\n        className={clsx(\"w-full max-w-xl\", {\n          \"lg:order-1 text-left\": !imageAtRight,\n          \"lg:order-2 text-left lg:text-right\": imageAtRight,\n        })}\n      >\n        <motion.div variants={childVariants}>\n          <SectionTitle>\n            <h3 className=\"lg:max-w-2xl\">{title}</h3>\n          </SectionTitle>\n          <p className=\"mt-2 text-foreground-accent\">{description}</p>\n        </motion.div>\n\n        <div className=\"mt-6 space-y-6\">\n          {bullets.map((item, index) => (\n            <BenefitBullet key={index} {...item} />\n          ))}\n        </div>\n      </div>\n\n      {/* Image section */}\n      <motion.div\n        className={clsx(\"w-full max-w-lg\", {\n          \"lg:order-2\": !imageAtRight,\n          \"lg:order-1\": imageAtRight,\n        })}\n        variants={childVariants}\n      >\n        <Image\n          src={imageSrc}\n          alt={title}\n          width={512}\n          height={384}\n          className=\"mx-auto rounded-xl\"\n          priority\n          sizes=\"(max-width: 768px) 100vw, 512px\"\n        />\n      </motion.div>\n    </motion.div>\n  );\n};\n\nexport default BenefitSection;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/Benefits/Benefits.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/CTA.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ctaDetails' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ctaDetails } from \"@/data/cta\";\n\nconst CTA: React.FC = () => {\n  return (\n    <section id=\"cta\" className=\"mt-10 mb-5 lg:my-20\">\n      <div className=\"relative h-full w-full z-10 mx-auto py-12 sm:py-20\">\n        <div className=\"h-full w-full\">\n          <div className=\"rounded-3xl opacity-95 absolute inset-0 -z-10 h-full w-full bg-[#050a02] bg-[linear-gradient(to_right,#12170f_1px,transparent_1px),linear-gradient(to_bottom,#12170f_1px,transparent_1px)] bg-[size:6rem_4rem]\">\n            <div className=\"rounded-3xl absolute bottom-0 left-0 right-0 top-0 bg-[radial-gradient(circle_600px_at_50%_500px,#1C1C02,transparent)]\"></div>\n          </div>\n\n          <div className=\"h-full flex flex-col items-center justify-center text-white text-center px-5\">\n            <h2 className=\"text-3xl md:text-5xl font-semibold mb-4 max-w-2xl\">\n              Start your 3-day free trial now\n            </h2>\n            <p className=\"mx-auto max-w-xl\">\n              Includes setup · 10k messages · Full dashboard access\n            </p>\n            <a\n              href=\"/checkout.html\"\n              className=\"mt-6 inline-block px-6 py-3 text-sm font-semibold bg-white text-black rounded-full hover:bg-neutral-200\"\n            >\n              Launch My Chatbot →\n            </a>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default CTA;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/ChatDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/Container.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/FAQ.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/Hero.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/Logos.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/Pricing/Pricing.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":60,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":32}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport PricingColumn from \"./PricingColumn\";\nimport { tiers, trialConfig } from \"../../../data/pricing\";\n\nconst Pricing: React.FC = () => {\n  const [isYearly, setIsYearly] = useState(false);\n\n  return (\n    <div className=\"w-full max-w-7xl mx-auto px-4\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n          Choose Your AI Success Plan\n        </h2>\n        <p className=\"text-lg text-gray-600 mb-8\">\n          Flexible pricing that grows with your business\n        </p>\n        \n        {/* Trial Banner */}\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-8 max-w-2xl mx-auto\">\n          <div className=\"flex items-center justify-center gap-2 mb-2\">\n            <span className=\"inline-block w-2 h-2 bg-green-500 rounded-full animate-pulse\"></span>\n            <span className=\"font-semibold text-blue-600\">Free Trial Available</span>\n          </div>\n          <p className=\"text-sm text-gray-600\">\n            {trialConfig.duration} days of complete Pro access • No commitment • Cancel anytime\n          </p>\n        </div>\n        \n        {/* Billing Toggle */}\n        <div className=\"flex items-center justify-center gap-4 mb-8\">\n          <span className={`text-sm font-medium ${!isYearly ? 'text-blue-600' : 'text-gray-500'}`}>\n            Monthly\n          </span>\n          <button\n            onClick={() => setIsYearly(!isYearly)}\n            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n              isYearly ? 'bg-blue-600' : 'bg-gray-200'\n            }`}\n            aria-label=\"Toggle between monthly and yearly billing\"\n          >\n            <span\n              className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                isYearly ? 'translate-x-6' : 'translate-x-1'\n              }`}\n            />\n          </button>\n          <span className={`text-sm font-medium ${isYearly ? 'text-blue-600' : 'text-gray-500'}`}>\n            Yearly\n          </span>\n          {/* Savings badge */}\n          <span className=\"bg-green-100 text-green-800 text-xs font-medium px-2 py-1 rounded-full\">\n            Save 20%\n          </span>\n        </div>\n      </div>\n\n      {/* Pricing Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n        {tiers.map((tier, index) => (\n          <PricingColumn\n            key={tier.name}\n            tier={tier}\n            highlight={tier.popular}\n            isYearly={isYearly}\n          />\n        ))}\n      </div>\n      \n      {/* Bottom CTA */}\n      <div className=\"text-center mt-12 p-8 bg-gray-50 rounded-lg\">\n        <h3 className=\"text-xl font-semibold mb-2\">Need a custom solution?</h3>\n        <p className=\"text-gray-600 mb-4\">\n          Enterprise customers with 500k+ messages/month get custom pricing\n        </p>\n        <button \n          onClick={() => window.open('https://calendly.com/your-calendar', '_blank')}\n          className=\"bg-blue-600 text-white px-6 py-3 rounded-full font-semibold hover:bg-blue-700 transition-colors\"\n        >\n          Schedule a Call\n        </button>\n      </div>\n      \n      {/* Trust Signals */}\n      <div className=\"flex flex-wrap justify-center items-center gap-6 mt-12 text-sm text-gray-500\">\n        <div className=\"flex items-center gap-2\">\n          <span className=\"inline-block w-2 h-2 bg-green-500 rounded-full\"></span>\n          <span>99.9% Uptime</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span className=\"inline-block w-2 h-2 bg-green-500 rounded-full\"></span>\n          <span>GDPR Compliant</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span className=\"inline-block w-2 h-2 bg-green-500 rounded-full\"></span>\n          <span>24/7 Support</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span className=\"inline-block w-2 h-2 bg-green-500 rounded-full\"></span>\n          <span>Setup in 24 hours</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Pricing;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/Pricing/PricingColumn.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/Section.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/SectionTitle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/Stats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/components/Testimonials.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/dashboard/ActiveChatbots.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/dashboard/DashboardMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/dashboard/RecentEvents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/dashboard/StatCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/faq/FAQManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'editingId' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":28,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\n\ninterface FAQ {\n  id: string;\n  question: string;\n  answer: string;\n  category: string;\n}\n\nconst defaultFAQs: FAQ[] = [\n  {\n    id: '1',\n    question: 'What is a chatbot?',\n    answer: 'A chatbot is an AI-powered software that can simulate conversation with users.',\n    category: 'General',\n  },\n  {\n    id: '2',\n    question: 'How do I create a new chatbot?',\n    answer: 'You can create a new chatbot by clicking the \"Create Chatbot\" button in the chatbots section.',\n    category: 'Getting Started',\n  },\n];\n\nconst FAQManagement: React.FC = () => {\n  const [faqs, setFaqs] = useState<FAQ[]>(defaultFAQs);\n  const [editingId, setEditingId] = useState<string | null>(null);\n\n  const handleEdit = (id: string) => {\n    setEditingId(id);\n  };\n\n  const handleDelete = (id: string) => {\n    setFaqs(faqs.filter(faq => faq.id !== id));\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-2xl font-bold\">FAQ Management</h2>\n        <button className=\"px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors\">\n          Add New FAQ\n        </button>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {faqs.map((faq) => (\n          <motion.div\n            key={faq.id}\n            className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n          >\n            <div className=\"flex justify-between items-start mb-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold\">{faq.question}</h3>\n                <span className=\"text-sm text-gray-500\">{faq.category}</span>\n              </div>\n              <div className=\"space-x-2\">\n                <button\n                  onClick={() => handleEdit(faq.id)}\n                  className=\"text-blue-600 hover:text-blue-800\"\n                >\n                  Edit\n                </button>\n                <button\n                  onClick={() => handleDelete(faq.id)}\n                  className=\"text-red-600 hover:text-red-800\"\n                >\n                  Delete\n                </button>\n              </div>\n            </div>\n            <p className=\"text-gray-600\">{faq.answer}</p>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default FAQManagement; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/faq/FAQManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/feedback/UserFeedbackSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/help/TutorialSystem.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'defaultHelpTips'. Either include it or remove the dependency array.","line":140,"column":6,"nodeType":"ArrayExpression","endLine":140,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [defaultHelpTips]","fix":{"range":[4092,4094],"text":"[defaultHelpTips]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'type' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":143,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":143,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, Button, Text, List, ListItem, Badge, Select, SelectItem } from '@tremor/react';\nimport Joyride, { Step, CallBackProps, STATUS, ACTIONS } from 'react-joyride';\n\ninterface Tutorial {\n  id: string;\n  title: string;\n  description: string;\n  steps: Step[];\n  category: 'getting-started' | 'feature' | 'advanced';\n  duration: string;\n  prerequisites?: string[];\n  completionReward?: string;\n}\n\ninterface HelpTip {\n  id: string;\n  element: string;\n  title: string;\n  content: string;\n  category: string;\n}\n\ninterface TutorialProgress {\n  id: string;\n  completed: boolean;\n  lastStep: number;\n  completedAt?: Date;\n}\n\nconst TutorialSystem: React.FC = () => {\n  const [activeTutorial, setActiveTutorial] = useState<Tutorial | null>(null);\n  const [runTutorial, setRunTutorial] = useState(false);\n  const [helpTips, setHelpTips] = useState<HelpTip[]>([]);\n  const [showDocumentation, setShowDocumentation] = useState(false);\n  const [tutorialProgress, setTutorialProgress] = useState<TutorialProgress[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n\n  // Example tutorials\n  const tutorials: Tutorial[] = [\n    {\n      id: 'getting-started',\n      title: 'Getting Started',\n      description: 'Learn the basics of the platform',\n      category: 'getting-started',\n      duration: '5 minutes',\n      completionReward: '🏆 Platform Basics Badge',\n      steps: [\n        {\n          target: '.dashboard-overview',\n          content: 'Welcome to your dashboard! This is where you can monitor all your key metrics.',\n          disableBeacon: true,\n          placement: 'bottom',\n          styles: {\n            options: {\n              zIndex: 10000,\n            },\n          },\n        },\n        {\n          target: '.usage-metrics',\n          content: 'Track your resource usage and quotas here.',\n          disableBeacon: true,\n          placement: 'right',\n        },\n        {\n          target: '.settings-panel',\n          content: 'Configure your workspace settings and preferences.',\n          disableBeacon: true,\n          placement: 'left',\n        },\n      ],\n    },\n    {\n      id: 'feature-flags',\n      title: 'Feature Flags Management',\n      description: 'Learn how to use feature flags',\n      category: 'feature',\n      duration: '8 minutes',\n      prerequisites: ['getting-started'],\n      completionReward: '🚀 Feature Management Expert Badge',\n      steps: [\n        {\n          target: '.feature-flags-list',\n          content: 'View and manage all your feature flags here.',\n          disableBeacon: true,\n          placement: 'bottom',\n        },\n        {\n          target: '.create-flag-button',\n          content: 'Click here to create a new feature flag.',\n          disableBeacon: true,\n          placement: 'right',\n        },\n      ],\n    },\n    {\n      id: 'advanced-analytics',\n      title: 'Advanced Analytics',\n      description: 'Master the analytics dashboard',\n      category: 'advanced',\n      duration: '15 minutes',\n      prerequisites: ['getting-started', 'feature-flags'],\n      completionReward: '📊 Analytics Master Badge',\n      steps: [\n        {\n          target: '.analytics-dashboard',\n          content: 'Explore advanced analytics features.',\n          disableBeacon: true,\n        },\n      ],\n    },\n  ];\n\n  // Example help tips\n  const defaultHelpTips: HelpTip[] = [\n    {\n      id: 'dashboard-help',\n      element: '.dashboard-overview',\n      title: 'Dashboard Overview',\n      content: 'Get a quick overview of your system status and key metrics.',\n      category: 'general',\n    },\n    {\n      id: 'usage-help',\n      element: '.usage-metrics',\n      title: 'Usage Metrics',\n      content: 'Monitor your resource consumption and usage trends.',\n      category: 'metrics',\n    },\n  ];\n\n  useEffect(() => {\n    setHelpTips(defaultHelpTips);\n    // Load tutorial progress from localStorage\n    const savedProgress = localStorage.getItem('tutorialProgress');\n    if (savedProgress) {\n      setTutorialProgress(JSON.parse(savedProgress));\n    }\n  }, []);\n\n  const handleTutorialCallback = (data: CallBackProps) => {\n    const { action, index, status, type } = data;\n\n    if (status === STATUS.FINISHED || status === STATUS.SKIPPED) {\n      if (status === STATUS.FINISHED) {\n        // Update tutorial progress\n        const progress: TutorialProgress = {\n          id: activeTutorial?.id || '',\n          completed: true,\n          lastStep: index + 1,\n          completedAt: new Date(),\n        };\n        const newProgress = [...tutorialProgress.filter(p => p.id !== progress.id), progress];\n        setTutorialProgress(newProgress);\n        localStorage.setItem('tutorialProgress', JSON.stringify(newProgress));\n\n        // Show completion message\n        if (activeTutorial?.completionReward) {\n          alert(`Congratulations! You've earned: ${activeTutorial.completionReward}`);\n        }\n      }\n      setRunTutorial(false);\n      setActiveTutorial(null);\n    } else if (action === ACTIONS.CLOSE) {\n      // Save progress\n      const progress: TutorialProgress = {\n        id: activeTutorial?.id || '',\n        completed: false,\n        lastStep: index,\n      };\n      const newProgress = [...tutorialProgress.filter(p => p.id !== progress.id), progress];\n      setTutorialProgress(newProgress);\n      localStorage.setItem('tutorialProgress', JSON.stringify(newProgress));\n    }\n  };\n\n  const startTutorial = (tutorial: Tutorial) => {\n    // Check prerequisites\n    const prerequisites = tutorial.prerequisites || [];\n    if (prerequisites.length > 0) {\n      const incompletePrerequistes = prerequisites.filter(\n        prereq => !tutorialProgress.find(p => p.id === prereq && p.completed)\n      );\n      if (incompletePrerequistes.length) {\n        const missingTutorials = incompletePrerequistes\n          .map(id => tutorials.find(t => t.id === id)?.title)\n          .join(', ');\n        alert(`Please complete these tutorials first: ${missingTutorials}`);\n        return;\n      }\n    }\n\n    setActiveTutorial(tutorial);\n    setRunTutorial(true);\n  };\n\n  const getTutorialStatus = (tutorial: Tutorial) => {\n    const progress = tutorialProgress.find(p => p.id === tutorial.id);\n    if (!progress) return 'Not Started';\n    if (progress.completed) return 'Completed';\n    return `In Progress (${progress.lastStep} / ${tutorial.steps.length} steps)`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Completed':\n        return 'green';\n      case 'Not Started':\n        return 'gray';\n      default:\n        return 'yellow';\n    }\n  };\n\n  const filteredTutorials = tutorials.filter(\n    tutorial => selectedCategory === 'all' || tutorial.category === selectedCategory\n  );\n\n  return (\n    <div className=\"space-y-6 p-4\">\n      {/* Tutorial Selection */}\n      <Card>\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-2xl font-bold\">Tutorials & Help</h2>\n          <Select\n            value={selectedCategory}\n            onValueChange={(value) => setSelectedCategory(value)}\n            className=\"w-48\"\n          >\n            <SelectItem value=\"all\">All Categories</SelectItem>\n            <SelectItem value=\"getting-started\">Getting Started</SelectItem>\n            <SelectItem value=\"feature\">Features</SelectItem>\n            <SelectItem value=\"advanced\">Advanced</SelectItem>\n          </Select>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-4\">\n          {filteredTutorials.map((tutorial) => (\n            <Card key={tutorial.id} decoration=\"left\" decorationColor={\n              getTutorialStatus(tutorial) === 'Completed' ? 'green' :\n              getTutorialStatus(tutorial).includes('In Progress') ? 'yellow' : 'gray'\n            }>\n              <div className=\"flex justify-between items-start\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Text className=\"font-semibold\">{tutorial.title}</Text>\n                    <Badge color={getStatusColor(getTutorialStatus(tutorial))}>\n                      {getTutorialStatus(tutorial)}\n                    </Badge>\n                  </div>\n                  <Text className=\"text-gray-600\">{tutorial.description}</Text>\n                  <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                    <span>⏱️ {tutorial.duration}</span>\n                    {tutorial.completionReward && (\n                      <span>🏆 Reward: {tutorial.completionReward}</span>\n                    )}\n                  </div>\n                  {tutorial.prerequisites && tutorial.prerequisites.length > 0 && (\n                    <Text className=\"text-sm text-gray-500\">\n                      Prerequisites: {tutorial.prerequisites.map(id => \n                        tutorials.find(t => t.id === id)?.title\n                      ).join(', ')}\n                    </Text>\n                  )}\n                </div>\n                <Button\n                  size=\"sm\"\n                  variant=\"secondary\"\n                  onClick={() => startTutorial(tutorial)}\n                  disabled={\n                    tutorial.prerequisites?.some(\n                      prereq => !tutorialProgress.find(p => p.id === prereq && p.completed)\n                    ) || false\n                  }\n                  className=\"hover:bg-blue-50\"\n                >\n                  {getTutorialStatus(tutorial) === 'Completed' ? 'Replay' : 'Start'}\n                </Button>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </Card>\n\n      {/* Documentation Section */}\n      <Card>\n        <div className=\"flex justify-between items-center mb-4\">\n          <Text className=\"font-semibold\">Documentation</Text>\n          <Button\n            variant=\"secondary\"\n            onClick={() => setShowDocumentation(!showDocumentation)}\n            className=\"hover:bg-blue-50\"\n          >\n            {showDocumentation ? 'Hide' : 'Show'} Documentation\n          </Button>\n        </div>\n        {showDocumentation && (\n          <div className=\"prose max-w-none space-y-4\">\n            <div>\n              <h3>Platform Documentation</h3>\n              <p>\n                Welcome to our comprehensive documentation. Here you'll find detailed guides,\n                tutorials, and reference materials to help you make the most of our platform.\n              </p>\n            </div>\n            <div>\n              <h4>Quick Links</h4>\n              <ul>\n                <li>Getting Started Guide</li>\n                <li>API Reference</li>\n                <li>Best Practices</li>\n                <li>Troubleshooting</li>\n              </ul>\n            </div>\n            <div>\n              <h4>Video Tutorials</h4>\n              <p>\n                Check out our video tutorials for step-by-step guidance on using platform features.\n              </p>\n            </div>\n          </div>\n        )}\n      </Card>\n\n      {/* Active Tutorial */}\n      {activeTutorial && (\n        <Joyride\n          steps={activeTutorial.steps}\n          run={runTutorial}\n          continuous\n          showProgress\n          showSkipButton\n          callback={handleTutorialCallback}\n          styles={{\n            options: {\n              primaryColor: '#3b82f6',\n              zIndex: 10000,\n            },\n            tooltip: {\n              padding: '20px',\n            },\n            buttonNext: {\n              backgroundColor: '#3b82f6',\n            },\n            buttonBack: {\n              color: '#3b82f6',\n            },\n          }}\n          locale={{\n            last: 'Complete',\n            skip: 'Exit Tutorial',\n          }}\n        />\n      )}\n\n      {/* Contextual Help Tooltips */}\n      {helpTips.map((tip) => (\n        <div\n          key={tip.id}\n          className=\"help-tooltip\"\n          data-tip={tip.content}\n          data-for={tip.id}\n        >\n          {/* Help icon or indicator */}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TutorialSystem; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/layout/AppShell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/layout/DashboardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/layout/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/layout/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/layout/MobileMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/layout/Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/multichannel/AdvancedChannelManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[589,592],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[589,592],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showIntegrationCode' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":174,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":174,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowIntegrationCode' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":174,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":174,"endColumn":53},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'initializeChannels'. Either include it or remove the dependency array.","line":180,"column":6,"nodeType":"ArrayExpression","endLine":180,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [chatbotId, initializeChannels]","fix":{"range":[5690,5701],"text":"[chatbotId, initializeChannels]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleChannelDisconnect' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":226,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":226,"endColumn":32}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface Channel {\n  id: string;\n  name: string;\n  type: 'website' | 'whatsapp' | 'messenger' | 'telegram' | 'instagram' | 'shopify' | 'email' | 'sms';\n  status: 'connected' | 'disconnected' | 'error' | 'pending';\n  isEnabled: boolean;\n  config: ChannelConfig;\n  metrics: ChannelMetrics;\n  lastSync?: Date;\n  errorMessage?: string;\n}\n\ninterface ChannelConfig {\n  apiKey?: string;\n  accessToken?: string;\n  phoneNumber?: string;\n  webhookUrl?: string;\n  settings: Record<string, any>;\n}\n\ninterface ChannelMetrics {\n  totalMessages: number;\n  responseRate: number;\n  averageResponseTime: number;\n  activeUsers: number;\n  conversionRate: number;\n  lastMessage?: Date;\n}\n\ninterface AdvancedChannelManagerProps {\n  chatbotId: string;\n  onChannelUpdate?: (channel: Channel) => void;\n  onChannelTest?: (channelId: string) => Promise<boolean>;\n}\n\nconst CHANNEL_TEMPLATES = {\n  website: {\n    name: 'Website Widget',\n    description: 'Embed chatbot directly on your website',\n    icon: '🌐',\n    color: 'blue',\n    setupSteps: [\n      'Copy the integration code',\n      'Paste it before closing </body> tag',\n      'Customize appearance in settings',\n      'Test the widget functionality'\n    ],\n    features: ['Custom styling', 'Mobile responsive', 'Real-time messaging', 'Analytics tracking'],\n    integrationCode: `\n<!-- AI Orchestrator Chatbot Widget -->\n<script>\n  window.aiOrchestratorConfig = {\n    chatbotId: '{{CHATBOT_ID}}',\n    primaryColor: '{{PRIMARY_COLOR}}',\n    position: 'bottom-right',\n    autoOpen: false,\n    showBranding: true\n  };\n</script>\n<script src=\"https://cdn.aiorchestrator.com/widget.js\" async></script>\n<!-- End AI Orchestrator Widget -->`\n  },\n  whatsapp: {\n    name: 'WhatsApp Business',\n    description: 'Connect with customers via WhatsApp Business API',\n    icon: '💬',\n    color: 'green',\n    setupSteps: [\n      'Verify your WhatsApp Business account',\n      'Generate API credentials',\n      'Configure webhook endpoints',\n      'Test message delivery'\n    ],\n    features: ['Rich media support', 'Template messages', 'Group messaging', 'Status tracking'],\n    requirements: ['WhatsApp Business Account', 'Verified phone number', 'Facebook Business Manager']\n  },\n  messenger: {\n    name: 'Facebook Messenger',\n    description: 'Integrate with Facebook Messenger platform',\n    icon: '📱',\n    color: 'blue',\n    setupSteps: [\n      'Create Facebook App',\n      'Set up Messenger webhook',\n      'Generate page access token',\n      'Configure app permissions'\n    ],\n    features: ['Rich cards', 'Quick replies', 'Persistent menu', 'User profiles'],\n    requirements: ['Facebook Page', 'Facebook Developer Account', 'SSL Certificate']\n  },\n  telegram: {\n    name: 'Telegram Bot',\n    description: 'Deploy bot on Telegram messaging platform',\n    icon: '📬',\n    color: 'cyan',\n    setupSteps: [\n      'Create bot with @BotFather',\n      'Get bot token',\n      'Set webhook URL',\n      'Configure bot commands'\n    ],\n    features: ['Inline keyboards', 'File sharing', 'Group chats', 'Custom commands'],\n    requirements: ['Telegram account', 'Bot token from @BotFather']\n  },\n  instagram: {\n    name: 'Instagram Direct',\n    description: 'Respond to Instagram direct messages',\n    icon: '📸',\n    color: 'pink',\n    setupSteps: [\n      'Connect Instagram Business account',\n      'Enable messaging access',\n      'Configure auto-responses',\n      'Set up story mentions'\n    ],\n    features: ['Story replies', 'Image recognition', 'Auto-responses', 'User insights'],\n    requirements: ['Instagram Business Account', 'Facebook Page connection']\n  },\n  shopify: {\n    name: 'Shopify Store',\n    description: 'Integrate with your Shopify e-commerce store',\n    icon: '🛍️',\n    color: 'green',\n    setupSteps: [\n      'Install Shopify app',\n      'Authorize store access',\n      'Configure product catalog',\n      'Set up order tracking'\n    ],\n    features: ['Product recommendations', 'Order tracking', 'Inventory queries', 'Cart recovery'],\n    requirements: ['Active Shopify store', 'Admin permissions']\n  },\n  email: {\n    name: 'Email Support',\n    description: 'Handle customer support via email',\n    icon: '📧',\n    color: 'yellow',\n    setupSteps: [\n      'Configure SMTP settings',\n      'Set up email templates',\n      'Configure auto-responders',\n      'Test email delivery'\n    ],\n    features: ['Auto-responses', 'Email templates', 'Ticket creation', 'Follow-up sequences'],\n    requirements: ['Email server access', 'SMTP credentials']\n  },\n  sms: {\n    name: 'SMS Messaging',\n    description: 'Send and receive SMS messages',\n    icon: '📱',\n    color: 'purple',\n    setupSteps: [\n      'Choose SMS provider',\n      'Configure phone numbers',\n      'Set up message routing',\n      'Test SMS delivery'\n    ],\n    features: ['Two-way messaging', 'Bulk messaging', 'Delivery reports', 'Short codes'],\n    requirements: ['SMS provider account', 'Phone number verification']\n  }\n};\n\nconst AdvancedChannelManager: React.FC<AdvancedChannelManagerProps> = ({\n  chatbotId,\n  onChannelUpdate,\n  onChannelTest\n}) => {\n  const [channels, setChannels] = useState<Channel[]>([]);\n  const [selectedChannel, setSelectedChannel] = useState<Channel | null>(null);\n  const [isTestingChannel, setIsTestingChannel] = useState<string | null>(null);\n  const [showIntegrationCode, setShowIntegrationCode] = useState(false);\n  const [testResults, setTestResults] = useState<Record<string, boolean>>({});\n  const [activeTab, setActiveTab] = useState<'overview' | 'setup' | 'test' | 'analytics'>('overview');\n\n  useEffect(() => {\n    initializeChannels();\n  }, [chatbotId]);\n\n  const initializeChannels = () => {\n    const initialChannels: Channel[] = Object.entries(CHANNEL_TEMPLATES).map(([type, template]) => ({\n      id: `${type}_${chatbotId}`,\n      name: template.name,\n      type: type as Channel['type'],\n      status: type === 'website' ? 'connected' : 'disconnected',\n      isEnabled: type === 'website',\n      config: {\n        settings: {}\n      },\n      metrics: {\n        totalMessages: Math.floor(Math.random() * 1000),\n        responseRate: 85 + Math.random() * 15,\n        averageResponseTime: 1 + Math.random() * 3,\n        activeUsers: Math.floor(Math.random() * 500),\n        conversionRate: 5 + Math.random() * 20,\n        lastMessage: new Date(Date.now() - Math.random() * 86400000)\n      }\n    }));\n\n    setChannels(initialChannels);\n  };\n\n  const handleChannelConnect = async (channelId: string) => {\n    const channel = channels.find(c => c.id === channelId);\n    if (!channel) return;\n\n    setChannels(prev => prev.map(c => \n      c.id === channelId \n        ? { ...c, status: 'pending' }\n        : c\n    ));\n\n    // Simulate connection process\n    setTimeout(() => {\n      setChannels(prev => prev.map(c => \n        c.id === channelId \n          ? { ...c, status: 'connected', isEnabled: true, lastSync: new Date() }\n          : c\n      ));\n      onChannelUpdate?.(channel);\n    }, 2000);\n  };\n\n  const handleChannelDisconnect = (channelId: string) => {\n    setChannels(prev => prev.map(c => \n      c.id === channelId \n        ? { ...c, status: 'disconnected', isEnabled: false }\n        : c\n    ));\n  };\n\n  const handleChannelTest = async (channelId: string) => {\n    setIsTestingChannel(channelId);\n    \n    try {\n      const success = await onChannelTest?.(channelId) ?? Math.random() > 0.2;\n      setTestResults(prev => ({ ...prev, [channelId]: success }));\n      \n      if (!success) {\n        setChannels(prev => prev.map(c => \n          c.id === channelId \n            ? { ...c, status: 'error', errorMessage: 'Connection test failed' }\n            : c\n        ));\n      }\n    } catch (error) {\n      setTestResults(prev => ({ ...prev, [channelId]: false }));\n    } finally {\n      setIsTestingChannel(null);\n    }\n  };\n\n  const getChannelTemplate = (type: string) => {\n    return CHANNEL_TEMPLATES[type as keyof typeof CHANNEL_TEMPLATES];\n  };\n\n  const getStatusColor = (status: Channel['status']) => {\n    switch (status) {\n      case 'connected': return 'text-green-600 bg-green-100';\n      case 'pending': return 'text-yellow-600 bg-yellow-100';\n      case 'error': return 'text-red-600 bg-red-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const generateIntegrationCode = (channel: Channel) => {\n    const template = getChannelTemplate(channel.type);\n    if (!template?.integrationCode) return '';\n\n    return template.integrationCode\n      .replace('{{CHATBOT_ID}}', chatbotId)\n      .replace('{{PRIMARY_COLOR}}', '#3B82F6');\n  };\n\n  const connectedChannels = channels.filter(c => c.status === 'connected');\n  const totalMessages = connectedChannels.reduce((sum, c) => sum + c.metrics.totalMessages, 0);\n  const avgResponseRate = connectedChannels.length > 0 \n    ? connectedChannels.reduce((sum, c) => sum + c.metrics.responseRate, 0) / connectedChannels.length \n    : 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <div className=\"text-sm font-medium text-gray-500\">Connected Channels</div>\n          <div className=\"text-2xl font-bold text-gray-900\">{connectedChannels.length}</div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <div className=\"text-sm font-medium text-gray-500\">Total Messages</div>\n          <div className=\"text-2xl font-bold text-gray-900\">{totalMessages.toLocaleString()}</div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <div className=\"text-sm font-medium text-gray-500\">Avg Response Rate</div>\n          <div className=\"text-2xl font-bold text-gray-900\">{avgResponseRate.toFixed(1)}%</div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <div className=\"text-sm font-medium text-gray-500\">Active Users</div>\n          <div className=\"text-2xl font-bold text-gray-900\">\n            {connectedChannels.reduce((sum, c) => sum + c.metrics.activeUsers, 0).toLocaleString()}\n          </div>\n        </div>\n      </div>\n\n      {/* Channel Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {channels.map((channel) => {\n          const template = getChannelTemplate(channel.type);\n          const isConnected = channel.status === 'connected';\n          const isPending = channel.status === 'pending';\n          const hasError = channel.status === 'error';\n          const testResult = testResults[channel.id];\n\n          return (\n            <motion.div\n              key={channel.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"bg-white rounded-lg border border-gray-200 overflow-hidden hover:shadow-lg transition-shadow\"\n            >\n              {/* Card Header */}\n              <div className=\"p-6 border-b border-gray-200\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"text-2xl\">{template?.icon}</div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">{channel.name}</h3>\n                      <p className=\"text-sm text-gray-500\">{template?.description}</p>\n                    </div>\n                  </div>\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(channel.status)}`}>\n                    {channel.status.charAt(0).toUpperCase() + channel.status.slice(1)}\n                  </span>\n                </div>\n              </div>\n\n              {/* Card Body */}\n              <div className=\"p-6\">\n                {isConnected && (\n                  <div className=\"space-y-3 mb-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-500\">Messages</span>\n                      <span className=\"text-sm font-medium\">{channel.metrics.totalMessages.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-500\">Response Rate</span>\n                      <span className=\"text-sm font-medium\">{channel.metrics.responseRate.toFixed(1)}%</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-500\">Active Users</span>\n                      <span className=\"text-sm font-medium\">{channel.metrics.activeUsers.toLocaleString()}</span>\n                    </div>\n                  </div>\n                )}\n\n                {hasError && (\n                  <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n                    <p className=\"text-sm text-red-600\">{channel.errorMessage}</p>\n                  </div>\n                )}\n\n                {/* Action Buttons */}\n                <div className=\"space-y-2\">\n                  {!isConnected && !isPending && (\n                    <button\n                      onClick={() => handleChannelConnect(channel.id)}\n                      className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                    >\n                      Connect Channel\n                    </button>\n                  )}\n\n                  {isPending && (\n                    <div className=\"w-full px-4 py-2 bg-yellow-100 text-yellow-800 rounded-lg text-center\">\n                      <div className=\"flex items-center justify-center space-x-2\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-yellow-600 border-t-transparent\"></div>\n                        <span>Connecting...</span>\n                      </div>\n                    </div>\n                  )}\n\n                  {isConnected && (\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <button\n                        onClick={() => handleChannelTest(channel.id)}\n                        disabled={isTestingChannel === channel.id}\n                        className=\"px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50\"\n                      >\n                        {isTestingChannel === channel.id ? (\n                          <div className=\"flex items-center justify-center space-x-1\">\n                            <div className=\"animate-spin rounded-full h-3 w-3 border-2 border-gray-600 border-t-transparent\"></div>\n                            <span className=\"text-xs\">Testing</span>\n                          </div>\n                        ) : (\n                          <span className=\"text-xs\">Test</span>\n                        )}\n                      </button>\n                      <button\n                        onClick={() => setSelectedChannel(channel)}\n                        className=\"px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\"\n                      >\n                        <span className=\"text-xs\">Configure</span>\n                      </button>\n                    </div>\n                  )}\n\n                  {testResult !== undefined && (\n                    <div className={`w-full px-3 py-2 rounded-lg text-center text-xs ${\n                      testResult ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                    }`}>\n                      Test {testResult ? 'Passed' : 'Failed'}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Features */}\n              <div className=\"px-6 pb-6\">\n                <div className=\"text-xs font-medium text-gray-500 mb-2\">Features</div>\n                <div className=\"flex flex-wrap gap-1\">\n                  {template?.features?.slice(0, 3).map((feature, index) => (\n                    <span key={index} className=\"px-2 py-1 bg-gray-100 text-gray-600 rounded text-xs\">\n                      {feature}\n                    </span>\n                  ))}\n                  {(template?.features?.length || 0) > 3 && (\n                    <span className=\"px-2 py-1 bg-gray-100 text-gray-600 rounded text-xs\">\n                      +{(template.features.length - 3)} more\n                    </span>\n                  )}\n                </div>\n              </div>\n            </motion.div>\n          );\n        })}\n      </div>\n\n      {/* Integration Modal */}\n      <AnimatePresence>\n        {selectedChannel && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\"\n            onClick={() => setSelectedChannel(null)}\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.9, opacity: 0 }}\n              className=\"bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-auto\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <div className=\"p-6 border-b border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"text-2xl\">{getChannelTemplate(selectedChannel.type)?.icon}</div>\n                    <div>\n                      <h2 className=\"text-xl font-semibold text-gray-900\">{selectedChannel.name}</h2>\n                      <p className=\"text-gray-500\">{getChannelTemplate(selectedChannel.type)?.description}</p>\n                    </div>\n                  </div>\n                  <button\n                    onClick={() => setSelectedChannel(null)}\n                    className=\"text-gray-400 hover:text-gray-600\"\n                  >\n                    <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n\n              {/* Tab Navigation */}\n              <div className=\"flex border-b border-gray-200\">\n                {['overview', 'setup', 'test', 'analytics'].map((tab) => (\n                  <button\n                    key={tab}\n                    onClick={() => setActiveTab(tab as typeof activeTab)}\n                    className={`px-6 py-3 text-sm font-medium border-b-2 transition-colors ${\n                      activeTab === tab\n                        ? 'border-blue-500 text-blue-600'\n                        : 'border-transparent text-gray-500 hover:text-gray-700'\n                    }`}\n                  >\n                    {tab.charAt(0).toUpperCase() + tab.slice(1)}\n                  </button>\n                ))}\n              </div>\n\n              {/* Tab Content */}\n              <div className=\"p-6\">\n                {activeTab === 'overview' && (\n                  <div className=\"space-y-6\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-3\">Features</h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                        {getChannelTemplate(selectedChannel.type)?.features?.map((feature, index) => (\n                          <div key={index} className=\"flex items-center space-x-2\">\n                            <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                            <span className=\"text-sm text-gray-700\">{feature}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {getChannelTemplate(selectedChannel.type)?.requirements && (\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-3\">Requirements</h3>\n                        <div className=\"space-y-2\">\n                          {getChannelTemplate(selectedChannel.type).requirements.map((req, index) => (\n                            <div key={index} className=\"flex items-center space-x-2\">\n                              <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                              <span className=\"text-sm text-gray-700\">{req}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {activeTab === 'setup' && (\n                  <div className=\"space-y-6\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-3\">Setup Steps</h3>\n                      <div className=\"space-y-3\">\n                        {getChannelTemplate(selectedChannel.type)?.setupSteps?.map((step, index) => (\n                          <div key={index} className=\"flex items-start space-x-3\">\n                            <div className=\"flex-shrink-0 w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-medium\">\n                              {index + 1}\n                            </div>\n                            <span className=\"text-sm text-gray-700 mt-0.5\">{step}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {selectedChannel.type === 'website' && (\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-3\">Integration Code</h3>\n                        <div className=\"bg-gray-900 text-gray-100 p-4 rounded-lg overflow-auto\">\n                          <pre className=\"text-sm\">\n                            <code>{generateIntegrationCode(selectedChannel)}</code>\n                          </pre>\n                        </div>\n                        <button\n                          onClick={() => {\n                            navigator.clipboard.writeText(generateIntegrationCode(selectedChannel));\n                          }}\n                          className=\"mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                        >\n                          Copy Code\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {activeTab === 'test' && (\n                  <div className=\"space-y-6\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-3\">Channel Testing</h3>\n                      <p className=\"text-gray-600 mb-4\">\n                        Test your channel integration to ensure everything is working correctly.\n                      </p>\n                      \n                      <button\n                        onClick={() => handleChannelTest(selectedChannel.id)}\n                        disabled={isTestingChannel === selectedChannel.id}\n                        className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50\"\n                      >\n                        {isTestingChannel === selectedChannel.id ? 'Testing...' : 'Run Test'}\n                      </button>\n\n                      {testResults[selectedChannel.id] !== undefined && (\n                        <div className={`mt-4 p-4 rounded-lg ${\n                          testResults[selectedChannel.id] ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                        }`}>\n                          {testResults[selectedChannel.id] \n                            ? '✓ Test passed! Your channel is working correctly.'\n                            : '✗ Test failed. Please check your configuration and try again.'\n                          }\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {activeTab === 'analytics' && selectedChannel.status === 'connected' && (\n                  <div className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <div className=\"text-sm font-medium text-gray-500\">Total Messages</div>\n                        <div className=\"text-2xl font-bold text-gray-900\">\n                          {selectedChannel.metrics.totalMessages.toLocaleString()}\n                        </div>\n                      </div>\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <div className=\"text-sm font-medium text-gray-500\">Response Rate</div>\n                        <div className=\"text-2xl font-bold text-gray-900\">\n                          {selectedChannel.metrics.responseRate.toFixed(1)}%\n                        </div>\n                      </div>\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <div className=\"text-sm font-medium text-gray-500\">Conversion Rate</div>\n                        <div className=\"text-2xl font-bold text-gray-900\">\n                          {selectedChannel.metrics.conversionRate.toFixed(1)}%\n                        </div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-3\">Recent Activity</h3>\n                      <p className=\"text-gray-600\">\n                        Last message: {selectedChannel.metrics.lastMessage?.toLocaleString() || 'No recent activity'}\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default AdvancedChannelManager;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/multichannel/ChannelIntegration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/notifications/NotificationCenter.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'addNotification' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":123,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  Card,\n  Text,\n  Badge,\n  List,\n  ListItem,\n  Button,\n  Select,\n  SelectItem,\n  Title,\n  Tab,\n  TabGroup,\n  TabList,\n  TabPanel,\n  TabPanels,\n} from '@tremor/react';\nimport { format } from 'date-fns';\n\ninterface Notification {\n  id: string;\n  type: 'system' | 'user' | 'integration';\n  title: string;\n  message: string;\n  timestamp: Date;\n  read: boolean;\n  priority: 'low' | 'medium' | 'high';\n  group?: string;\n  actions?: {\n    label: string;\n    onClick: () => void;\n  }[];\n}\n\ninterface NotificationGroup {\n  name: string;\n  notifications: Notification[];\n  unreadCount: number;\n}\n\nconst NotificationCenter: React.FC = () => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [filter, setFilter] = useState('all');\n  const [showUnreadOnly, setShowUnreadOnly] = useState(false);\n  const [notificationSound] = useState(new Audio('/notification.mp3'));\n  const [groupedView, setGroupedView] = useState(false);\n  const [isLive, setIsLive] = useState(true);\n\n  // Mock notifications - replace with real API calls\n  const fetchNotifications = useCallback(async () => {\n    const mockNotifications: Notification[] = [\n      {\n        id: '1',\n        type: 'system',\n        title: 'System Update',\n        message: 'A new system update is available. Please restart your application.',\n        timestamp: new Date(),\n        read: false,\n        priority: 'high',\n        group: 'Updates',\n        actions: [\n          {\n            label: 'Update Now',\n            onClick: () => console.log('Update initiated'),\n          },\n          {\n            label: 'Remind Later',\n            onClick: () => console.log('Reminder set'),\n          },\n        ],\n      },\n      {\n        id: '2',\n        type: 'user',\n        title: 'New Message',\n        message: 'You have received a new message from Jane Smith.',\n        timestamp: new Date(Date.now() - 3600000),\n        read: true,\n        priority: 'medium',\n        group: 'Messages',\n        actions: [\n          {\n            label: 'View Message',\n            onClick: () => console.log('Opening message'),\n          },\n        ],\n      },\n      {\n        id: '3',\n        type: 'integration',\n        title: 'Integration Alert',\n        message: 'GitHub integration requires reauthorization.',\n        timestamp: new Date(Date.now() - 7200000),\n        read: false,\n        priority: 'high',\n        group: 'Integrations',\n        actions: [\n          {\n            label: 'Reauthorize',\n            onClick: () => console.log('Reauthorizing'),\n          },\n        ],\n      },\n    ];\n    setNotifications(prev => [...mockNotifications, ...prev].slice(0, 50)); // Keep last 50 notifications\n  }, []);\n\n  useEffect(() => {\n    fetchNotifications();\n  }, [fetchNotifications]);\n\n  useEffect(() => {\n    if (isLive) {\n      const interval = setInterval(fetchNotifications, 30000); // Poll every 30 seconds\n      return () => clearInterval(interval);\n    }\n  }, [isLive, fetchNotifications]);\n\n  const playNotificationSound = useCallback(() => {\n    notificationSound.play().catch(error => console.log('Error playing sound:', error));\n  }, [notificationSound]);\n\n  const addNotification = useCallback((notification: Notification) => {\n    setNotifications(prev => [notification, ...prev]);\n    playNotificationSound();\n  }, [playNotificationSound]);\n\n  const markAsRead = (id: string) => {\n    setNotifications(notifications.map(notif =>\n      notif.id === id ? { ...notif, read: true } : notif\n    ));\n  };\n\n  const markAllAsRead = () => {\n    setNotifications(notifications.map(notif => ({ ...notif, read: true })));\n  };\n\n  const deleteNotification = (id: string) => {\n    setNotifications(notifications.filter(notif => notif.id !== id));\n  };\n\n  const filteredNotifications = notifications.filter(notif => {\n    if (showUnreadOnly && notif.read) return false;\n    if (filter === 'all') return true;\n    return notif.type === filter;\n  });\n\n  const getGroupedNotifications = (): NotificationGroup[] => {\n    const groups: { [key: string]: NotificationGroup } = {};\n    \n    filteredNotifications.forEach(notification => {\n      const groupName = notification.group || 'Other';\n      if (!groups[groupName]) {\n        groups[groupName] = {\n          name: groupName,\n          notifications: [],\n          unreadCount: 0\n        };\n      }\n      groups[groupName].notifications.push(notification);\n      if (!notification.read) {\n        groups[groupName].unreadCount++;\n      }\n    });\n\n    return Object.values(groups).sort((a, b) => b.unreadCount - a.unreadCount);\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'red';\n      case 'medium':\n        return 'yellow';\n      case 'low':\n        return 'green';\n      default:\n        return 'gray';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'system':\n        return '🔧';\n      case 'user':\n        return '👤';\n      case 'integration':\n        return '🔌';\n      default:\n        return '📢';\n    }\n  };\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <Title>Notifications</Title>\n          <Text>Stay updated with system alerts and messages</Text>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Badge color={unreadCount > 0 ? \"red\" : \"gray\"} size=\"lg\">\n            {unreadCount} unread\n          </Badge>\n          <Button\n            size=\"sm\"\n            variant=\"secondary\"\n            onClick={() => setIsLive(!isLive)}\n            color={isLive ? \"red\" : \"blue\"}\n          >\n            {isLive ? 'Pause Updates' : 'Resume Updates'}\n          </Button>\n        </div>\n      </div>\n\n      <Card>\n        <TabGroup>\n          <TabList>\n            <Tab>View Options</Tab>\n            <Tab>Settings</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <div className=\"p-4 space-y-4\">\n                <div>\n                  <Text>Filter by Type</Text>\n                  <div className=\"flex space-x-2 mt-2\">\n                    <Button\n                      size=\"xs\"\n                      variant={filter === 'all' ? 'primary' : 'secondary'}\n                      onClick={() => setFilter('all')}\n                    >\n                      All\n                    </Button>\n                    <Button\n                      size=\"xs\"\n                      variant={filter === 'system' ? 'primary' : 'secondary'}\n                      onClick={() => setFilter('system')}\n                    >\n                      System\n                    </Button>\n                    <Button\n                      size=\"xs\"\n                      variant={filter === 'user' ? 'primary' : 'secondary'}\n                      onClick={() => setFilter('user')}\n                    >\n                      User\n                    </Button>\n                    <Button\n                      size=\"xs\"\n                      variant={filter === 'integration' ? 'primary' : 'secondary'}\n                      onClick={() => setFilter('integration')}\n                    >\n                      Integration\n                    </Button>\n                  </div>\n                </div>\n\n                <div>\n                  <Text>View Type</Text>\n                  <div className=\"flex space-x-2 mt-2\">\n                    <Button\n                      size=\"xs\"\n                      variant={!groupedView ? 'primary' : 'secondary'}\n                      onClick={() => setGroupedView(false)}\n                    >\n                      List View\n                    </Button>\n                    <Button\n                      size=\"xs\"\n                      variant={groupedView ? 'primary' : 'secondary'}\n                      onClick={() => setGroupedView(true)}\n                    >\n                      Grouped View\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    size=\"xs\"\n                    variant=\"secondary\"\n                    onClick={() => setShowUnreadOnly(!showUnreadOnly)}\n                  >\n                    {showUnreadOnly ? 'Show All' : 'Show Unread Only'}\n                  </Button>\n                  <Button\n                    size=\"xs\"\n                    variant=\"secondary\"\n                    onClick={markAllAsRead}\n                    disabled={unreadCount === 0}\n                  >\n                    Mark All as Read\n                  </Button>\n                </div>\n              </div>\n            </TabPanel>\n            <TabPanel>\n              <div className=\"p-4 space-y-4\">\n                <div>\n                  <Text>Notification Sound</Text>\n                  <Button\n                    size=\"xs\"\n                    variant=\"secondary\"\n                    onClick={() => notificationSound.play()}\n                    className=\"mt-2\"\n                  >\n                    Test Sound\n                  </Button>\n                </div>\n              </div>\n            </TabPanel>\n          </TabPanels>\n        </TabGroup>\n      </Card>\n\n      {groupedView ? (\n        <div className=\"space-y-6\">\n          {getGroupedNotifications().map((group) => (\n            <Card key={group.name}>\n              <div className=\"flex justify-between items-center mb-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Text className=\"font-medium\">{group.name}</Text>\n                  {group.unreadCount > 0 && (\n                    <Badge color=\"red\">{group.unreadCount} new</Badge>\n                  )}\n                </div>\n              </div>\n              <List>\n                {group.notifications.map((notification) => (\n                  <ListItem\n                    key={notification.id}\n                    className={`py-4 ${notification.read ? 'opacity-75' : ''}`}\n                  >\n                    <div className=\"flex items-start space-x-4\">\n                      <div className=\"flex-shrink-0 text-2xl\">\n                        {getTypeIcon(notification.type)}\n                      </div>\n                      <div className=\"flex-grow min-w-0\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Text className=\"font-medium\">{notification.title}</Text>\n                          {!notification.read && <Badge color=\"blue\">New</Badge>}\n                          <Badge color={getPriorityColor(notification.priority)}>\n                            {notification.priority}\n                          </Badge>\n                        </div>\n                        <Text className=\"text-gray-500 mt-1\">{notification.message}</Text>\n                        {notification.actions && (\n                          <div className=\"mt-2 space-x-2\">\n                            {notification.actions.map((action, index) => (\n                              <Button\n                                key={index}\n                                size=\"xs\"\n                                variant=\"secondary\"\n                                onClick={action.onClick}\n                              >\n                                {action.label}\n                              </Button>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex-shrink-0 space-y-2\">\n                        <Text className=\"text-sm text-gray-500\">\n                          {format(notification.timestamp, 'MMM d, HH:mm')}\n                        </Text>\n                        <Button\n                          size=\"xs\"\n                          variant=\"light\"\n                          onClick={() => deleteNotification(notification.id)}\n                        >\n                          Delete\n                        </Button>\n                      </div>\n                    </div>\n                  </ListItem>\n                ))}\n              </List>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card>\n          <List>\n            {filteredNotifications.map((notification) => (\n              <ListItem\n                key={notification.id}\n                className={`py-4 ${notification.read ? 'opacity-75' : ''}`}\n              >\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"flex-shrink-0 text-2xl\">\n                    {getTypeIcon(notification.type)}\n                  </div>\n                  <div className=\"flex-grow min-w-0\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Text className=\"font-medium\">{notification.title}</Text>\n                      {!notification.read && <Badge color=\"blue\">New</Badge>}\n                      <Badge color={getPriorityColor(notification.priority)}>\n                        {notification.priority}\n                      </Badge>\n                      {notification.group && (\n                        <Badge color=\"gray\">{notification.group}</Badge>\n                      )}\n                    </div>\n                    <Text className=\"text-gray-500 mt-1\">{notification.message}</Text>\n                    {notification.actions && (\n                      <div className=\"mt-2 space-x-2\">\n                        {notification.actions.map((action, index) => (\n                          <Button\n                            key={index}\n                            size=\"xs\"\n                            variant=\"secondary\"\n                            onClick={action.onClick}\n                          >\n                            {action.label}\n                          </Button>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"flex-shrink-0 space-y-2 text-right\">\n                    <Text className=\"text-sm text-gray-500\">\n                      {format(notification.timestamp, 'MMM d, HH:mm')}\n                    </Text>\n                    <div className=\"space-x-2\">\n                      {!notification.read && (\n                        <Button\n                          size=\"xs\"\n                          variant=\"light\"\n                          onClick={() => markAsRead(notification.id)}\n                        >\n                          Mark as Read\n                        </Button>\n                      )}\n                      <Button\n                        size=\"xs\"\n                        variant=\"light\"\n                        onClick={() => deleteNotification(notification.id)}\n                      >\n                        Delete\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </ListItem>\n            ))}\n          </List>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default NotificationCenter; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/onboarding/OnboardingFlow.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":10,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":10,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2490,2493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2490,2493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":223,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7071,7074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7071,7074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7619,7622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7619,7622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'watch' is defined but never used.","line":239,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":239,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":261,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8531,8534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8531,8534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'watch' is defined but never used.","line":261,"column":61,"nodeType":null,"messageId":"unusedVar","endLine":261,"endColumn":66},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":282,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":282,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9321,9324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9321,9324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useNavigate } from 'react-router-dom';\nimport { useMutation } from '@tanstack/react-query';\nimport { completeOnboarding } from '../../services/onboarding';\n\nexport const onboardingSteps = [\n  {\n    title: 'Welcome',\n    description: \"Let's get you set up in just a few quick steps.\",\n  },\n  {\n    title: 'Basic Information',\n    description: \"We'll use this information to personalize your experience.\",\n  },\n  {\n    title: 'Connect Platform',\n    description: \"Let's connect your e-commerce platform.\",\n  },\n  {\n    title: 'Customize your AI',\n    description: \"Configure your AI assistant's personality and knowledge.\",\n  }\n];\n\nconst companySchema = z.object({\n  companyName: z.string().min(2, 'Company name is required'),\n  industry: z.string().min(2, 'Industry is required'),\n  size: z.enum(['1-10', '11-50', '51-200', '201-1000', '1000+']),\n  website: z.string().url('Please enter a valid URL')\n});\n\nconst useCaseSchema = z.object({\n  primaryGoal: z.enum([\n    'customer_support',\n    'sales_automation',\n    'lead_generation',\n    'product_recommendations',\n    'other'\n  ]),\n  expectedVolume: z.enum(['low', 'medium', 'high']),\n  currentSolution: z.string().optional()\n});\n\nconst integrationSchema = z.object({\n  platform: z.enum(['shopify', 'woocommerce', 'magento', 'custom']),\n  storeUrl: z.string().url('Please enter a valid store URL'),\n  apiKey: z.string().min(10, 'API key is required')\n});\n\nconst customizationSchema = z.object({\n  aiName: z.string().min(2, 'Assistant name is required'),\n  tone: z.enum(['professional', 'friendly', 'casual']),\n  language: z.array(z.string()).min(1, 'Select at least one language'),\n  specialties: z.array(z.string()).min(1, 'Select at least one specialty')\n});\n\nconst OnboardingFlow: React.FC = () => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const navigate = useNavigate();\n  \n  const { mutate: submitOnboarding, isLoading } = useMutation({\n    mutationFn: completeOnboarding,\n    onSuccess: () => {\n      navigate('/dashboard');\n    }\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    watch\n  } = useForm({\n    resolver: zodResolver(\n      [companySchema, useCaseSchema, integrationSchema, customizationSchema][currentStep]\n    )\n  });\n\n  const onSubmit = (data: any) => {\n    if (currentStep === onboardingSteps.length - 1) {\n      submitOnboarding(data);\n    } else {\n      setCurrentStep(prev => prev + 1);\n    }\n  };\n\n  const slideVariants = {\n    enter: (direction: number) => ({\n      x: direction > 0 ? 1000 : -1000,\n      opacity: 0\n    }),\n    center: {\n      zIndex: 1,\n      x: 0,\n      opacity: 1\n    },\n    exit: (direction: number) => ({\n      zIndex: 0,\n      x: direction < 0 ? 1000 : -1000,\n      opacity: 0\n    })\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"max-w-4xl mx-auto pt-16 pb-24 px-4\">\n        {/* Progress Bar */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between mb-2\">\n            {onboardingSteps.map((step, index) => (\n              <div\n                key={step.title}\n                className={`flex items-center ${\n                  index <= currentStep ? 'text-blue-600' : 'text-gray-400'\n                }`}\n              >\n                <div\n                  className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                    index <= currentStep ? 'bg-blue-600 text-white' : 'bg-gray-200'\n                  }`}\n                >\n                  {index + 1}\n                </div>\n                <div className=\"hidden sm:block ml-2\">{step.title}</div>\n              </div>\n            ))}\n          </div>\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <div className=\"w-full bg-gray-200 h-1\">\n                <div\n                  className=\"bg-blue-600 h-1 transition-all duration-500\"\n                  style={{ width: `${(currentStep / (onboardingSteps.length - 1)) * 100}%` }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Content */}\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={currentStep}\n            custom={currentStep}\n            variants={slideVariants}\n            initial=\"enter\"\n            animate=\"center\"\n            exit=\"exit\"\n            transition={{\n              x: { type: \"spring\", stiffness: 300, damping: 30 },\n              opacity: { duration: 0.2 }\n            }}\n          >\n            <div className=\"bg-white rounded-xl shadow-xl p-8\">\n              <h2 className=\"text-2xl font-bold mb-2\">{onboardingSteps[currentStep].title}</h2>\n              <p className=\"text-gray-600 mb-8\">{onboardingSteps[currentStep].description}</p>\n\n              <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n                {currentStep === 0 && (\n                  <WelcomeStep />\n                )}\n\n                {currentStep === 1 && (\n                  <CompanyStep register={register} errors={errors} />\n                )}\n\n                {currentStep === 2 && (\n                  <UseCaseStep register={register} errors={errors} watch={watch} />\n                )}\n\n                {currentStep === 3 && (\n                  <IntegrationStep register={register} errors={errors} watch={watch} />\n                )}\n\n                {currentStep === 4 && (\n                  <CustomizationStep register={register} errors={errors} />\n                )}\n\n                <div className=\"flex justify-between pt-6\">\n                  <button\n                    type=\"button\"\n                    onClick={() => setCurrentStep(prev => prev - 1)}\n                    className={`px-6 py-2 rounded-lg text-gray-600 hover:bg-gray-100 ${\n                      currentStep === 0 ? 'invisible' : ''\n                    }`}\n                  >\n                    Back\n                  </button>\n                  <button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n                  >\n                    {currentStep === onboardingSteps.length - 1 ? 'Complete Setup' : 'Continue'}\n                  </button>\n                </div>\n              </form>\n            </div>\n          </motion.div>\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n};\n\nconst WelcomeStep: React.FC = () => (\n  <div className=\"text-center\">\n    <img\n      src=\"/onboarding/welcome.svg\"\n      alt=\"Welcome\"\n      className=\"w-64 mx-auto mb-8\"\n    />\n    <p className=\"text-lg text-gray-600\">\n      We're excited to have you here! Let's get your AI assistant set up and ready to help your customers.\n    </p>\n  </div>\n);\n\nconst CompanyStep: React.FC<any> = ({ register, errors }) => (\n  <div className=\"space-y-4\">\n    <div>\n      <label className=\"block text-sm font-medium text-gray-700\">Company Name</label>\n      <input\n        {...register('companyName')}\n        className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n      />\n      {errors.companyName && (\n        <p className=\"mt-1 text-sm text-red-600\">{errors.companyName.message}</p>\n      )}\n    </div>\n    {/* Add other company fields */}\n  </div>\n);\n\nconst UseCaseStep: React.FC<any> = ({ register, errors, watch }) => (\n  <div className=\"space-y-4\">\n    <div>\n      <label className=\"block text-sm font-medium text-gray-700\">Primary Goal</label>\n      <select\n        {...register('primaryGoal')}\n        className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n      >\n        <option value=\"customer_support\">Customer Support Automation</option>\n        <option value=\"sales_automation\">Sales Automation</option>\n        <option value=\"lead_generation\">Lead Generation</option>\n        <option value=\"product_recommendations\">Product Recommendations</option>\n        <option value=\"other\">Other</option>\n      </select>\n      {errors.primaryGoal && (\n        <p className=\"mt-1 text-sm text-red-600\">{errors.primaryGoal.message}</p>\n      )}\n    </div>\n    {/* Add other use case fields */}\n  </div>\n);\n\nconst IntegrationStep: React.FC<any> = ({ register, errors, watch }) => (\n  <div className=\"space-y-4\">\n    <div>\n      <label className=\"block text-sm font-medium text-gray-700\">E-commerce Platform</label>\n      <select\n        {...register('platform')}\n        className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n      >\n        <option value=\"shopify\">Shopify</option>\n        <option value=\"woocommerce\">WooCommerce</option>\n        <option value=\"magento\">Magento</option>\n        <option value=\"custom\">Custom Platform</option>\n      </select>\n      {errors.platform && (\n        <p className=\"mt-1 text-sm text-red-600\">{errors.platform.message}</p>\n      )}\n    </div>\n    {/* Add other integration fields */}\n  </div>\n);\n\nconst CustomizationStep: React.FC<any> = ({ register, errors }) => (\n  <div className=\"space-y-4\">\n    <div>\n      <label className=\"block text-sm font-medium text-gray-700\">AI Assistant Name</label>\n      <input\n        {...register('aiName')}\n        className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n      />\n      {errors.aiName && (\n        <p className=\"mt-1 text-sm text-red-600\">{errors.aiName.message}</p>\n      )}\n    </div>\n    {/* Add other customization fields */}\n  </div>\n);\n\nexport default OnboardingFlow; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/onboarding/OnboardingWizard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/payments/BillingHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/payments/PaymentMethodManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'type' is defined but never used.","line":59,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FC, useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { CreditCard, Trash2, Plus, Check } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Modal } from '../ui/Modal';\nimport { useAnimation } from '../../contexts/AnimationContext';\nimport { Toast } from '../ui/Toast';\n\ninterface PaymentMethod {\n  id: string;\n  type: 'visa' | 'mastercard' | 'amex';\n  last4: string;\n  expMonth: string;\n  expYear: string;\n  isDefault: boolean;\n}\n\ninterface PaymentMethodManagerProps {\n  paymentMethods: PaymentMethod[];\n  onAddPaymentMethod: () => void;\n  onRemovePaymentMethod: (id: string) => void;\n  onSetDefaultPaymentMethod: (id: string) => void;\n}\n\nexport const PaymentMethodManager: FC<PaymentMethodManagerProps> = ({\n  paymentMethods,\n  onAddPaymentMethod,\n  onRemovePaymentMethod,\n  onSetDefaultPaymentMethod,\n}) => {\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [selectedMethodId, setSelectedMethodId] = useState<string | null>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const { getAnimationVariant } = useAnimation();\n\n  const handleDelete = (id: string) => {\n    setSelectedMethodId(id);\n    setShowDeleteModal(true);\n  };\n\n  const confirmDelete = () => {\n    if (selectedMethodId) {\n      onRemovePaymentMethod(selectedMethodId);\n      setShowToast(true);\n      setToastMessage('Payment method removed successfully');\n    }\n    setShowDeleteModal(false);\n    setSelectedMethodId(null);\n  };\n\n  const handleSetDefault = (id: string) => {\n    onSetDefaultPaymentMethod(id);\n    setShowToast(true);\n    setToastMessage('Default payment method updated');\n  };\n\n  const getCardIcon = (type: PaymentMethod['type']) => {\n    // In a real app, you would import and use actual card brand SVGs\n    return <CreditCard className=\"h-6 w-6\" />;\n  };\n\n  return (\n    <>\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Payment Methods</CardTitle>\n            <Button onClick={onAddPaymentMethod}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Payment Method\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <AnimatePresence>\n              {paymentMethods.map((method) => (\n                <motion.div\n                  key={method.id}\n                  variants={getAnimationVariant('listItem')}\n                  initial=\"initial\"\n                  animate=\"animate\"\n                  exit=\"exit\"\n                  layout\n                  className=\"flex items-center justify-between p-4 border border-gray-200 dark:border-gray-700 rounded-lg\"\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    {getCardIcon(method.type)}\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-medium capitalize\">{method.type}</span>\n                        <span className=\"text-sm text-gray-500\">•••• {method.last4}</span>\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        Expires {method.expMonth}/{method.expYear}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {!method.isDefault && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSetDefault(method.id)}\n                      >\n                        Set Default\n                      </Button>\n                    )}\n                    {method.isDefault && (\n                      <span className=\"flex items-center text-sm text-primary-600 dark:text-primary-400\">\n                        <Check className=\"h-4 w-4 mr-1\" />\n                        Default\n                      </span>\n                    )}\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(method.id)}\n                      disabled={method.isDefault}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </motion.div>\n              ))}\n            </AnimatePresence>\n\n            {paymentMethods.length === 0 && (\n              <div className=\"text-center py-6 text-gray-500\">\n                No payment methods added yet\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Modal\n        isOpen={showDeleteModal}\n        onClose={() => setShowDeleteModal(false)}\n        title=\"Remove Payment Method\"\n        description=\"Are you sure you want to remove this payment method? This action cannot be undone.\"\n      >\n        <div className=\"flex justify-end space-x-4 mt-4\">\n          <Button variant=\"ghost\" onClick={() => setShowDeleteModal(false)}>\n            Cancel\n          </Button>\n          <Button variant=\"destructive\" onClick={confirmDelete}>\n            Remove\n          </Button>\n        </div>\n      </Modal>\n\n      {showToast && (\n        <Toast\n          message={toastMessage}\n          type=\"success\"\n          onClose={() => setShowToast(false)}\n        />\n      )}\n    </>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/profile/Profile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/settings/ApiKeyManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/settings/FeatureFlagManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/settings/IntegrationManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[617,620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[617,620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1105,1108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1105,1108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1228,1231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1228,1231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onConnectIntegration' is defined but never used.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onUpdateIntegration' is defined but never used.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showConnectModal' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":61,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedIntegrationId' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":64,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":31}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FC, useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Plug, Plus, Settings, Link2, Trash2, RefreshCw, CheckCircle, XCircle } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Modal } from '../ui/Modal';\nimport { Toast } from '../ui/Toast';\nimport { useAnimation } from '../../contexts/AnimationContext';\n\ninterface Integration {\n  id: string;\n  name: string;\n  provider: string;\n  description: string;\n  status: 'connected' | 'disconnected' | 'error';\n  config: Record<string, any>;\n  lastSync?: string;\n  error?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Webhook {\n  id: string;\n  name: string;\n  url: string;\n  events: string[];\n  active: boolean;\n  lastDelivery?: {\n    status: 'success' | 'failed';\n    timestamp: string;\n    statusCode?: number;\n  };\n}\n\ninterface IntegrationManagerProps {\n  integrations: Integration[];\n  webhooks: Webhook[];\n  availableEvents: string[];\n  onConnectIntegration: (provider: string, config: Record<string, any>) => void;\n  onDisconnectIntegration: (id: string) => void;\n  onUpdateIntegration: (id: string, config: Record<string, any>) => void;\n  onCreateWebhook: (webhook: Omit<Webhook, 'id'>) => void;\n  onUpdateWebhook: (id: string, updates: Partial<Webhook>) => void;\n  onDeleteWebhook: (id: string) => void;\n  onTestWebhook: (id: string) => void;\n}\n\nexport const IntegrationManager: FC<IntegrationManagerProps> = ({\n  integrations,\n  webhooks,\n  availableEvents,\n  onConnectIntegration,\n  onDisconnectIntegration,\n  onUpdateIntegration,\n  onCreateWebhook,\n  onUpdateWebhook,\n  onDeleteWebhook,\n  onTestWebhook,\n}) => {\n  const [showConnectModal, setShowConnectModal] = useState(false);\n  const [showWebhookModal, setShowWebhookModal] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [selectedIntegrationId, setSelectedIntegrationId] = useState<string | null>(null);\n  const [selectedWebhookId, setSelectedWebhookId] = useState<string | null>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [newWebhook, setNewWebhook] = useState({\n    name: '',\n    url: '',\n    events: [] as string[],\n    active: true,\n  });\n  const { getAnimationVariant } = useAnimation();\n\n  const handleCreateWebhook = () => {\n    if (newWebhook.name.trim() && newWebhook.url.trim()) {\n      onCreateWebhook(newWebhook);\n      setShowWebhookModal(false);\n      setNewWebhook({\n        name: '',\n        url: '',\n        events: [],\n        active: true,\n      });\n      setToastMessage('Webhook created successfully');\n      setShowToast(true);\n    }\n  };\n\n  const handleDeleteWebhook = () => {\n    if (selectedWebhookId) {\n      onDeleteWebhook(selectedWebhookId);\n      setShowDeleteModal(false);\n      setSelectedWebhookId(null);\n      setToastMessage('Webhook deleted successfully');\n      setShowToast(true);\n    }\n  };\n\n  const handleTestWebhook = (id: string) => {\n    onTestWebhook(id);\n    setToastMessage('Webhook test triggered');\n    setShowToast(true);\n  };\n\n  const getStatusColor = (status: Integration['status']) => {\n    switch (status) {\n      case 'connected':\n        return 'text-green-500';\n      case 'disconnected':\n        return 'text-gray-400';\n      case 'error':\n        return 'text-red-500';\n    }\n  };\n\n  return (\n    <>\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Integrations</CardTitle>\n              <Button onClick={() => setShowConnectModal(true)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Connect Integration\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <AnimatePresence>\n                {integrations.map((integration) => (\n                  <motion.div\n                    key={integration.id}\n                    variants={getAnimationVariant('listItem')}\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                    layout\n                    className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\"\n                  >\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Plug className={`h-5 w-5 ${getStatusColor(integration.status)}`} />\n                          <h3 className=\"font-medium\">{integration.name}</h3>\n                          <span className=\"text-sm text-gray-500\">{integration.provider}</span>\n                        </div>\n                        <p className=\"text-sm text-gray-500 mt-1\">{integration.description}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        {integration.status === 'connected' ? (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => onDisconnectIntegration(integration.id)}\n                          >\n                            Disconnect\n                          </Button>\n                        ) : (\n                          <Button\n                            variant=\"primary\"\n                            size=\"sm\"\n                            onClick={() => setSelectedIntegrationId(integration.id)}\n                          >\n                            Connect\n                          </Button>\n                        )}\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setSelectedIntegrationId(integration.id)}\n                        >\n                          <Settings className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n\n                    {integration.lastSync && (\n                      <div className=\"text-sm text-gray-500\">\n                        Last synced: {integration.lastSync}\n                      </div>\n                    )}\n\n                    {integration.error && (\n                      <div className=\"mt-2 text-sm text-red-500\">\n                        Error: {integration.error}\n                      </div>\n                    )}\n                  </motion.div>\n                ))}\n              </AnimatePresence>\n\n              {integrations.length === 0 && (\n                <div className=\"text-center py-6 text-gray-500\">\n                  No integrations configured\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Webhooks</CardTitle>\n              <Button onClick={() => setShowWebhookModal(true)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Webhook\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <AnimatePresence>\n                {webhooks.map((webhook) => (\n                  <motion.div\n                    key={webhook.id}\n                    variants={getAnimationVariant('listItem')}\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                    layout\n                    className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\"\n                  >\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Link2 className=\"h-5 w-5 text-gray-500\" />\n                          <h3 className=\"font-medium\">{webhook.name}</h3>\n                          {webhook.active ? (\n                            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                          ) : (\n                            <XCircle className=\"h-4 w-4 text-gray-400\" />\n                          )}\n                        </div>\n                        <p className=\"text-sm text-gray-500 mt-1\">{webhook.url}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleTestWebhook(webhook.id)}\n                        >\n                          <RefreshCw className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => {\n                            onUpdateWebhook(webhook.id, { active: !webhook.active });\n                          }}\n                        >\n                          {webhook.active ? 'Disable' : 'Enable'}\n                        </Button>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedWebhookId(webhook.id);\n                            setShowDeleteModal(true);\n                          }}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"text-sm font-medium text-gray-500 mb-2\">Events</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {webhook.events.map((event) => (\n                          <span\n                            key={event}\n                            className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-300\"\n                          >\n                            {event}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n\n                    {webhook.lastDelivery && (\n                      <div className=\"mt-4 text-sm\">\n                        <span className=\"text-gray-500\">Last delivery: </span>\n                        <span\n                          className={\n                            webhook.lastDelivery.status === 'success'\n                              ? 'text-green-500'\n                              : 'text-red-500'\n                          }\n                        >\n                          {webhook.lastDelivery.status}\n                          {webhook.lastDelivery.statusCode &&\n                            ` (${webhook.lastDelivery.statusCode})`}\n                        </span>\n                        <span className=\"text-gray-500 ml-2\">\n                          at {webhook.lastDelivery.timestamp}\n                        </span>\n                      </div>\n                    )}\n                  </motion.div>\n                ))}\n              </AnimatePresence>\n\n              {webhooks.length === 0 && (\n                <div className=\"text-center py-6 text-gray-500\">\n                  No webhooks configured\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Modal\n        isOpen={showWebhookModal}\n        onClose={() => setShowWebhookModal(false)}\n        title=\"Add Webhook\"\n        description=\"Configure a new webhook endpoint to receive event notifications.\"\n      >\n        <div className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"webhookName\" className=\"block text-sm font-medium mb-1\">\n              Webhook Name\n            </label>\n            <input\n              id=\"webhookName\"\n              type=\"text\"\n              value={newWebhook.name}\n              onChange={(e) => setNewWebhook({ ...newWebhook, name: e.target.value })}\n              className=\"w-full rounded-md border border-gray-300 dark:border-gray-700 bg-transparent px-3 py-2\"\n              placeholder=\"e.g., Order Notifications\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"webhookUrl\" className=\"block text-sm font-medium mb-1\">\n              Endpoint URL\n            </label>\n            <input\n              id=\"webhookUrl\"\n              type=\"url\"\n              value={newWebhook.url}\n              onChange={(e) => setNewWebhook({ ...newWebhook, url: e.target.value })}\n              className=\"w-full rounded-md border border-gray-300 dark:border-gray-700 bg-transparent px-3 py-2\"\n              placeholder=\"https://api.example.com/webhooks\"\n            />\n          </div>\n\n          <div>\n            <h4 className=\"text-sm font-medium mb-2\">Events</h4>\n            <div className=\"space-y-2\">\n              {availableEvents.map((event) => (\n                <label key={event} className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={newWebhook.events.includes(event)}\n                    onChange={(e) => {\n                      const newEvents = e.target.checked\n                        ? [...newWebhook.events, event]\n                        : newWebhook.events.filter((e) => e !== event);\n                      setNewWebhook({ ...newWebhook, events: newEvents });\n                    }}\n                    className=\"rounded border-gray-300 dark:border-gray-700\"\n                  />\n                  <span>{event}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-4 mt-6\">\n            <Button variant=\"ghost\" onClick={() => setShowWebhookModal(false)}>\n              Cancel\n            </Button>\n            <Button\n              onClick={handleCreateWebhook}\n              disabled={!newWebhook.name.trim() || !newWebhook.url.trim()}\n            >\n              Create Webhook\n            </Button>\n          </div>\n        </div>\n      </Modal>\n\n      <Modal\n        isOpen={showDeleteModal}\n        onClose={() => setShowDeleteModal(false)}\n        title=\"Delete Webhook\"\n        description=\"Are you sure you want to delete this webhook? This action cannot be undone.\"\n      >\n        <div className=\"flex justify-end space-x-4 mt-4\">\n          <Button variant=\"ghost\" onClick={() => setShowDeleteModal(false)}>\n            Cancel\n          </Button>\n          <Button variant=\"destructive\" onClick={handleDeleteWebhook}>\n            Delete\n          </Button>\n        </div>\n      </Modal>\n\n      {showToast && (\n        <Toast\n          message={toastMessage}\n          type=\"success\"\n          onClose={() => setShowToast(false)}\n        />\n      )}\n    </>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/settings/RoleManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/settings/Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/subscription/SubscriptionCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onDowngrade' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FC } from 'react';\nimport { Check, AlertCircle } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { Button } from '../ui/Button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';\nimport { useAnimation } from '../../contexts/AnimationContext';\n\ninterface Feature {\n  name: string;\n  included: boolean;\n}\n\ninterface Plan {\n  id: string;\n  name: string;\n  price: number;\n  billingPeriod: 'monthly' | 'yearly';\n  features: Feature[];\n  limits: {\n    apiCalls: number;\n    storage: number;\n    users: number;\n  };\n  isCurrent?: boolean;\n  isPopular?: boolean;\n}\n\ninterface SubscriptionCardProps {\n  plan: Plan;\n  onUpgrade?: () => void;\n  onDowngrade?: () => void;\n  className?: string;\n}\n\nexport const SubscriptionCard: FC<SubscriptionCardProps> = ({\n  plan,\n  onUpgrade,\n  onDowngrade,\n  className = '',\n}) => {\n  const { getAnimationVariant } = useAnimation();\n\n  const formatLimit = (value: number): string => {\n    if (value >= 1000000) {\n      return `${value / 1000000}M`;\n    }\n    if (value >= 1000) {\n      return `${value / 1000}K`;\n    }\n    return value.toString();\n  };\n\n  return (\n    <motion.div\n      variants={getAnimationVariant('pop')}\n      initial=\"initial\"\n      animate=\"animate\"\n      whileHover={{ scale: 1.02 }}\n      className={className}\n    >\n      <Card className={`relative h-full ${plan.isPopular ? 'border-primary-500 border-2' : ''}`}>\n        {plan.isPopular && (\n          <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n            <span className=\"bg-primary-500 text-white px-3 py-1 rounded-full text-sm font-medium\">\n              Most Popular\n            </span>\n          </div>\n        )}\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>{plan.name}</span>\n            <span className=\"text-2xl font-bold\">\n              ${plan.price}\n              <span className=\"text-sm font-normal text-gray-500\">\n                /{plan.billingPeriod === 'monthly' ? 'mo' : 'yr'}\n              </span>\n            </span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-500 mb-2\">Usage Limits</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">API Calls</span>\n                  <span className=\"font-medium\">{formatLimit(plan.limits.apiCalls)}/mo</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Storage</span>\n                  <span className=\"font-medium\">{formatLimit(plan.limits.storage)} GB</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Team Members</span>\n                  <span className=\"font-medium\">{formatLimit(plan.limits.users)}</span>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-500 mb-2\">Features</h4>\n              <ul className=\"space-y-2\">\n                {plan.features.map((feature, index) => (\n                  <li key={index} className=\"flex items-center\">\n                    {feature.included ? (\n                      <Check className=\"h-4 w-4 text-green-500 mr-2\" />\n                    ) : (\n                      <AlertCircle className=\"h-4 w-4 text-gray-400 mr-2\" />\n                    )}\n                    <span className={`text-sm ${feature.included ? '' : 'text-gray-500 line-through'}`}>\n                      {feature.name}\n                    </span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            <div className=\"pt-4\">\n              {plan.isCurrent ? (\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  disabled\n                >\n                  Current Plan\n                </Button>\n              ) : (\n                <Button\n                  variant={plan.isPopular ? 'primary' : 'outline'}\n                  className=\"w-full\"\n                  onClick={onUpgrade}\n                >\n                  {onUpgrade ? 'Upgrade' : 'Downgrade'} to {plan.name}\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/trial/TrialEmailMonitor.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchEmailStatus' and 'fetchTrialStats'. Either include them or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [fetchEmailStatus, fetchTrialStats, trialId]","fix":{"range":[1325,1334],"text":"[fetchEmailStatus, fetchTrialStats, trialId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1762,1765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1762,1765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2242,2245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2242,2245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2870,2873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2870,2873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Button } from '../ui/button';\nimport { Badge } from '../ui/badge';\nimport { Clock, Mail, CheckCircle, AlertCircle, BarChart3 } from 'lucide-react';\n\ninterface EmailStatus {\n  id: string;\n  templateKey: string;\n  status: 'scheduled' | 'sent' | 'failed' | 'pending';\n  scheduledTime: string;\n  sentTime?: string;\n  subject: string;\n  error?: string;\n}\n\ninterface TrialStats {\n  messagesProcessed: number;\n  responseTime: number;\n  customerSatisfaction: number;\n  timesSaved: number;\n  emailsSent: number;\n}\n\ninterface TrialEmailMonitorProps {\n  trialId: string;\n  userEmail: string;\n}\n\nconst TrialEmailMonitor: React.FC<TrialEmailMonitorProps> = ({ trialId, userEmail }) => {\n  const [emailStatuses, setEmailStatuses] = useState<EmailStatus[]>([]);\n  const [trialStats, setTrialStats] = useState<TrialStats | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchEmailStatus();\n    fetchTrialStats();\n    \n    // Poll every 30 seconds for updates\n    const interval = setInterval(() => {\n      fetchEmailStatus();\n      fetchTrialStats();\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, [trialId]);\n\n  const fetchEmailStatus = async () => {\n    try {\n      const response = await fetch(`/api/trial/${trialId}/email-status`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n        },\n      });\n\n      if (!response.ok) throw new Error('Failed to fetch email status');\n      \n      const data = await response.json();\n      setEmailStatuses(data.emails || []);\n    } catch (err: any) {\n      setError(err.message);\n    }\n  };\n\n  const fetchTrialStats = async () => {\n    try {\n      const response = await fetch(`/api/trial/${trialId}/stats`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n        },\n      });\n\n      if (!response.ok) throw new Error('Failed to fetch trial stats');\n      \n      const data = await response.json();\n      setTrialStats(data.stats);\n      setIsLoading(false);\n    } catch (err: any) {\n      setError(err.message);\n      setIsLoading(false);\n    }\n  };\n\n  const triggerTestEmail = async () => {\n    try {\n      const response = await fetch(`/api/trial/test-email`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n        },\n        body: JSON.stringify({\n          email: userEmail,\n          templateKey: 'day0_welcome',\n        }),\n      });\n\n      if (!response.ok) throw new Error('Failed to send test email');\n      \n      // Refresh status\n      fetchEmailStatus();\n    } catch (err: any) {\n      setError(err.message);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      scheduled: { variant: 'secondary' as const, icon: Clock, color: 'text-blue-600' },\n      sent: { variant: 'default' as const, icon: CheckCircle, color: 'text-green-600' },\n      failed: { variant: 'destructive' as const, icon: AlertCircle, color: 'text-red-600' },\n      pending: { variant: 'outline' as const, icon: Clock, color: 'text-yellow-600' },\n    };\n\n    const config = variants[status as keyof typeof variants] || variants.pending;\n    const Icon = config.icon;\n\n    return (\n      <Badge variant={config.variant} className=\"flex items-center gap-1\">\n        <Icon className={`w-3 h-3 ${config.color}`} />\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const getEmailTitle = (templateKey: string) => {\n    const titles = {\n      day0_welcome: 'Welcome Email',\n      day1_setup_confirmation: 'Setup Confirmation',\n      day3_early_results: 'Early Results Check',\n      day5_success_review: 'Success Review',\n      day6_soft_close: 'Soft Close',\n      day7_final_decision: 'Final Decision',\n    };\n    return titles[templateKey as keyof typeof titles] || templateKey;\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            <span className=\"ml-2\">Loading trial data...</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Trial Statistics */}\n      {trialStats && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BarChart3 className=\"w-5 h-5\" />\n              Trial Performance\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{trialStats.messagesProcessed}</div>\n                <div className=\"text-sm text-gray-600\">Messages Processed</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{trialStats.responseTime}ms</div>\n                <div className=\"text-sm text-gray-600\">Avg Response Time</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">{trialStats.customerSatisfaction}%</div>\n                <div className=\"text-sm text-gray-600\">Satisfaction</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-orange-600\">{trialStats.timesSaved}h</div>\n                <div className=\"text-sm text-gray-600\">Time Saved</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Email Status */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Mail className=\"w-5 h-5\" />\n            Email Automation Status\n          </CardTitle>\n          <Button onClick={triggerTestEmail} variant=\"outline\" size=\"sm\">\n            Send Test Email\n          </Button>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-4\">\n              <div className=\"flex items-center gap-2\">\n                <AlertCircle className=\"w-5 h-5 text-red-600\" />\n                <span className=\"text-red-800\">{error}</span>\n              </div>\n            </div>\n          )}\n\n          <div className=\"space-y-4\">\n            {emailStatuses.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Mail className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                <p>No email automation found for this trial</p>\n                <p className=\"text-sm\">Email sequence will start when trial begins</p>\n              </div>\n            ) : (\n              emailStatuses.map((email) => (\n                <div key={email.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3\">\n                      <h4 className=\"font-medium\">{getEmailTitle(email.templateKey)}</h4>\n                      {getStatusBadge(email.status)}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">{email.subject}</p>\n                    <div className=\"flex gap-4 text-xs text-gray-500 mt-2\">\n                      <span>Scheduled: {new Date(email.scheduledTime).toLocaleString()}</span>\n                      {email.sentTime && (\n                        <span>Sent: {new Date(email.sentTime).toLocaleString()}</span>\n                      )}\n                    </div>\n                    {email.error && (\n                      <p className=\"text-sm text-red-600 mt-1\">Error: {email.error}</p>\n                    )}\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default TrialEmailMonitor;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/trial/TrialFlow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/tutorials/TutorialSystem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setFilter' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":53,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":54,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  Text,\n  Badge,\n  Button,\n  List,\n  ListItem,\n  Title,\n  ProgressBar,\n  Tab,\n  TabGroup,\n  TabList,\n  TabPanel,\n  TabPanels,\n} from '@tremor/react';\n\ninterface TutorialStep {\n  id: string;\n  title: string;\n  description: string;\n  duration: number; // in minutes\n  completed: boolean;\n  videoUrl?: string;\n  codeSnippet?: string;\n  links?: {\n    text: string;\n    url: string;\n  }[];\n}\n\ninterface Tutorial {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  steps: TutorialStep[];\n  prerequisites?: string[];\n  estimatedTime: number; // in minutes\n  completionRate: number;\n  author: {\n    name: string;\n    role: string;\n  };\n  lastUpdated: Date;\n}\n\nconst TutorialSystem: React.FC = () => {\n  const [tutorials, setTutorials] = useState<Tutorial[]>([]);\n  const [selectedTutorial, setSelectedTutorial] = useState<Tutorial | null>(null);\n  const [currentStep, setCurrentStep] = useState<number>(0);\n  const [filter, setFilter] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [view, setView] = useState<'grid' | 'list'>('grid');\n\n  // Mock data - replace with real API calls\n  useEffect(() => {\n    const mockTutorials: Tutorial[] = [\n      {\n        id: '1',\n        title: 'Getting Started with Our Platform',\n        description: 'Learn the basics of our platform and set up your first project.',\n        category: 'Onboarding',\n        difficulty: 'beginner',\n        completionRate: 85,\n        estimatedTime: 30,\n        author: {\n          name: 'Sarah Johnson',\n          role: 'Developer Advocate',\n        },\n        lastUpdated: new Date(),\n        steps: [\n          {\n            id: 's1',\n            title: 'Platform Overview',\n            description: 'Understanding the key features and components of our platform.',\n            duration: 5,\n            completed: false,\n            videoUrl: 'https://example.com/videos/overview',\n          },\n          {\n            id: 's2',\n            title: 'Account Setup',\n            description: 'Setting up your account and configuring basic preferences.',\n            duration: 10,\n            completed: false,\n            codeSnippet: `\n// Example configuration\n{\n  \"apiKey\": \"your-api-key\",\n  \"environment\": \"production\",\n  \"features\": {\n    \"analytics\": true,\n    \"notifications\": true\n  }\n}`,\n          },\n          {\n            id: 's3',\n            title: 'First Project',\n            description: 'Creating and configuring your first project.',\n            duration: 15,\n            completed: false,\n            links: [\n              {\n                text: 'Project Templates',\n                url: 'https://example.com/templates',\n              },\n              {\n                text: 'Best Practices',\n                url: 'https://example.com/best-practices',\n              },\n            ],\n          },\n        ],\n        prerequisites: ['Basic programming knowledge', 'Familiarity with web technologies'],\n      },\n      {\n        id: '2',\n        title: 'Advanced Data Management',\n        description: 'Learn advanced techniques for managing and optimizing your data.',\n        category: 'Data',\n        difficulty: 'advanced',\n        completionRate: 45,\n        estimatedTime: 60,\n        author: {\n          name: 'Michael Chen',\n          role: 'Senior Engineer',\n        },\n        lastUpdated: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n        steps: [\n          {\n            id: 's1',\n            title: 'Data Models',\n            description: 'Understanding and designing efficient data models.',\n            duration: 20,\n            completed: false,\n            codeSnippet: `\ninterface DataModel {\n  id: string;\n  attributes: Record<string, any>;\n  relationships: {\n    [key: string]: {\n      type: string;\n      id: string;\n    };\n  };\n}`,\n          },\n          {\n            id: 's2',\n            title: 'Query Optimization',\n            description: 'Techniques for optimizing database queries and performance.',\n            duration: 25,\n            completed: false,\n            videoUrl: 'https://example.com/videos/query-optimization',\n          },\n          {\n            id: 's3',\n            title: 'Data Migration',\n            description: 'Strategies for safe and efficient data migration.',\n            duration: 15,\n            completed: false,\n            links: [\n              {\n                text: 'Migration Patterns',\n                url: 'https://example.com/migration-patterns',\n              },\n            ],\n          },\n        ],\n        prerequisites: [\n          'Intermediate programming skills',\n          'Database fundamentals',\n          'SQL knowledge',\n        ],\n      },\n    ];\n    setTutorials(mockTutorials);\n  }, []);\n\n  const filteredTutorials = tutorials.filter((tutorial) => {\n    const matchesFilter = filter === 'all' || tutorial.category === filter;\n    const matchesSearch =\n      searchTerm === '' ||\n      tutorial.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      tutorial.description.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesFilter && matchesSearch;\n  });\n\n  const categories = Array.from(new Set(tutorials.map((t) => t.category)));\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner':\n        return 'green';\n      case 'intermediate':\n        return 'yellow';\n      case 'advanced':\n        return 'red';\n      default:\n        return 'gray';\n    }\n  };\n\n  const startTutorial = (tutorial: Tutorial) => {\n    setSelectedTutorial(tutorial);\n    setCurrentStep(0);\n  };\n\n  const nextStep = () => {\n    if (selectedTutorial && currentStep < selectedTutorial.steps.length - 1) {\n      const updatedTutorial = { ...selectedTutorial };\n      updatedTutorial.steps[currentStep].completed = true;\n      setSelectedTutorial(updatedTutorial);\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const previousStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const exitTutorial = () => {\n    setSelectedTutorial(null);\n    setCurrentStep(0);\n  };\n\n  if (selectedTutorial) {\n    const step = selectedTutorial.steps[currentStep];\n    const progress = (currentStep / selectedTutorial.steps.length) * 100;\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <Title>{selectedTutorial.title}</Title>\n            <Text>Step {currentStep + 1} of {selectedTutorial.steps.length}</Text>\n          </div>\n          <Button size=\"sm\" variant=\"secondary\" onClick={exitTutorial}>\n            Exit Tutorial\n          </Button>\n        </div>\n\n        <ProgressBar value={progress} color=\"blue\" className=\"mt-2\" />\n\n        <Card>\n          <div className=\"space-y-6\">\n            <div>\n              <Text className=\"font-medium text-xl\">{step.title}</Text>\n              <Badge color=\"gray\">\n                {step.duration} minutes\n              </Badge>\n            </div>\n\n            <Text>{step.description}</Text>\n\n            {step.videoUrl && (\n              <div className=\"mt-4\">\n                <Text className=\"font-medium\">Video Tutorial</Text>\n                <div className=\"mt-2 aspect-video bg-gray-100 rounded flex items-center justify-center\">\n                  <Text>Video Player Placeholder</Text>\n                </div>\n              </div>\n            )}\n\n            {step.codeSnippet && (\n              <div className=\"mt-4\">\n                <Text className=\"font-medium\">Code Example</Text>\n                <pre className=\"mt-2 bg-gray-50 p-4 rounded overflow-x-auto\">\n                  <code>{step.codeSnippet}</code>\n                </pre>\n              </div>\n            )}\n\n            {step.links && step.links.length > 0 && (\n              <div className=\"mt-4\">\n                <Text className=\"font-medium\">Additional Resources</Text>\n                <div className=\"mt-2 space-y-2\">\n                  <div>\n                    {step.links.map((link, index) => (\n                      <a\n                        key={index}\n                        href={link.url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-blue-600 hover:underline block\"\n                      >\n                        {link.text} →\n                      </a>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex justify-between items-center pt-4 border-t\">\n              <Button\n                size=\"sm\"\n                variant=\"secondary\"\n                onClick={previousStep}\n                disabled={currentStep === 0}\n              >\n                Previous\n              </Button>\n              <Button\n                size=\"sm\"\n                onClick={nextStep}\n                disabled={currentStep === selectedTutorial.steps.length - 1}\n              >\n                {currentStep === selectedTutorial.steps.length - 1 ? 'Complete' : 'Next'}\n              </Button>\n            </div>\n          </div>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <Title>Tutorials & Guides</Title>\n          <Text>Learn how to use our platform effectively</Text>\n        </div>\n        <div className=\"space-x-2\">\n          <Button\n            size=\"xs\"\n            variant={view === 'grid' ? 'primary' : 'secondary'}\n            onClick={() => setView('grid')}\n          >\n            Grid View\n          </Button>\n          <Button\n            size=\"xs\"\n            variant={view === 'list' ? 'primary' : 'secondary'}\n            onClick={() => setView('list')}\n          >\n            List View\n          </Button>\n        </div>\n      </div>\n\n      <Card>\n        <TabGroup>\n          <TabList>\n            <Tab>All Categories</Tab>\n            {categories.map((category) => (\n              <Tab key={category}>{category}</Tab>\n            ))}\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              {view === 'grid' ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4\">\n                  {filteredTutorials.map((tutorial) => (\n                    <Card key={tutorial.id} className=\"flex flex-col\">\n                      <div className=\"flex-grow\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <Text className=\"font-medium\">{tutorial.title}</Text>\n                            <div className=\"flex items-center space-x-2 mt-1\">\n                              <Badge color={getDifficultyColor(tutorial.difficulty)}>\n                                {tutorial.difficulty}\n                              </Badge>\n                              <Badge color=\"gray\">\n                                {tutorial.estimatedTime} min\n                              </Badge>\n                            </div>\n                          </div>\n                          <Badge color=\"blue\">{tutorial.category}</Badge>\n                        </div>\n                        <Text className=\"mt-2 text-gray-500\">\n                          {tutorial.description}\n                        </Text>\n                        <div className=\"mt-4\">\n                          <Text className=\"text-sm text-gray-500\">\n                            Completion rate: {tutorial.completionRate}%\n                          </Text>\n                          <ProgressBar\n                            value={tutorial.completionRate}\n                            color=\"blue\"\n                            className=\"mt-1\"\n                          />\n                        </div>\n                      </div>\n                      <div className=\"mt-4 pt-4 border-t\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          onClick={() => startTutorial(tutorial)}\n                          className=\"w-full\"\n                        >\n                          Start Tutorial\n                        </Button>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <List>\n                  {filteredTutorials.map((tutorial) => (\n                    <ListItem key={tutorial.id}>\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-grow\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Text className=\"font-medium\">{tutorial.title}</Text>\n                            <Badge color={getDifficultyColor(tutorial.difficulty)}>\n                              {tutorial.difficulty}\n                            </Badge>\n                            <Badge color=\"gray\">\n                              {tutorial.estimatedTime} min\n                            </Badge>\n                            <Badge color=\"blue\">{tutorial.category}</Badge>\n                          </div>\n                          <Text className=\"mt-1 text-gray-500\">\n                            {tutorial.description}\n                          </Text>\n                          <div className=\"mt-2\">\n                            <Text className=\"text-sm text-gray-500\">\n                              Completion rate: {tutorial.completionRate}%\n                            </Text>\n                            <ProgressBar\n                              value={tutorial.completionRate}\n                              color=\"blue\"\n                              className=\"mt-1\"\n                            />\n                          </div>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          onClick={() => startTutorial(tutorial)}\n                        >\n                          Start Tutorial\n                        </Button>\n                      </div>\n                    </ListItem>\n                  ))}\n                </List>\n              )}\n            </TabPanel>\n            {categories.map((category) => (\n              <TabPanel key={category}>\n                <List>\n                  {tutorials\n                    .filter((t) => t.category === category)\n                    .map((tutorial) => (\n                      <ListItem key={tutorial.id}>\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-grow\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Text className=\"font-medium\">{tutorial.title}</Text>\n                              <Badge color={getDifficultyColor(tutorial.difficulty)}>\n                                {tutorial.difficulty}\n                              </Badge>\n                              <Badge color=\"gray\">\n                                {tutorial.estimatedTime} min\n                              </Badge>\n                            </div>\n                            <Text className=\"mt-1 text-gray-500\">\n                              {tutorial.description}\n                            </Text>\n                            <div className=\"mt-2\">\n                              <Text className=\"text-sm text-gray-500\">\n                                Completion rate: {tutorial.completionRate}%\n                              </Text>\n                              <ProgressBar\n                                value={tutorial.completionRate}\n                                color=\"blue\"\n                                className=\"mt-1\"\n                              />\n                            </div>\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            variant=\"secondary\"\n                            onClick={() => startTutorial(tutorial)}\n                          >\n                            Start Tutorial\n                          </Button>\n                        </div>\n                      </ListItem>\n                    ))}\n                </List>\n              </TabPanel>\n            ))}\n          </TabPanels>\n        </TabGroup>\n      </Card>\n    </div>\n  );\n};\n\nexport default TutorialSystem; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/AccessibilityChecker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/Badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":35,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":35,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"../../utils/cn\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants } ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/ChatPreview.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":2,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'clsx' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'buttonSizes' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":107,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getPositionClasses' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":113,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getBackgroundStyle' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":128,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":27}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChatbotConfig } from '../../types/chatbot';\nimport { useState, useEffect } from 'react';\nimport clsx from 'clsx';\n\n// Default chat icon as SVG\nconst DEFAULT_CHAT_ICON = `\n<svg class=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z\"></path>\n</svg>`;\n\ninterface ChatPreviewProps {\n  name?: string;\n  welcomeMessage?: string;\n  avatar?: string;\n  chatIcon?: string;\n  iconPosition?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n  iconSize?: number;\n  primaryColor?: string;\n  gradient?: string;\n  opacity?: number;\n  font?: string;\n  fontSize?: number;\n  theme?: 'light' | 'dark';\n  bubbleShape?: 'rounded' | 'square';\n  previewDevice?: 'desktop' | 'tablet' | 'mobile';\n  language?: 'en' | 'it' | 'es' | 'fr' | 'de';\n}\n\ntype ThemeStyles = {\n  bg: string;\n  text: string;\n  secondaryText: string;\n  inputBg: string;\n  border: string;\n};\n\nconst ChatPreview: React.FC<ChatPreviewProps> = ({\n  name = \"AI Assistant\",\n  welcomeMessage = \"Hi! How can I help you today?\",\n  avatar,\n  chatIcon,\n  iconPosition = \"bottom-right\",\n  iconSize = 48,\n  primaryColor = \"#2563eb\",\n  gradient,\n  opacity = 1,\n  font = \"Inter\",\n  fontSize = 14,\n  theme = \"light\",\n  bubbleShape = \"rounded\",\n  previewDevice = \"desktop\",\n  language = \"en\",\n}) => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  // Translations for welcome message\n  const translations: Record<ChatPreviewProps['language'] & string, string> = {\n    en: \"Hi! How can I help you today?\",\n    it: \"Ciao! Come posso aiutarti oggi?\",\n    es: \"¡Hola! ¿Cómo puedo ayudarte hoy?\",\n    fr: \"Bonjour! Comment puis-je vous aider aujourd'hui?\",\n    de: \"Hallo! Wie kann ich Ihnen heute helfen?\"\n  };\n\n  const localizedMessage = welcomeMessage || translations[language];\n\n  // Device preview styles with adjusted padding for mobile\n  const deviceStyles: Record<NonNullable<ChatPreviewProps['previewDevice']>, string> = {\n    desktop: \"w-[320px]\",\n    tablet: \"w-[280px]\",\n    mobile: \"w-[240px]\"\n  };\n\n  const inputStyles: Record<NonNullable<ChatPreviewProps['previewDevice']>, { padding: string, inputWidth: string }> = {\n    desktop: { padding: \"p-4\", inputWidth: \"w-full\" },\n    tablet: { padding: \"p-3\", inputWidth: \"w-full\" },\n    mobile: { padding: \"p-2\", inputWidth: \"w-[180px]\" }\n  };\n\n  // Bubble shape styles\n  const bubbleStyles: Record<NonNullable<ChatPreviewProps['bubbleShape']>, string> = {\n    rounded: \"rounded-2xl\",\n    square: \"rounded-none\"\n  };\n\n  // Theme styles\n  const themeStyles: Record<NonNullable<ChatPreviewProps['theme']>, ThemeStyles> = {\n    light: {\n      bg: \"bg-white\",\n      text: \"text-gray-900\",\n      secondaryText: \"text-gray-500\",\n      inputBg: \"bg-gray-50\",\n      border: \"border-gray-200\"\n    },\n    dark: {\n      bg: \"bg-gray-800\",\n      text: \"text-white\",\n      secondaryText: \"text-gray-300\",\n      inputBg: \"bg-gray-700\",\n      border: \"border-gray-700\"\n    }\n  };\n\n  const currentTheme = themeStyles[theme];\n\n  // Button sizes per device\n  const buttonSizes: Record<NonNullable<ChatPreviewProps['previewDevice']>, { width: string, iconSize: string }> = {\n    desktop: { width: \"w-10\", iconSize: \"w-4 h-4\" },\n    tablet: { width: \"w-9\", iconSize: \"w-3.5 h-3.5\" },\n    mobile: { width: \"w-8\", iconSize: \"w-3 h-3\" }\n  };\n\n  const getPositionClasses = () => {\n    switch (iconPosition) {\n      case 'bottom-right':\n        return 'bottom-4 right-4';\n      case 'bottom-left':\n        return 'bottom-4 left-4';\n      case 'top-right':\n        return 'top-4 right-4';\n      case 'top-left':\n        return 'top-4 left-4';\n      default:\n        return 'bottom-4 right-4';\n    }\n  };\n\n  const getBackgroundStyle = () => {\n    if (gradient) {\n      return {\n        background: gradient,\n        opacity: opacity\n      };\n    }\n    return {\n      backgroundColor: primaryColor,\n      opacity: opacity\n    };\n  };\n\n  return (\n    <div className=\"absolute inset-0 flex items-end justify-end p-4\">\n      <div className=\"relative flex flex-col items-end\">\n        {/* Chat Window */}\n        {isOpen && (\n          <div \n            className={`mb-4 ${deviceStyles[previewDevice]} ${currentTheme.bg} shadow-xl overflow-hidden ${bubbleStyles[bubbleShape]}`}\n            style={{ maxHeight: '80vh' }}\n          >\n            {/* Header */}\n            <div \n              className=\"p-4 flex items-center gap-3\" \n              style={{ \n                background: gradient || primaryColor,\n                opacity: opacity\n              }}\n            >\n              <div className=\"w-8 h-8 rounded-full bg-white/10 overflow-hidden flex items-center justify-center\">\n                {avatar ? (\n                  <img src={avatar} alt={name} className=\"w-full h-full object-cover\" />\n                ) : (\n                  <div className=\"text-white text-xl\" style={{ fontFamily: `\"${font}\", sans-serif` }}>{name.charAt(0)}</div>\n                )}\n              </div>\n              <div>\n                <h3 className=\"font-medium text-white\" style={{ fontFamily: `\"${font}\", sans-serif`, fontSize: `${fontSize}px` }}>{name}</h3>\n                <span className=\"text-xs text-white/80\" style={{ fontFamily: `\"${font}\", sans-serif` }}>Online</span>\n              </div>\n            </div>\n\n            {/* Messages */}\n            <div className={`h-[400px] overflow-y-auto p-4 ${currentTheme.inputBg}`}>\n              <div className=\"flex items-start gap-2 mb-4\">\n                <div className=\"w-8 h-8 rounded-full bg-gray-200 flex-shrink-0 overflow-hidden flex items-center justify-center\">\n                  {avatar ? (\n                    <img src={avatar} alt={name} className=\"w-full h-full object-cover\" />\n                  ) : (\n                    <div className={`text-sm ${currentTheme.text}`} style={{ fontFamily: `\"${font}\", sans-serif` }}>{name.charAt(0)}</div>\n                  )}\n                </div>\n                <div className={`${currentTheme.bg} p-3 ${bubbleStyles[bubbleShape]} shadow-sm max-w-[85%] ${currentTheme.border} border`}>\n                  <p className={`${currentTheme.text}`} style={{ fontSize: `${fontSize}px`, fontFamily: `\"${font}\", sans-serif` }}>\n                    {localizedMessage}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Input */}\n            <div className={`border-t ${currentTheme.border} ${currentTheme.bg} ${inputStyles[previewDevice].padding}`}>\n              <div className=\"flex items-center gap-2\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Type a message...\"\n                  className={`${inputStyles[previewDevice].inputWidth} h-8 px-2 text-sm ${currentTheme.text} ${currentTheme.inputBg} ${bubbleStyles[bubbleShape]} focus:outline-none focus:ring-2 focus:ring-blue-500`}\n                  style={{ fontFamily: `\"${font}\", sans-serif` }}\n                />\n                <button\n                  className={`h-8 w-8 flex items-center justify-center ${bubbleStyles[bubbleShape]} text-white shrink-0`}\n                  style={{ background: gradient || primaryColor, opacity: opacity }}\n                >\n                  <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path \n                      strokeLinecap=\"round\" \n                      strokeLinejoin=\"round\" \n                      strokeWidth={2} \n                      d=\"M5 12h14m-7-7l7 7-7 7\" \n                    />\n                  </svg>\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Chat Button */}\n        <button\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"rounded-full shadow-lg flex items-center justify-center transition-transform hover:scale-110 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          style={{\n            background: gradient || primaryColor,\n            opacity: opacity,\n            width: `${iconSize}px`,\n            height: `${iconSize}px`,\n          }}\n        >\n          {chatIcon ? (\n            <img src={chatIcon} alt=\"Chat\" className=\"w-1/2 h-1/2 object-contain\" />\n          ) : (\n            <div className=\"w-6 h-6 flex items-center justify-center\" dangerouslySetInnerHTML={{ __html: DEFAULT_CHAT_ICON }} />\n          )}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPreview; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/ChatbotCustomizer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1031,1034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1031,1034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'animations' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":65,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2750,2753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2750,2753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isDraft' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":89,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2998,3001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2998,3001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleFontChange' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":121,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":121,"endColumn":25}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { ColorConfig } from './ColorPicker';\nimport ColorPicker from './ColorPicker';\nimport FontCustomizer from './FontCustomizer';\nimport Input from './Input';\n\ninterface ChatbotCustomizerProps {\n  config: {\n    name: string;\n    welcomeMessage: string;\n    theme: 'light' | 'dark';\n    colors: ColorConfig;\n    position: 'bottom-right' | 'bottom-left' | 'center';\n    deviceSize: 'mobile' | 'tablet' | 'desktop';\n    font: {\n      family: string;\n      size: string;\n      weight: number;\n    };\n    bubbleShape: 'rounded' | 'square' | 'sharp' | 'bubble';\n    botAvatar: string;\n    chatIcon: string;\n    openingAnimation: 'fade' | 'slide' | 'bounce' | 'scale';\n    messageAnimation: 'fade' | 'slide' | 'bounce' | 'typing';\n    animationSpeed: number;\n    language: string;\n    integrations: {\n      website: boolean;\n      mobileApp: boolean;\n      facebook: boolean;\n      twitter: boolean;\n      whatsapp: boolean;\n      telegram: boolean;\n    };\n  };\n  onChange: (config: any) => void;\n}\n\nconst languages = [\n  { code: 'en', name: 'English' },\n  { code: 'es', name: 'Spanish' },\n  { code: 'fr', name: 'French' },\n  { code: 'de', name: 'German' }\n];\n\nconst positions = [\n  { value: 'bottom-right', label: 'Bottom Right' },\n  { value: 'bottom-left', label: 'Bottom Left' },\n  { value: 'center', label: 'Center' }\n];\n\nconst deviceSizes = [\n  { value: 'mobile', label: 'Mobile' },\n  { value: 'tablet', label: 'Tablet' },\n  { value: 'desktop', label: 'Desktop' }\n];\n\nconst bubbleShapes = [\n  { value: 'rounded', label: 'Rounded' },\n  { value: 'square', label: 'Square' },\n  { value: 'sharp', label: 'Sharp' },\n  { value: 'bubble', label: 'Bubble' }\n];\n\nconst animations = [\n  { value: 'fade', label: 'Fade' },\n  { value: 'slide', label: 'Slide' },\n  { value: 'bounce', label: 'Bounce' },\n  { value: 'scale', label: 'Scale' },\n  { value: 'typing', label: 'Typing' }\n];\n\nconst ChatbotCustomizer: React.FC<ChatbotCustomizerProps> = ({ config: initialConfig, onChange }) => {\n  const defaultWelcomeMessage = \"Hi! How can I help you today?\";\n  const DEFAULT_BOT_AVATAR = '/assets/default-bot-avatar.png';\n  const DEFAULT_CHAT_ICON = `<svg class=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z\"></path>\n  </svg>`;\n  \n  const [config, setConfig] = useState({\n    ...initialConfig,\n    welcomeMessage: defaultWelcomeMessage,\n    botAvatar: initialConfig.botAvatar || DEFAULT_BOT_AVATAR,\n    chatIcon: initialConfig.chatIcon || DEFAULT_CHAT_ICON\n  });\n\n  const [history, setHistory] = useState<any[]>([config]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isDraft, setIsDraft] = useState(false);\n  const [previewMessage, setPreviewMessage] = useState(defaultWelcomeMessage);\n\n  const handleChange = (field: string, value: any) => {\n    const newConfig = {\n      ...config,\n      [field]: value\n    };\n    \n    // Aggiorna il preview message quando cambia il welcome message\n    if (field === 'welcomeMessage') {\n      setPreviewMessage(value || defaultWelcomeMessage);\n    }\n    \n    setConfig(newConfig);\n    onChange(newConfig);\n    setHistory(prev => [...prev.slice(0, currentIndex + 1), newConfig]);\n    setCurrentIndex(prev => prev + 1);\n    setIsDraft(true);\n  };\n\n  const handleColorsChange = (colors: ColorConfig) => {\n    const newConfig = {\n      ...config,\n      colors\n    };\n    onChange(newConfig);\n    setHistory(prev => [...prev.slice(0, currentIndex + 1), newConfig]);\n    setCurrentIndex(prev => prev + 1);\n    setIsDraft(true);\n  };\n\n  const handleFontChange = (font: typeof config.font) => {\n    const newConfig = {\n      ...config,\n      font\n    };\n    onChange(newConfig);\n    setHistory(prev => [...prev.slice(0, currentIndex + 1), newConfig]);\n    setCurrentIndex(prev => prev + 1);\n    setIsDraft(true);\n  };\n\n  const handleUndo = () => {\n    if (currentIndex > 0) {\n      setCurrentIndex(prev => prev - 1);\n      onChange(history[currentIndex - 1]);\n      setIsDraft(true);\n    }\n  };\n\n  const handleRedo = () => {\n    if (currentIndex < history.length - 1) {\n      setCurrentIndex(prev => prev + 1);\n      onChange(history[currentIndex + 1]);\n      setIsDraft(true);\n    }\n  };\n\n  const handleSaveDraft = () => {\n    localStorage.setItem('chatbot-draft', JSON.stringify(config));\n    setIsDraft(false);\n  };\n\n  const handleSave = () => {\n    localStorage.setItem('chatbot-config', JSON.stringify(config));\n    setIsDraft(false);\n  };\n\n  const handleAvatarUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        handleChange('botAvatar', event.target?.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleIconUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        handleChange('chatIcon', event.target?.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  return (\n    <div className=\"flex gap-6 p-6 min-h-screen bg-gray-50\">\n      {/* Left Panel - Basic Settings & Customization */}\n      <div className=\"w-1/2 space-y-6\">\n        {/* Basic Settings */}\n        <section className=\"bg-white rounded-lg p-6 shadow-sm\">\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Basic Settings</h3>\n            <p className=\"text-sm text-gray-500\">Configure your chatbot's basic information.</p>\n          </div>\n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Chatbot Name</label>\n              <Input\n                type=\"text\"\n                value={config.name}\n                onChange={(e) => handleChange('name', e.target.value)}\n                placeholder=\"Enter chatbot name\"\n                className=\"w-full\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Welcome Message</label>\n              <div className=\"space-y-2\">\n                <textarea\n                  value={config.welcomeMessage}\n                  onChange={(e) => handleChange('welcomeMessage', e.target.value || defaultWelcomeMessage)}\n                  placeholder={defaultWelcomeMessage}\n                  className=\"w-full min-h-[80px] rounded-md border border-gray-300 px-3 py-2 text-sm text-gray-900 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n                {config.welcomeMessage !== defaultWelcomeMessage && (\n                  <button\n                    onClick={() => handleChange('welcomeMessage', defaultWelcomeMessage)}\n                    className=\"text-sm text-blue-600 hover:text-blue-700 flex items-center gap-1\"\n                  >\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                    </svg>\n                    Reset to default message\n                  </button>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Bot Avatar</label>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center\">\n                  {config.botAvatar ? (\n                    <img\n                      src={config.botAvatar}\n                      alt=\"Bot Avatar\"\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <span className=\"text-2xl text-gray-400\">{config.name.charAt(0)}</span>\n                  )}\n                </div>\n                <div className=\"flex space-x-2\">\n                  <label className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 cursor-pointer\">\n                    <span>Upload</span>\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleAvatarUpload}\n                      className=\"hidden\"\n                    />\n                  </label>\n                  {config.botAvatar && config.botAvatar !== DEFAULT_BOT_AVATAR && (\n                    <button\n                      onClick={() => handleChange('botAvatar', DEFAULT_BOT_AVATAR)}\n                      className=\"px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 flex items-center gap-1\"\n                    >\n                      <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                      </svg>\n                      Reset to default\n                    </button>\n                  )}\n                </div>\n              </div>\n              <p className=\"mt-1 text-xs text-gray-500\">Recommended: 256×256px PNG or JPG</p>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Chat Icon</label>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center\">\n                  {config.chatIcon.startsWith('<svg') ? (\n                    <div dangerouslySetInnerHTML={{ __html: config.chatIcon }} className=\"w-8 h-8 text-blue-600\" />\n                  ) : (\n                    <img\n                      src={config.chatIcon}\n                      alt=\"Chat Icon\"\n                      className=\"w-full h-full object-cover\"\n                    />\n                  )}\n                </div>\n                <div className=\"flex space-x-2\">\n                  <label className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 cursor-pointer\">\n                    <span>Upload</span>\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleIconUpload}\n                      className=\"hidden\"\n                    />\n                  </label>\n                  {config.chatIcon && config.chatIcon !== DEFAULT_CHAT_ICON && (\n                    <button\n                      onClick={() => handleChange('chatIcon', DEFAULT_CHAT_ICON)}\n                      className=\"px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 flex items-center gap-1\"\n                    >\n                      <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                      </svg>\n                      Reset to default\n                    </button>\n                  )}\n                </div>\n              </div>\n              <p className=\"mt-1 text-xs text-gray-500\">Recommended: 128×128px PNG or SVG</p>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Language</label>\n              <select\n                value={config.language}\n                onChange={(e) => handleChange('language', e.target.value)}\n                className=\"w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                {languages.map((lang) => (\n                  <option key={lang.code} value={lang.code}>{lang.name}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </section>\n\n        {/* Appearance */}\n        <section className=\"bg-white rounded-lg p-6 shadow-sm\">\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Appearance</h3>\n            <p className=\"text-sm text-gray-500\">Customize how your chatbot looks.</p>\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Theme</label>\n              <select\n                value={config.theme}\n                onChange={(e) => handleChange('theme', e.target.value)}\n                className=\"w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                <option value=\"light\">Light</option>\n                <option value=\"dark\">Dark</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Bubble Shape</label>\n              <select\n                value={config.bubbleShape}\n                onChange={(e) => handleChange('bubbleShape', e.target.value)}\n                className=\"w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                {bubbleShapes.map((shape) => (\n                  <option key={shape.value} value={shape.value}>{shape.label}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </section>\n\n        {/* Colors */}\n        <section className=\"bg-white rounded-lg p-6 shadow-sm\">\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Colors</h3>\n            <p className=\"text-sm text-gray-500\">Choose your chatbot's color scheme.</p>\n          </div>\n          <ColorPicker colors={config.colors} onChange={handleColorsChange} />\n        </section>\n      </div>\n\n      {/* Right Panel - Preview & Settings */}\n      <div className=\"w-1/2 space-y-6\">\n        {/* Top Controls */}\n        <div className=\"flex justify-between items-center bg-white rounded-lg p-3 shadow-sm\">\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={handleUndo}\n              disabled={currentIndex === 0}\n              className=\"p-2 text-gray-600 hover:text-gray-900 disabled:opacity-50\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n              </svg>\n            </button>\n            <button\n              onClick={handleRedo}\n              disabled={currentIndex === history.length - 1}\n              className=\"p-2 text-gray-600 hover:text-gray-900 disabled:opacity-50\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M14 5l7 7m0 0l-7 7m7-7H3\" />\n              </svg>\n            </button>\n          </div>\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={handleSaveDraft}\n              className=\"px-4 py-2 text-sm text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\n            >\n              Save Draft\n            </button>\n            <button\n              onClick={handleSave}\n              className=\"px-4 py-2 text-sm text-white bg-blue-600 rounded-md hover:bg-blue-700\"\n            >\n              Save\n            </button>\n          </div>\n        </div>\n\n        {/* Preview Settings */}\n        <section className=\"bg-white rounded-lg p-6 shadow-sm\">\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Preview Settings</h3>\n            <p className=\"text-sm text-gray-500\">Adjust how you view the preview</p>\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Device Size</label>\n              <select\n                value={config.deviceSize}\n                onChange={(e) => handleChange('deviceSize', e.target.value)}\n                className=\"w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                {deviceSizes.map((size) => (\n                  <option key={size.value} value={size.value}>{size.label}</option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Position</label>\n              <select\n                value={config.position}\n                onChange={(e) => handleChange('position', e.target.value)}\n                className=\"w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                {positions.map((pos) => (\n                  <option key={pos.value} value={pos.value}>{pos.label}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </section>\n\n        {/* Live Preview */}\n        <section className=\"bg-white rounded-lg p-6 shadow-sm\">\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Live Preview</h3>\n            <p className=\"text-sm text-gray-500\">See how your chatbot will appear to users</p>\n          </div>\n          <div className=\"relative h-[500px] bg-gray-50 rounded-lg border border-gray-200\">\n            {/* Chat Preview Component */}\n            <div className=\"absolute bottom-4 right-4 w-[300px]\">\n              <div className=\"bg-blue-600 text-white rounded-t-lg p-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 bg-white rounded-full mr-3\"></div>\n                  <div>\n                    <div className=\"font-medium\">{config.name}</div>\n                    <div className=\"text-xs text-blue-200\">● Online</div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"bg-white rounded-b-lg shadow-lg p-4 space-y-4\">\n                <div className=\"flex items-start space-x-2\">\n                  <div className=\"w-8 h-8 bg-gray-200 rounded-full flex-shrink-0\"></div>\n                  <div className=\"bg-gray-100 rounded-lg p-3 max-w-[80%]\">\n                    <p className=\"text-sm text-gray-800\">{previewMessage}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-2 justify-end\">\n                  <div className=\"bg-blue-600 text-white rounded-lg p-3 max-w-[80%]\">\n                    <p className=\"text-sm\">Hi! I need help with my order.</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatbotCustomizer; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/ChatbotEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/ColorPicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/FontCustomizer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/Input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/Modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/Skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/ThemeMarketplace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/Toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/backup/Button.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/backup/Card.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/backup/EmptyState.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/backup/Input.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/backup/Loader.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/backup/Modal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/design-system/Button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":207,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":207,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { forwardRef } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../../lib/utils';\nimport { Slot } from '@radix-ui/react-slot';\nimport { LoaderIcon } from 'lucide-react';\n\nconst buttonVariants = cva(\n  [\n    // Base styles\n    'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium',\n    'transition-all duration-200 ease-in-out',\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n    'disabled:pointer-events-none disabled:opacity-50',\n    'relative overflow-hidden',\n    // Smooth hover and active transitions\n    'transform-gpu will-change-transform',\n    'active:scale-95 hover:scale-105 transition-transform duration-150',\n  ],\n  {\n    variants: {\n      variant: {\n        default: [\n          'bg-primary text-primary-foreground shadow-sm',\n          'hover:bg-primary/90 hover:shadow-md',\n          'active:bg-primary/95',\n          'focus-visible:ring-primary/50',\n        ],\n        destructive: [\n          'bg-destructive text-destructive-foreground shadow-sm',\n          'hover:bg-destructive/90 hover:shadow-md',\n          'active:bg-destructive/95',\n          'focus-visible:ring-destructive/50',\n        ],\n        outline: [\n          'border border-input bg-background shadow-sm',\n          'hover:bg-accent hover:text-accent-foreground hover:border-accent',\n          'active:bg-accent/50',\n          'focus-visible:ring-primary/50',\n        ],\n        secondary: [\n          'bg-secondary text-secondary-foreground shadow-sm',\n          'hover:bg-secondary/80 hover:shadow-md',\n          'active:bg-secondary/90',\n          'focus-visible:ring-secondary/50',\n        ],\n        ghost: [\n          'hover:bg-accent hover:text-accent-foreground',\n          'active:bg-accent/50',\n          'focus-visible:ring-primary/50',\n        ],\n        link: [\n          'text-primary underline-offset-4',\n          'hover:underline focus-visible:ring-primary/50',\n          'active:text-primary/80',\n        ],\n        gradient: [\n          'bg-gradient-to-r from-primary to-primary/80 text-primary-foreground shadow-lg',\n          'hover:from-primary/90 hover:to-primary/70 hover:shadow-xl',\n          'active:from-primary/95 active:to-primary/75',\n          'focus-visible:ring-primary/50',\n        ],\n        premium: [\n          'bg-gradient-to-r from-amber-400 via-yellow-500 to-amber-600 text-amber-950 shadow-lg',\n          'hover:from-amber-300 hover:via-yellow-400 hover:to-amber-500 hover:shadow-xl',\n          'active:from-amber-500 active:via-yellow-600 active:to-amber-700',\n          'focus-visible:ring-amber-500/50',\n        ],\n      },\n      size: {\n        default: 'h-9 px-4 py-2',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-10 rounded-md px-8',\n        xl: 'h-12 rounded-lg px-10 text-base',\n        icon: 'h-9 w-9',\n        'icon-sm': 'h-8 w-8',\n        'icon-lg': 'h-10 w-10',\n        'icon-xl': 'h-12 w-12',\n      },\n      fullWidth: {\n        true: 'w-full',\n        false: '',\n      },\n      rounded: {\n        default: '',\n        full: 'rounded-full',\n        none: 'rounded-none',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n      fullWidth: false,\n      rounded: 'default',\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  loading?: boolean;\n  loadingText?: string;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  tooltip?: string;\n}\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      fullWidth,\n      rounded,\n      asChild = false,\n      loading = false,\n      loadingText,\n      leftIcon,\n      rightIcon,\n      children,\n      disabled,\n      tooltip,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : 'button';\n    const isDisabled = disabled || loading;\n\n    const buttonContent = (\n      <>\n        {/* Loading spinner */}\n        {loading && (\n          <LoaderIcon className=\"mr-2 h-4 w-4 animate-spin\" aria-hidden=\"true\" />\n        )}\n        \n        {/* Left icon */}\n        {!loading && leftIcon && (\n          <span className=\"mr-2 flex-shrink-0\" aria-hidden=\"true\">\n            {leftIcon}\n          </span>\n        )}\n        \n        {/* Button text */}\n        <span className={loading ? 'opacity-70' : ''}>\n          {loading && loadingText ? loadingText : children}\n        </span>\n        \n        {/* Right icon */}\n        {!loading && rightIcon && (\n          <span className=\"ml-2 flex-shrink-0\" aria-hidden=\"true\">\n            {rightIcon}\n          </span>\n        )}\n        \n        {/* Ripple effect */}\n        <span\n          className=\"absolute inset-0 overflow-hidden rounded-inherit\"\n          aria-hidden=\"true\"\n        >\n          <span className=\"absolute inset-0 rounded-inherit bg-white/20 opacity-0 transition-opacity duration-300 hover:opacity-100\" />\n        </span>\n      </>\n    );\n\n    const buttonElement = (\n      <Comp\n        className={cn(buttonVariants({ variant, size, fullWidth, rounded, className }))}\n        ref={ref}\n        disabled={isDisabled}\n        aria-disabled={isDisabled}\n        aria-describedby={loading ? 'button-loading' : undefined}\n        {...props}\n      >\n        {buttonContent}\n        {loading && (\n          <span id=\"button-loading\" className=\"sr-only\">\n            Loading...\n          </span>\n        )}\n      </Comp>\n    );\n\n    if (tooltip) {\n      return (\n        <div className=\"group relative\">\n          {buttonElement}\n          <div\n            role=\"tooltip\"\n            className=\"absolute bottom-full left-1/2 mb-2 hidden -translate-x-1/2 whitespace-nowrap rounded bg-gray-900 px-2 py-1 text-xs text-white group-hover:block dark:bg-gray-100 dark:text-gray-900\"\n          >\n            {tooltip}\n            <div className=\"absolute top-full left-1/2 -translate-x-1/2 border-4 border-transparent border-t-gray-900 dark:border-t-gray-100\" />\n          </div>\n        </div>\n      );\n    }\n\n    return buttonElement;\n  }\n);\n\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/design-system/Input.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":205,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":205,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { forwardRef, useState } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../../lib/utils';\nimport { EyeIcon, EyeOffIcon, AlertCircleIcon, CheckCircleIcon } from 'lucide-react';\n\nconst inputVariants = cva(\n  [\n    'flex w-full rounded-md border border-input bg-background px-3 py-2',\n    'text-sm ring-offset-background file:border-0 file:bg-transparent',\n    'file:text-sm file:font-medium placeholder:text-muted-foreground',\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n    'disabled:cursor-not-allowed disabled:opacity-50',\n    'transition-all duration-200 ease-in-out',\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'border-input focus-visible:ring-ring',\n        error: 'border-destructive focus-visible:ring-destructive/50 bg-destructive/5',\n        success: 'border-green-500 focus-visible:ring-green-500/50 bg-green-50/50',\n        warning: 'border-yellow-500 focus-visible:ring-yellow-500/50 bg-yellow-50/50',\n      },\n      size: {\n        default: 'h-10 px-3 py-2',\n        sm: 'h-8 px-2 py-1 text-xs',\n        lg: 'h-12 px-4 py-3 text-base',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\nexport interface InputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'>,\n    VariantProps<typeof inputVariants> {\n  label?: string;\n  error?: string;\n  success?: string;\n  warning?: string;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  showPasswordToggle?: boolean;\n  helperText?: string;\n  required?: boolean;\n  optional?: boolean;\n}\n\nconst Input = forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      type,\n      label,\n      error,\n      success,\n      warning,\n      leftIcon,\n      rightIcon,\n      showPasswordToggle,\n      helperText,\n      required,\n      optional,\n      id,\n      ...props\n    },\n    ref\n  ) => {\n    const [showPassword, setShowPassword] = useState(false);\n    const [isFocused, setIsFocused] = useState(false);\n\n    // Determine variant based on validation state\n    const effectiveVariant = error\n      ? 'error'\n      : success\n      ? 'success'\n      : warning\n      ? 'warning'\n      : variant;\n\n    // Generate unique ID if not provided\n    const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;\n    const helperTextId = `${inputId}-helper`;\n    const errorId = `${inputId}-error`;\n\n    const inputType = showPasswordToggle && type === 'password' \n      ? (showPassword ? 'text' : 'password')\n      : type;\n\n    const hasMessage = error || success || warning || helperText;\n\n    return (\n      <div className=\"space-y-2\">\n        {/* Label */}\n        {label && (\n          <label\n            htmlFor={inputId}\n            className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n          >\n            {label}\n            {required && <span className=\"ml-1 text-destructive\">*</span>}\n            {optional && <span className=\"ml-1 text-muted-foreground\">(optional)</span>}\n          </label>\n        )}\n\n        {/* Input container */}\n        <div className=\"relative\">\n          {/* Left icon */}\n          {leftIcon && (\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n              {leftIcon}\n            </div>\n          )}\n\n          {/* Input */}\n          <input\n            type={inputType}\n            className={cn(\n              inputVariants({ variant: effectiveVariant, size }),\n              leftIcon && 'pl-10',\n              (rightIcon || showPasswordToggle || effectiveVariant === 'error' || effectiveVariant === 'success' || effectiveVariant === 'warning') && 'pr-10',\n              isFocused && 'ring-2 ring-offset-2',\n              className\n            )}\n            ref={ref}\n            id={inputId}\n            aria-invalid={error ? 'true' : 'false'}\n            aria-describedby={\n              hasMessage ? (error ? errorId : helperTextId) : undefined\n            }\n            onFocus={(e) => {\n              setIsFocused(true);\n              props.onFocus?.(e);\n            }}\n            onBlur={(e) => {\n              setIsFocused(false);\n              props.onBlur?.(e);\n            }}\n            {...props}\n          />\n\n          {/* Right side icons */}\n          <div className=\"absolute right-3 top-1/2 -translate-y-1/2 flex items-center space-x-1\">\n            {/* Validation icon */}\n            {effectiveVariant === 'error' && (\n              <AlertCircleIcon className=\"h-4 w-4 text-destructive\" aria-hidden=\"true\" />\n            )}\n            {effectiveVariant === 'success' && (\n              <CheckCircleIcon className=\"h-4 w-4 text-green-500\" aria-hidden=\"true\" />\n            )}\n            {effectiveVariant === 'warning' && (\n              <AlertCircleIcon className=\"h-4 w-4 text-yellow-500\" aria-hidden=\"true\" />\n            )}\n\n            {/* Password toggle */}\n            {showPasswordToggle && type === 'password' && (\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"text-muted-foreground hover:text-foreground focus:outline-none focus:text-foreground\"\n                aria-label={showPassword ? 'Hide password' : 'Show password'}\n              >\n                {showPassword ? (\n                  <EyeOffIcon className=\"h-4 w-4\" />\n                ) : (\n                  <EyeIcon className=\"h-4 w-4\" />\n                )}\n              </button>\n            )}\n\n            {/* Custom right icon */}\n            {rightIcon && !showPasswordToggle && (\n              <div className=\"text-muted-foreground\">{rightIcon}</div>\n            )}\n          </div>\n        </div>\n\n        {/* Helper text / Error message */}\n        {hasMessage && (\n          <p\n            id={error ? errorId : helperTextId}\n            className={cn(\n              'text-xs',\n              error && 'text-destructive',\n              success && 'text-green-600',\n              warning && 'text-yellow-600',\n              !error && !success && !warning && 'text-muted-foreground'\n            )}\n            role={error ? 'alert' : undefined}\n          >\n            {error || success || warning || helperText}\n          </p>\n        )}\n      </div>\n    );\n  }\n);\n\nInput.displayName = 'Input';\n\nexport { Input, inputVariants };","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/ui/design-system/ThemeProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":115,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":115,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\ntype Theme = 'dark' | 'light' | 'system';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  actualTheme: 'dark' | 'light';\n  toggleTheme: () => void;\n  isSystemTheme: boolean;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n}\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = 'system',\n  storageKey = 'ai-orchestrator-theme',\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== 'undefined') {\n      return (localStorage.getItem(storageKey) as Theme) || defaultTheme;\n    }\n    return defaultTheme;\n  });\n\n  const [systemTheme, setSystemTheme] = useState<'dark' | 'light'>('light');\n  const [mounted, setMounted] = useState(false);\n\n  // Listen to system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    setSystemTheme(mediaQuery.matches ? 'dark' : 'light');\n\n    const handleChange = (e: MediaQueryListEvent) => {\n      setSystemTheme(e.matches ? 'dark' : 'light');\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  // Handle theme changes\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem(storageKey, theme);\n    }\n\n    const actualTheme = theme === 'system' ? systemTheme : theme;\n    const root = window.document.documentElement;\n\n    // Remove previous theme classes\n    root.classList.remove('light', 'dark');\n    root.classList.add(actualTheme);\n\n    // Set data attribute for CSS custom properties\n    root.setAttribute('data-theme', actualTheme);\n\n    // Set color-scheme for native form elements\n    root.style.colorScheme = actualTheme;\n\n    // Update meta theme-color for mobile browsers\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\n    if (metaThemeColor) {\n      metaThemeColor.setAttribute(\n        'content',\n        actualTheme === 'dark' ? '#111827' : '#ffffff'\n      );\n    }\n  }, [theme, systemTheme, storageKey]);\n\n  // Set mounted state after hydration\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  const actualTheme = theme === 'system' ? systemTheme : theme;\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setTheme('dark');\n    } else if (theme === 'dark') {\n      setTheme('system');\n    } else {\n      setTheme('light');\n    }\n  };\n\n  const value: ThemeContextType = {\n    theme,\n    setTheme,\n    actualTheme,\n    toggleTheme,\n    isSystemTheme: theme === 'system',\n  };\n\n  // Prevent flash of incorrect theme\n  if (!mounted) {\n    return <div style={{ visibility: 'hidden' }}>{children}</div>;\n  }\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// Theme toggle component\nexport const ThemeToggle = ({ className }: { className?: string }) => {\n  const { theme, toggleTheme, actualTheme } = useTheme();\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className={`inline-flex items-center justify-center rounded-md p-2 transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring ${className}`}\n      aria-label={`Switch to ${\n        theme === 'light' ? 'dark' : theme === 'dark' ? 'system' : 'light'\n      } theme`}\n      title={`Current theme: ${theme}${theme === 'system' ? ` (${actualTheme})` : ''}`}\n    >\n      {theme === 'light' && (\n        <svg\n          className=\"h-5 w-5\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n          aria-hidden=\"true\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n          />\n        </svg>\n      )}\n      {theme === 'dark' && (\n        <svg\n          className=\"h-5 w-5\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n          aria-hidden=\"true\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\"\n          />\n        </svg>\n      )}\n      {theme === 'system' && (\n        <svg\n          className=\"h-5 w-5\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n          aria-hidden=\"true\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\n          />\n        </svg>\n      )}\n    </button>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/usage/UsageQuotaManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleRateLimitUpdate' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":91,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  Title,\n  Text,\n  Badge,\n  Button,\n  ProgressBar,\n  Callout,\n  Grid,\n  Col,\n  Metric,\n  TabGroup,\n  TabList,\n  Tab,\n  TabPanels,\n  TabPanel,\n  Table,\n  TableHead,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@tremor/react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\n\ninterface UsageQuota {\n  resourceName: string;\n  used: number;\n  limit: number;\n  unit: string;\n}\n\ninterface RateLimit {\n  endpoint: string;\n  requestsPerMinute: number;\n  burstLimit: number;\n}\n\nconst UsageQuotaManager: React.FC = () => {\n  const [quotas, setQuotas] = useState<UsageQuota[]>([\n    { resourceName: 'API Calls', used: 8500, limit: 10000, unit: 'calls' },\n    { resourceName: 'Storage', used: 4.2, limit: 5, unit: 'GB' },\n    { resourceName: 'Bandwidth', used: 80, limit: 100, unit: 'GB' },\n  ]);\n\n  const [rateLimits, setRateLimits] = useState<RateLimit[]>([\n    { endpoint: '/api/users', requestsPerMinute: 60, burstLimit: 100 },\n    { endpoint: '/api/data', requestsPerMinute: 30, burstLimit: 50 },\n  ]);\n\n  const [usageHistory] = useState([\n    { date: '2024-01', usage: 7500 },\n    { date: '2024-02', usage: 8200 },\n    { date: '2024-03', usage: 8500 },\n  ]);\n\n  const [isLive, setIsLive] = useState(true);\n\n  useEffect(() => {\n    if (isLive) {\n      const interval = setInterval(() => {\n        // Simulate real-time updates\n        setQuotas(current =>\n          current.map(quota => ({\n            ...quota,\n            used: Math.min(quota.limit, quota.used + Math.random() * 100)\n          }))\n        );\n      }, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [isLive]);\n\n  const handleQuotaAdjustment = (resourceName: string, newLimit: number) => {\n    setQuotas(quotas.map(quota =>\n      quota.resourceName === resourceName\n        ? { ...quota, limit: newLimit }\n        : quota\n    ));\n  };\n\n  const handleRateLimitUpdate = (endpoint: string, rpm: number, burst: number) => {\n    setRateLimits(rateLimits.map(limit =>\n      limit.endpoint === endpoint\n        ? { ...limit, requestsPerMinute: rpm, burstLimit: burst }\n        : limit\n    ));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <Title>Resource Usage & Quotas</Title>\n        <div className=\"space-x-2\">\n          <Button\n            size=\"sm\"\n            variant=\"secondary\"\n            onClick={() => setIsLive(!isLive)}\n            color={isLive ? \"red\" : \"blue\"}\n          >\n            {isLive ? 'Pause Updates' : 'Resume Updates'}\n          </Button>\n          <Badge color={isLive ? \"green\" : \"gray\"}>\n            {isLive ? 'Live' : 'Paused'}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Overview Cards */}\n      <Grid numItems={1} numItemsSm={2} numItemsLg={3} className=\"gap-6\">\n        {quotas.map((quota) => (\n          <Col key={quota.resourceName}>\n            <Card \n              decoration=\"top\" \n              decorationColor={quota.used / quota.limit > 0.9 ? \"red\" : \"blue\"}\n            >\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <Text>{quota.resourceName}</Text>\n                  <Metric>{`${quota.used.toFixed(1)} / ${quota.limit} ${quota.unit}`}</Metric>\n                </div>\n                <Badge color={quota.used / quota.limit > 0.9 ? \"red\" : \"blue\"}>\n                  {`${((quota.used / quota.limit) * 100).toFixed(1)}%`}\n                </Badge>\n              </div>\n              <div className=\"mt-4\">\n                <ProgressBar\n                  value={(quota.used / quota.limit) * 100}\n                  color={quota.used / quota.limit > 0.9 ? \"red\" : \"blue\"}\n                  className=\"mt-2\"\n                />\n              </div>\n              {quota.used / quota.limit > 0.9 && (\n                <Callout\n                  className=\"mt-4\"\n                  title={`Warning: ${quota.resourceName} usage is near limit`}\n                  color=\"red\"\n                />\n              )}\n            </Card>\n          </Col>\n        ))}\n      </Grid>\n\n      {/* Detailed Views */}\n      <Card>\n        <TabGroup>\n          <TabList>\n            <Tab>Usage Trends</Tab>\n            <Tab>Rate Limits</Tab>\n            <Tab>Settings</Tab>\n          </TabList>\n          \n          <TabPanels>\n            <TabPanel>\n              <div className=\"h-80 mt-4\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={usageHistory}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200\" />\n                    <XAxis \n                      dataKey=\"date\"\n                      className=\"text-sm text-gray-600\"\n                    />\n                    <YAxis \n                      className=\"text-sm text-gray-600\"\n                    />\n                    <Tooltip />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"usage\"\n                      stroke=\"#3b82f6\"\n                      strokeWidth={2}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </TabPanel>\n            \n            <TabPanel>\n              <div className=\"mt-4\">\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableHeaderCell>Endpoint</TableHeaderCell>\n                      <TableHeaderCell>Requests/Minute</TableHeaderCell>\n                      <TableHeaderCell>Burst Limit</TableHeaderCell>\n                      <TableHeaderCell>Actions</TableHeaderCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {rateLimits.map((limit) => (\n                      <TableRow key={limit.endpoint}>\n                        <TableCell>{limit.endpoint}</TableCell>\n                        <TableCell>{limit.requestsPerMinute}</TableCell>\n                        <TableCell>{limit.burstLimit}</TableCell>\n                        <TableCell>\n                          <Button\n                            size=\"xs\"\n                            variant=\"secondary\"\n                            onClick={() => {\n                              // Open edit modal\n                            }}\n                          >\n                            Edit\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </TabPanel>\n\n            <TabPanel>\n              <div className=\"mt-4 space-y-4\">\n                <Card>\n                  <Title>Quota Adjustment</Title>\n                  <Text className=\"mt-2\">Configure resource limits and thresholds</Text>\n                  <div className=\"mt-4\">\n                    {quotas.map((quota) => (\n                      <div key={quota.resourceName} className=\"flex items-center justify-between py-2\">\n                        <Text>{quota.resourceName}</Text>\n                        <div className=\"flex items-center space-x-2\">\n                          <Text>{quota.limit} {quota.unit}</Text>\n                          <Button\n                            size=\"xs\"\n                            variant=\"secondary\"\n                            onClick={() => handleQuotaAdjustment(quota.resourceName, quota.limit + 1000)}\n                          >\n                            Increase\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </Card>\n              </div>\n            </TabPanel>\n          </TabPanels>\n        </TabGroup>\n      </Card>\n    </div>\n  );\n};\n\nexport default UsageQuotaManager; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/workflows/WorkflowCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[126,129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[126,129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[189,192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[189,192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface WorkflowAction {\n  type: string;\n  message?: string;\n  delay?: number;\n  [key: string]: any;\n}\n\ninterface WorkflowCondition {\n  type: string;\n  value: any;\n  operator?: string;\n}\n\ninterface WorkflowData {\n  id?: string;\n  title: string;\n  description: string;\n  isActive: boolean;\n  triggerType: string;\n  triggerValue?: number;\n  conditions: WorkflowCondition[];\n  actions: WorkflowAction[];\n}\n\ninterface WorkflowCardProps {\n  workflow: WorkflowData;\n  onEdit: (workflow: WorkflowData) => void;\n  onDelete: (workflowId: string) => void;\n  onToggle: (workflowId: string, isActive: boolean) => void;\n}\n\nconst WorkflowCard: React.FC<WorkflowCardProps> = ({\n  workflow,\n  onEdit,\n  onDelete,\n  onToggle\n}) => {\n  const getTriggerIcon = (triggerType: string) => {\n    switch (triggerType) {\n      case 'first_visit':\n        return '👋';\n      case 'time_on_page':\n        return '⏱️';\n      case 'scroll_depth':\n        return '📜';\n      case 'exit_intent':\n        return '🚪';\n      case 'chat_started':\n        return '💬';\n      case 'message_received':\n        return '📨';\n      case 'product_viewed':\n        return '👁️';\n      case 'cart_abandoned':\n        return '🛒';\n      case 'purchase_completed':\n        return '✅';\n      default:\n        return '⚡';\n    }\n  };\n\n  const getTriggerLabel = (triggerType: string) => {\n    switch (triggerType) {\n      case 'first_visit':\n        return 'First Visit';\n      case 'time_on_page':\n        return 'Time on Page';\n      case 'scroll_depth':\n        return 'Scroll Depth';\n      case 'exit_intent':\n        return 'Exit Intent';\n      case 'chat_started':\n        return 'Chat Started';\n      case 'message_received':\n        return 'Message Received';\n      case 'product_viewed':\n        return 'Product Viewed';\n      case 'cart_abandoned':\n        return 'Cart Abandoned';\n      case 'purchase_completed':\n        return 'Purchase Completed';\n      default:\n        return triggerType;\n    }\n  };\n\n  const getActionSummary = (actions: WorkflowAction[]) => {\n    if (actions.length === 0) return 'No actions';\n    \n    const actionTypes = actions.map(action => {\n      switch (action.type) {\n        case 'send_message':\n          return 'Send Message';\n        case 'ask_email':\n          return 'Ask for Email';\n        case 'show_form':\n          return 'Show Form';\n        case 'redirect':\n          return 'Redirect';\n        case 'tag_conversation':\n          return 'Tag Conversation';\n        case 'assign_agent':\n          return 'Assign Agent';\n        case 'show_product':\n          return 'Show Product';\n        case 'offer_discount':\n          return 'Offer Discount';\n        case 'schedule_followup':\n          return 'Schedule Follow-up';\n        default:\n          return action.type;\n      }\n    });\n    \n    return actionTypes.join(', ');\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow\">\n      <div className=\"p-6\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"flex-shrink-0\">\n              <span className=\"text-2xl\">{getTriggerIcon(workflow.triggerType)}</span>\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center space-x-2\">\n                <h3 className=\"text-lg font-medium text-gray-900 truncate\">\n                  {workflow.title}\n                </h3>\n                <span\n                  className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                    workflow.isActive\n                      ? 'bg-green-100 text-green-800'\n                      : 'bg-gray-100 text-gray-800'\n                  }`}\n                >\n                  {workflow.isActive ? 'Active' : 'Inactive'}\n                </span>\n              </div>\n              <p className=\"mt-1 text-sm text-gray-500 line-clamp-2\">\n                {workflow.description || 'No description provided'}\n              </p>\n              <div className=\"mt-3 flex items-center space-x-4 text-sm text-gray-500\">\n                <div className=\"flex items-center space-x-1\">\n                  <span className=\"font-medium\">Trigger:</span>\n                  <span>{getTriggerLabel(workflow.triggerType)}</span>\n                  {workflow.triggerValue && (\n                    <span className=\"text-gray-400\">\n                      ({workflow.triggerValue}\n                      {workflow.triggerType === 'time_on_page' ? 's' : \n                       workflow.triggerType === 'scroll_depth' ? '%' : ''})\n                    </span>\n                  )}\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <span className=\"font-medium\">Actions:</span>\n                  <span className=\"truncate max-w-32\">\n                    {getActionSummary(workflow.actions)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => onToggle(workflow.id || '', !workflow.isActive)}\n              className={`relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                workflow.isActive ? 'bg-blue-600' : 'bg-gray-200'\n              }`}\n            >\n              <span\n                className={`pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out ${\n                  workflow.isActive ? 'translate-x-5' : 'translate-x-0'\n                }`}\n              />\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"mt-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n            <span>Created {workflow.id ? 'recently' : 'just now'}</span>\n            {workflow.actions.length > 0 && (\n              <span>• {workflow.actions.length} action{workflow.actions.length !== 1 ? 's' : ''}</span>\n            )}\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => onEdit(workflow)}\n              className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n            >\n              <svg className=\"w-4 h-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n              </svg>\n              Edit\n            </button>\n            <button\n              onClick={() => onDelete(workflow.id || '')}\n              className=\"inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500\"\n            >\n              <svg className=\"w-4 h-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n              </svg>\n              Delete\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WorkflowCard; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/workflows/WorkflowEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[444,447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[444,447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[507,510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[507,510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4005,4008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4005,4008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4323,4326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4323,4326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"../ui/Card\";\nimport { Button } from \"../ui/Button\";\nimport { Badge } from \"../ui/Badge\";\nimport { \n  Plus, \n  Trash2, \n  Save, \n  X, \n  Zap, \n  MessageSquare, \n  Settings,\n  Bot,\n  Play,\n  Pause\n} from 'lucide-react';\n\ninterface WorkflowAction {\n  type: string;\n  message?: string;\n  delay?: number;\n  [key: string]: any;\n}\n\ninterface WorkflowCondition {\n  type: string;\n  value: any;\n  operator?: string;\n}\n\ninterface WorkflowData {\n  id?: string;\n  title: string;\n  description: string;\n  isActive: boolean;\n  triggerType: string;\n  triggerValue?: number;\n  conditions: WorkflowCondition[];\n  actions: WorkflowAction[];\n  chatbotId?: string;\n  executionCount: number;\n  lastExecuted?: string;\n  createdAt: string;\n}\n\ninterface Chatbot {\n  id: string;\n  name: string;\n  isActive: boolean;\n}\n\ninterface WorkflowEditorProps {\n  workflow?: WorkflowData;\n  chatbots?: Chatbot[];\n  onSave: (workflow: WorkflowData) => void;\n  onCancel: () => void;\n  onDelete?: () => void;\n}\n\nconst TRIGGER_TYPES = [\n  { id: 'first_visit', label: 'First Visit', description: 'Trigger when user visits for the first time' },\n  { id: 'time_on_page', label: 'Time on Page', description: 'Trigger after user spends time on page' },\n  { id: 'scroll_depth', label: 'Scroll Depth', description: 'Trigger when user scrolls to certain depth' },\n  { id: 'exit_intent', label: 'Exit Intent', description: 'Trigger when user tries to leave the page' },\n  { id: 'chat_started', label: 'Chat Started', description: 'Trigger when user starts a conversation' },\n  { id: 'message_received', label: 'Message Received', description: 'Trigger when user sends a message' },\n  { id: 'product_viewed', label: 'Product Viewed', description: 'Trigger when user views a product' },\n  { id: 'cart_abandoned', label: 'Cart Abandoned', description: 'Trigger when user abandons their cart' },\n  { id: 'purchase_completed', label: 'Purchase Completed', description: 'Trigger when user completes a purchase' },\n  { id: 'support_request', label: 'Support Request', description: 'Trigger when user asks for support' }\n];\n\nconst ACTION_TYPES = [\n  { id: 'send_message', label: 'Send Message', description: 'Send a message to the user' },\n  { id: 'ask_email', label: 'Ask for Email', description: 'Request user\\'s email address' },\n  { id: 'show_form', label: 'Show Form', description: 'Display a form to collect information' },\n  { id: 'redirect', label: 'Redirect User', description: 'Redirect user to another page' },\n  { id: 'tag_conversation', label: 'Tag Conversation', description: 'Add tags to the conversation' },\n  { id: 'assign_agent', label: 'Assign to Agent', description: 'Transfer conversation to human agent' },\n  { id: 'show_product', label: 'Show Product', description: 'Display product information' },\n  { id: 'offer_discount', label: 'Offer Discount', description: 'Present a discount code' },\n  { id: 'schedule_followup', label: 'Schedule Follow-up', description: 'Schedule a follow-up message' },\n  { id: 'delay', label: 'Delay', description: 'Wait before next action' },\n  { id: 'show_menu', label: 'Show Menu', description: 'Display interactive menu options' },\n  { id: 'create_ticket', label: 'Create Ticket', description: 'Create a support ticket' },\n  { id: 'notify_agent', label: 'Notify Agent', description: 'Send notification to agent' }\n];\n\nconst WorkflowEditor: React.FC<WorkflowEditorProps> = ({\n  workflow,\n  chatbots = [],\n  onSave,\n  onCancel,\n  onDelete\n}) => {\n  const [formData, setFormData] = useState<WorkflowData>({\n    title: '',\n    description: '',\n    isActive: false,\n    triggerType: 'first_visit',\n    chatbotId: chatbots.length > 0 ? chatbots[0].id : '',\n    conditions: [],\n    actions: [],\n    executionCount: 0,\n    createdAt: ''\n  });\n\n  useEffect(() => {\n    if (workflow) {\n      setFormData(workflow);\n    }\n  }, [workflow]);\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleAddAction = () => {\n    setFormData(prev => ({\n      ...prev,\n      actions: [...prev.actions, { type: 'send_message', message: '' }]\n    }));\n  };\n\n  const handleActionChange = (index: number, field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      actions: prev.actions.map((action, i) =>\n        i === index ? { ...action, [field]: value } : action\n      )\n    }));\n  };\n\n  const handleRemoveAction = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      actions: prev.actions.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSave(formData);\n  };\n\n  const renderActionFields = (action: WorkflowAction, index: number) => {\n    switch (action.type) {\n      case 'send_message':\n        return (\n          <textarea\n            value={action.message || ''}\n            onChange={(e) => handleActionChange(index, 'message', e.target.value)}\n            placeholder=\"Inserisci il messaggio da inviare...\"\n            className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500 focus:outline-none resize-vertical shadow-sm\"\n            rows={3}\n          />\n        );\n      case 'ask_email':\n        return (\n          <textarea\n            value={action.message || ''}\n            onChange={(e) => handleActionChange(index, 'message', e.target.value)}\n            placeholder=\"Inserisci il messaggio per richiedere l'email...\"\n            className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500 focus:outline-none resize-vertical shadow-sm\"\n            rows={2}\n          />\n        );\n      case 'show_form':\n        return (\n          <div className=\"space-y-2\">\n            <input\n              type=\"text\"\n              value={action.formTitle || ''}\n              onChange={(e) => handleActionChange(index, 'formTitle', e.target.value)}\n              placeholder=\"Titolo del modulo\"\n              className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500 focus:outline-none shadow-sm\"\n            />\n            <textarea\n              value={action.formFields || ''}\n              onChange={(e) => handleActionChange(index, 'formFields', e.target.value)}\n              placeholder=\"Campi del modulo (separati da virgola)\"\n              className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500 focus:outline-none resize-vertical shadow-sm\"\n              rows={2}\n            />\n          </div>\n        );\n      case 'redirect':\n        return (\n          <input\n            type=\"url\"\n            value={action.url || ''}\n            onChange={(e) => handleActionChange(index, 'url', e.target.value)}\n            placeholder=\"Enter URL to redirect to...\"\n            className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500 focus:outline-none\"\n          />\n        );\n      case 'show_product':\n        return (\n          <input\n            type=\"text\"\n            value={action.productId || ''}\n            onChange={(e) => handleActionChange(index, 'productId', e.target.value)}\n            placeholder=\"Enter product ID or handle...\"\n            className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500 focus:outline-none\"\n          />\n        );\n      case 'offer_discount':\n        return (\n          <div className=\"space-y-2\">\n            <input\n              type=\"text\"\n              value={action.discountCode || ''}\n              onChange={(e) => handleActionChange(index, 'discountCode', e.target.value)}\n              placeholder=\"Discount code\"\n              className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500 focus:outline-none\"\n            />\n            <textarea\n              value={action.discountMessage || ''}\n              onChange={(e) => handleActionChange(index, 'discountMessage', e.target.value)}\n              placeholder=\"Discount message\"\n              className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500 focus:outline-none resize-vertical\"\n              rows={2}\n            />\n          </div>\n        );\n      case 'delay':\n        return (\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"number\"\n              value={action.delay || 1000}\n              onChange={(e) => handleActionChange(index, 'delay', parseInt(e.target.value))}\n              placeholder=\"Delay in milliseconds\"\n              className=\"block w-32 rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500 focus:outline-none\"\n            />\n            <span className=\"text-sm text-gray-500\">milliseconds</span>\n          </div>\n        );\n      case 'show_menu':\n        return (\n          <textarea\n            value={action.options ? action.options.join(', ') : ''}\n            onChange={(e) => handleActionChange(index, 'options', e.target.value.split(',').map(s => s.trim()))}\n            placeholder=\"Menu options (comma separated)\"\n            className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500 focus:outline-none resize-vertical\"\n            rows={2}\n          />\n        );\n      case 'create_ticket':\n        return (\n          <div className=\"space-y-2\">\n            <select\n              value={action.priority || 'medium'}\n              onChange={(e) => handleActionChange(index, 'priority', e.target.value)}\n              className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 focus:border-blue-500 focus:ring-blue-500 focus:outline-none\"\n            >\n              <option value=\"low\">Low Priority</option>\n              <option value=\"medium\">Medium Priority</option>\n              <option value=\"high\">High Priority</option>\n            </select>\n            <input\n              type=\"text\"\n              value={action.category || ''}\n              onChange={(e) => handleActionChange(index, 'category', e.target.value)}\n              placeholder=\"Ticket category\"\n              className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500 focus:outline-none\"\n            />\n          </div>\n        );\n      case 'notify_agent':\n        return (\n          <textarea\n            value={action.message || ''}\n            onChange={(e) => handleActionChange(index, 'message', e.target.value)}\n            placeholder=\"Notification message for agent\"\n            className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500 focus:outline-none resize-vertical\"\n            rows={2}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Basic Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-gray-900\">\n            <Bot className=\"h-5 w-5 mr-2\" />\n            Informazioni Base\n          </CardTitle>\n          <CardDescription className=\"text-gray-700\">\n            Configura i dettagli base del tuo workflow\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-800 mb-1\">Titolo Workflow</label>\n            <input\n              type=\"text\"\n              value={formData.title}\n              onChange={(e) => handleInputChange('title', e.target.value)}\n              placeholder=\"Inserisci il titolo del workflow...\"\n              className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500 focus:outline-none shadow-sm\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-800 mb-1\">Descrizione</label>\n            <textarea\n              value={formData.description}\n              onChange={(e) => handleInputChange('description', e.target.value)}\n              placeholder=\"Descrivi cosa fa questo workflow...\"\n              className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500 focus:outline-none resize-vertical shadow-sm\"\n              rows={3}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-800 mb-1\">Chatbot</label>\n              <select\n                value={formData.chatbotId || ''}\n                onChange={(e) => handleInputChange('chatbotId', e.target.value)}\n                className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 focus:border-blue-500 focus:ring-blue-500 focus:outline-none shadow-sm\"\n              >\n                <option value=\"\" className=\"text-gray-600\">Seleziona un chatbot</option>\n                {chatbots.map(chatbot => (\n                  <option key={chatbot.id} value={chatbot.id} className=\"text-gray-900\">\n                    {chatbot.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-800 mb-1\">Stato</label>\n              <div className=\"flex items-center space-x-4\">\n                <label className=\"flex items-center cursor-pointer\">\n                  <input\n                    type=\"radio\"\n                    checked={formData.isActive}\n                    onChange={() => handleInputChange('isActive', true)}\n                    className=\"mr-2 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-sm text-gray-800\">Attivo</span>\n                </label>\n                <label className=\"flex items-center cursor-pointer\">\n                  <input\n                    type=\"radio\"\n                    checked={!formData.isActive}\n                    onChange={() => handleInputChange('isActive', false)}\n                    className=\"mr-2 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-sm text-gray-800\">Inattivo</span>\n                </label>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Trigger Configuration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-gray-900\">\n            <Zap className=\"h-5 w-5 mr-2\" />\n            Configurazione Trigger\n          </CardTitle>\n          <CardDescription className=\"text-gray-700\">\n            Scegli quando questo workflow deve essere attivato\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-800 mb-2\">Tipo di Trigger</label>\n            <select\n              value={formData.triggerType}\n              onChange={(e) => handleInputChange('triggerType', e.target.value)}\n              className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 focus:border-blue-500 focus:ring-blue-500 focus:outline-none shadow-sm\"\n            >\n              {TRIGGER_TYPES.map(trigger => (\n                <option key={trigger.id} value={trigger.id} className=\"text-gray-900\">\n                  {trigger.label}\n                </option>\n              ))}\n            </select>\n            <p className=\"mt-1 text-sm text-gray-600\">\n              {TRIGGER_TYPES.find(t => t.id === formData.triggerType)?.description}\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Actions Configuration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-gray-900\">\n            <MessageSquare className=\"h-5 w-5 mr-2\" />\n            Configurazione Azioni\n          </CardTitle>\n          <CardDescription className=\"text-gray-700\">\n            Definisci quali azioni devono essere eseguite quando il trigger viene attivato\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {formData.actions.map((action, index) => (\n              <div key={index} className=\"border border-gray-200 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm font-medium text-gray-700\">Action {index + 1}</span>\n                    <Badge variant=\"outline\">{action.type}</Badge>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleRemoveAction(index)}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-800 mb-1\">Tipo di Azione</label>\n                    <select\n                      value={action.type}\n                      onChange={(e) => handleActionChange(index, 'type', e.target.value)}\n                      className=\"block w-full rounded-md border border-gray-300 px-3 py-2 bg-white text-gray-900 focus:border-blue-500 focus:ring-blue-500 focus:outline-none shadow-sm\"\n                    >\n                      {ACTION_TYPES.map(actionType => (\n                        <option key={actionType.id} value={actionType.id} className=\"text-gray-900\">\n                          {actionType.label}\n                        </option>\n                      ))}\n                    </select>\n                    <p className=\"mt-1 text-sm text-gray-600\">\n                      {ACTION_TYPES.find(t => t.id === action.type)?.description}\n                    </p>\n                  </div>\n                  \n                  {renderActionFields(action, index)}\n                </div>\n              </div>\n            ))}\n            \n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleAddAction}\n              className=\"w-full\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Action\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Action Buttons */}\n      <div className=\"flex items-center justify-between pt-6 border-t border-gray-200\">\n        <div className=\"flex items-center space-x-2\">\n          {onDelete && (\n            <Button\n              type=\"button\"\n              variant=\"destructive\"\n              onClick={onDelete}\n              className=\"bg-red-600 hover:bg-red-700 text-white font-medium\"\n            >\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              Elimina Workflow\n            </Button>\n          )}\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onCancel}\n            className=\"border-gray-300 text-gray-700 bg-white hover:bg-gray-50 font-medium\"\n          >\n            <X className=\"h-4 w-4 mr-2\" />\n            Annulla\n          </Button>\n          <Button\n            type=\"submit\"\n            onClick={handleSubmit}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white font-medium shadow-sm\"\n          >\n            <Save className=\"h-4 w-4 mr-2\" />\n            Salva Workflow\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WorkflowEditor; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/workflows/WorkflowGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/components/workflows/WorkflowManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1237,1240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1237,1240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showGuide' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":80,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowGuide' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":80,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":33},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadWorkflows'. Either include it or remove the dependency array.","line":89,"column":6,"nodeType":"ArrayExpression","endLine":89,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [loadWorkflows, selectedChatbot]","fix":{"range":[2279,2296],"text":"[loadWorkflows, selectedChatbot]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":695,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":695,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28292,28295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28292,28295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":700,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":700,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28576,28579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28576,28579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"../ui/Card\";\nimport { Button } from \"../ui/Button\";\nimport { Badge } from \"../ui/Badge\";\nimport { \n  Plus, \n  Play, \n  Pause, \n  Edit, \n  Trash2, \n  Copy, \n  Zap, \n  MessageSquare, \n  Users, \n  TrendingUp,\n  Filter,\n  Search,\n  Settings,\n  Bot,\n  X,\n  BookOpen,\n  HelpCircle\n} from 'lucide-react';\nimport WorkflowEditor from './WorkflowEditor';\nimport WorkflowGuide from './WorkflowGuide';\n\ninterface Workflow {\n  id: string;\n  name: string;\n  description: string;\n  chatbotId: string;\n  isActive: boolean;\n  triggers: WorkflowTrigger[];\n  actions: WorkflowAction[];\n  conditions?: WorkflowCondition[];\n  createdAt: Date;\n  updatedAt: Date;\n  usage: {\n    totalTriggers: number;\n    successRate: number;\n    lastTriggered?: Date;\n  };\n}\n\ninterface WorkflowTrigger {\n  id: string;\n  type: 'keyword' | 'intent' | 'time' | 'user_action' | 'channel_specific';\n  value: string;\n  channel?: string;\n  caseSensitive?: boolean;\n  exactMatch?: boolean;\n}\n\ninterface WorkflowAction {\n  id: string;\n  type: 'send_message' | 'transfer_to_human' | 'collect_info' | 'api_call' | 'send_email' | 'update_user_data';\n  config: any;\n  delay?: number;\n  order: number;\n}\n\ninterface WorkflowCondition {\n  id: string;\n  field: string;\n  operator: 'equals' | 'contains' | 'greater_than' | 'less_than' | 'exists';\n  value: string;\n}\n\ninterface ChatbotOption {\n  id: string;\n  name: string;\n}\n\nconst WorkflowManager: React.FC = () => {\n  const [workflows, setWorkflows] = useState<Workflow[]>([]);\n  const [chatbots, setChatbots] = useState<ChatbotOption[]>([]);\n  const [selectedChatbot, setSelectedChatbot] = useState<string>('all');\n  const [selectedWorkflow, setSelectedWorkflow] = useState<Workflow | null>(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showGuide, setShowGuide] = useState(false);\n  const [activeTab, setActiveTab] = useState<'workflows' | 'guide'>('workflows');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState<'all' | 'active' | 'inactive'>('all');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadWorkflows();\n    loadChatbots();\n  }, [selectedChatbot]);\n\n  const loadWorkflows = async () => {\n    setLoading(true);\n    try {\n      // Simulate API call - replace with real API\n      const mockWorkflows: Workflow[] = [\n        {\n          id: 'wf1',\n          name: 'Welcome Flow',\n          description: 'Greets new users and provides basic information',\n          chatbotId: 'bot1',\n          isActive: true,\n          triggers: [\n            { id: 't1', type: 'keyword', value: 'hello' },\n            { id: 't2', type: 'keyword', value: 'hi' },\n            { id: 't3', type: 'intent', value: 'greeting' }\n          ],\n          actions: [\n            {\n              id: 'a1',\n              type: 'send_message',\n              config: { message: 'Welcome! How can I help you today?' },\n              order: 1\n            },\n            {\n              id: 'a2',\n              type: 'send_message',\n              config: { message: 'I can help you with: \\n• Product information\\n• Support tickets\\n• Account questions' },\n              delay: 2000,\n              order: 2\n            }\n          ],\n          createdAt: new Date('2024-01-15'),\n          updatedAt: new Date('2024-01-20'),\n          usage: {\n            totalTriggers: 245,\n            successRate: 94.5,\n            lastTriggered: new Date('2024-01-22')\n          }\n        },\n        {\n          id: 'wf2',\n          name: 'Support Escalation',\n          description: 'Escalates complex issues to human agents',\n          chatbotId: 'bot1',\n          isActive: true,\n          triggers: [\n            { id: 't4', type: 'keyword', value: 'human' },\n            { id: 't5', type: 'keyword', value: 'agent' },\n            { id: 't6', type: 'intent', value: 'escalation' }\n          ],\n          actions: [\n            {\n              id: 'a3',\n              type: 'send_message',\n              config: { message: 'I understand you need to speak with a human agent. Let me connect you.' },\n              order: 1\n            },\n            {\n              id: 'a4',\n              type: 'collect_info',\n              config: { \n                question: 'Could you please briefly describe your issue?',\n                field: 'escalation_reason'\n              },\n              order: 2\n            },\n            {\n              id: 'a5',\n              type: 'transfer_to_human',\n              config: { department: 'support' },\n              order: 3\n            }\n          ],\n          conditions: [\n            { id: 'c1', field: 'conversation_length', operator: 'greater_than', value: '3' }\n          ],\n          createdAt: new Date('2024-01-10'),\n          updatedAt: new Date('2024-01-18'),\n          usage: {\n            totalTriggers: 89,\n            successRate: 87.6,\n            lastTriggered: new Date('2024-01-21')\n          }\n        },\n        {\n          id: 'wf3',\n          name: 'Product Inquiry',\n          description: 'Handles product-related questions and recommendations',\n          chatbotId: 'bot2',\n          isActive: true,\n          triggers: [\n            { id: 't7', type: 'keyword', value: 'product' },\n            { id: 't8', type: 'keyword', value: 'price' },\n            { id: 't9', type: 'intent', value: 'product_inquiry' }\n          ],\n          actions: [\n            {\n              id: 'a6',\n              type: 'send_message',\n              config: { message: 'I\\'d be happy to help you with product information!' },\n              order: 1\n            },\n            {\n              id: 'a7',\n              type: 'api_call',\n              config: { \n                endpoint: '/api/products/search',\n                method: 'GET'\n              },\n              order: 2\n            }\n          ],\n          createdAt: new Date('2024-01-12'),\n          updatedAt: new Date('2024-01-19'),\n          usage: {\n            totalTriggers: 156,\n            successRate: 91.2,\n            lastTriggered: new Date('2024-01-22')\n          }\n        }\n      ];\n\n      // Filter by chatbot if selected\n      const filteredWorkflows = selectedChatbot === 'all' \n        ? mockWorkflows \n        : mockWorkflows.filter((w: Workflow) => w.chatbotId === selectedChatbot);\n\n      setWorkflows(filteredWorkflows);\n    } catch (error) {\n      console.error('Error loading workflows:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadChatbots = async () => {\n    try {\n      // Simulate API call - replace with real API\n      const mockChatbots: ChatbotOption[] = [\n        { id: 'bot1', name: 'Customer Support Bot' },\n        { id: 'bot2', name: 'Sales Assistant' },\n        { id: 'bot3', name: 'FAQ Helper' }\n      ];\n      setChatbots(mockChatbots);\n    } catch (error) {\n      console.error('Error loading chatbots:', error);\n    }\n  };\n\n  const handleCreateWorkflow = () => {\n    setSelectedWorkflow(null);\n    setShowCreateModal(true);\n  };\n\n  const handleEditWorkflow = (workflow: Workflow) => {\n    setSelectedWorkflow(workflow);\n    setShowCreateModal(true);\n  };\n\n  const handleDeleteWorkflow = async (workflowId: string) => {\n    if (window.confirm('Are you sure you want to delete this workflow?')) {\n      setWorkflows(prev => prev.filter((w: Workflow) => w.id !== workflowId));\n    }\n  };\n\n  const handleToggleWorkflow = async (workflowId: string, isActive: boolean) => {\n    setWorkflows(prev => prev.map(w => \n      w.id === workflowId ? { ...w, isActive } : w\n    ));\n  };\n\n  const handleSaveWorkflow = (workflowData: Partial<Workflow>) => {\n    if (selectedWorkflow) {\n      // Edit existing workflow\n      setWorkflows(prev => prev.map(w => \n        w.id === selectedWorkflow.id \n          ? { ...w, ...workflowData, updatedAt: new Date() }\n          : w\n      ));\n    } else {\n      // Create new workflow\n      const newWorkflow: Workflow = {\n        id: `wf${Date.now()}`,\n        name: workflowData.name || 'New Workflow',\n        description: workflowData.description || '',\n        chatbotId: workflowData.chatbotId || selectedChatbot,\n        isActive: true,\n        triggers: workflowData.triggers || [],\n        actions: workflowData.actions || [],\n        conditions: workflowData.conditions || [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        usage: {\n          totalTriggers: 0,\n          successRate: 0\n        }\n      };\n      setWorkflows(prev => [...prev, newWorkflow]);\n    }\n    setShowCreateModal(false);\n    setSelectedWorkflow(null);\n  };\n\n  const filteredWorkflows = workflows.filter(workflow => {\n    const matchesSearch = workflow.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         workflow.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = filterStatus === 'all' || \n                         (filterStatus === 'active' && workflow.isActive) ||\n                         (filterStatus === 'inactive' && !workflow.isActive);\n    return matchesSearch && matchesStatus;\n  });\n\n  const getTriggerIcon = (type: string) => {\n    switch (type) {\n      case 'keyword': return '🔤';\n      case 'intent': return '🎯';\n      case 'time': return '⏰';\n      case 'user_action': return '👆';\n      case 'channel_specific': return '📱';\n      default: return '❓';\n    }\n  };\n\n  const getActionIcon = (type: string) => {\n    switch (type) {\n      case 'send_message': return '💬';\n      case 'transfer_to_human': return '👤';\n      case 'collect_info': return '📝';\n      case 'api_call': return '🔗';\n      case 'send_email': return '📧';\n      case 'update_user_data': return '📊';\n      default: return '⚡';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50/50 pt-16\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n              <p className=\"mt-4 text-gray-600\">Loading workflows...</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50/50 pt-16\">\n      <div className=\"max-w-7xl mx-auto px-6 space-y-8\">\n        {/* Header */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 font-sans\">Workflow Management</h1>\n              <p className=\"mt-2 text-gray-700 text-base font-normal max-w-3xl\">\n                Crea e gestisci workflows automatici per i tuoi chatbot\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <button\n                onClick={() => setActiveTab('guide')}\n                className=\"inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors\"\n              >\n                <BookOpen className=\"w-4 h-4 mr-2\" />\n                Guida Workflows\n              </button>\n              <button\n                onClick={handleCreateWorkflow}\n                className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors shadow-sm\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Crea Workflow\n              </button>\n            </div>\n          </div>\n\n          {/* Tabs */}\n          <div className=\"mt-6 border-b border-gray-200\">\n            <nav className=\"-mb-px flex space-x-8\">\n              <button\n                onClick={() => setActiveTab('workflows')}\n                className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${\n                  activeTab === 'workflows'\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <Zap className=\"h-4 w-4\" />\n                  <span>I Tuoi Workflows</span>\n                </div>\n              </button>\n              <button\n                onClick={() => setActiveTab('guide')}\n                className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${\n                  activeTab === 'guide'\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <BookOpen className=\"h-4 w-4\" />\n                  <span>Guida & Aiuto</span>\n                </div>\n              </button>\n            </nav>\n          </div>\n        </div>\n\n        {/* Guide Content */}\n        {activeTab === 'guide' && (\n          <div className=\"mt-6\">\n            <WorkflowGuide />\n          </div>\n        )}\n\n        {/* Workflows Content */}\n        {activeTab === 'workflows' && (\n          <>\n            {/* Filters */}\n            <div className=\"bg-white rounded-lg shadow-sm mb-6 p-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-800 mb-1\">Chatbot</label>\n                  <select\n                    value={selectedChatbot}\n                    onChange={(e) => setSelectedChatbot(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                  >\n                    <option value=\"all\">Tutti i Chatbots</option>\n                    {chatbots.map(bot => (\n                      <option key={bot.id} value={bot.id}>{bot.name}</option>\n                    ))}\n                  </select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-800 mb-1\">Stato</label>\n                  <select\n                    value={filterStatus}\n                    onChange={(e) => setFilterStatus(e.target.value as typeof filterStatus)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                  >\n                    <option value=\"all\">Tutti gli Stati</option>\n                    <option value=\"active\">Attivo</option>\n                    <option value=\"inactive\">Inattivo</option>\n                  </select>\n                </div>\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-gray-800 mb-1\">Ricerca</label>\n                  <input\n                    type=\"text\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    placeholder=\"Cerca workflows...\"\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md bg-white text-gray-900 placeholder-gray-500 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                  />\n                </div>\n              </div>\n            </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n            <div className=\"text-sm font-medium text-gray-500\">Total Workflows</div>\n            <div className=\"text-2xl font-bold text-gray-900\">{workflows.length}</div>\n          </div>\n          <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n            <div className=\"text-sm font-medium text-gray-500\">Active Workflows</div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {workflows.filter(w => w.isActive).length}\n            </div>\n          </div>\n          <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n            <div className=\"text-sm font-medium text-gray-500\">Total Triggers</div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {workflows.reduce((sum, w) => sum + w.usage.totalTriggers, 0)}\n            </div>\n          </div>\n          <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n            <div className=\"text-sm font-medium text-gray-500\">Avg Success Rate</div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {workflows.length > 0 \n                ? (workflows.reduce((sum, w) => sum + w.usage.successRate, 0) / workflows.length).toFixed(1)\n                : 0}%\n            </div>\n          </div>\n        </div>\n\n        {/* Workflows Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {filteredWorkflows.map((workflow) => {\n            const chatbot = chatbots.find(c => c.id === workflow.chatbotId);\n            \n            return (\n              <div key={workflow.id} className=\"bg-white rounded-lg border border-gray-200 overflow-hidden hover:shadow-lg transition-shadow\">\n                {/* Header */}\n                <div className=\"p-6 border-b border-gray-200\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-gray-900 mb-1\">{workflow.name}</h3>\n                      <p className=\"text-sm text-gray-500 mb-2\">{workflow.description}</p>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded\">\n                          {chatbot?.name || 'Unknown Bot'}\n                        </span>\n                        <span className={`text-xs px-2 py-1 rounded ${\n                          workflow.isActive \n                            ? 'bg-green-100 text-green-800' \n                            : 'bg-gray-100 text-gray-600'\n                        }`}>\n                          {workflow.isActive ? 'Active' : 'Inactive'}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <button\n                        onClick={() => handleEditWorkflow(workflow)}\n                        className=\"inline-flex items-center px-3 py-1.5 text-xs font-medium rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors\"\n                        title=\"Edit Actions & Triggers\"\n                      >\n                        <Edit className=\"w-3 h-3 mr-1\" />\n                        Edit\n                      </button>\n                      <button\n                        onClick={() => handleToggleWorkflow(workflow.id, !workflow.isActive)}\n                        className={`inline-flex items-center px-3 py-1.5 text-xs font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n                          workflow.isActive \n                            ? 'text-yellow-700 bg-yellow-100 hover:bg-yellow-200 focus:ring-yellow-500' \n                            : 'text-green-700 bg-green-100 hover:bg-green-200 focus:ring-green-500'\n                        }`}\n                        title={workflow.isActive ? 'Pause' : 'Activate'}\n                      >\n                        {workflow.isActive ? <Pause className=\"w-3 h-3 mr-1\" /> : <Play className=\"w-3 h-3 mr-1\" />}\n                        {workflow.isActive ? 'Pause' : 'Activate'}\n                      </button>\n                      <button\n                        onClick={() => handleDeleteWorkflow(workflow.id)}\n                        className=\"inline-flex items-center px-3 py-1.5 text-xs font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors\"\n                        title=\"Delete\"\n                      >\n                        <Trash2 className=\"w-3 h-3 mr-1\" />\n                        Delete\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Content */}\n                <div className=\"p-6\">\n                  {/* Triggers */}\n                  <div className=\"mb-4\">\n                    <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Triggers</h4>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {workflow.triggers.slice(0, 3).map((trigger) => (\n                        <span key={trigger.id} className=\"inline-flex items-center space-x-1 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded\">\n                          <span>{getTriggerIcon(trigger.type)}</span>\n                          <span>{trigger.value}</span>\n                        </span>\n                      ))}\n                      {workflow.triggers.length > 3 && (\n                        <span className=\"text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded\">\n                          +{workflow.triggers.length - 3} more\n                        </span>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"mb-4\">\n                    <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Actions</h4>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {workflow.actions.slice(0, 3).map((action) => (\n                        <span key={action.id} className=\"inline-flex items-center space-x-1 text-xs bg-green-100 text-green-800 px-2 py-1 rounded\">\n                          <span>{getActionIcon(action.type)}</span>\n                          <span>{action.type.replace('_', ' ')}</span>\n                        </span>\n                      ))}\n                      {workflow.actions.length > 3 && (\n                        <span className=\"text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded\">\n                          +{workflow.actions.length - 3} more\n                        </span>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Stats */}\n                  <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                    <div>\n                      <div className=\"text-xs text-gray-500\">Triggers</div>\n                      <div className=\"text-lg font-semibold text-gray-900\">{workflow.usage.totalTriggers}</div>\n                    </div>\n                    <div>\n                      <div className=\"text-xs text-gray-500\">Success Rate</div>\n                      <div className=\"text-lg font-semibold text-gray-900\">{workflow.usage.successRate}%</div>\n                    </div>\n                  </div>\n\n                  {/* Toggle */}\n                  <div className=\"flex items-center justify-between pt-4 border-t border-gray-200\">\n                    <span className=\"text-sm text-gray-600\">\n                      {workflow.usage.lastTriggered \n                        ? `Last triggered ${workflow.usage.lastTriggered.toLocaleDateString()}`\n                        : 'Never triggered'\n                      }\n                    </span>\n                    <label className=\"flex items-center cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={workflow.isActive}\n                        onChange={(e) => handleToggleWorkflow(workflow.id, e.target.checked)}\n                        className=\"sr-only\"\n                      />\n                      <div className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n                        workflow.isActive ? 'bg-blue-600' : 'bg-gray-200'\n                      }`}>\n                        <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                          workflow.isActive ? 'translate-x-6' : 'translate-x-1'\n                        }`} />\n                      </div>\n                    </label>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {filteredWorkflows.length === 0 && (\n          <div className=\"text-center py-12\">\n            <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n            </svg>\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No workflows found</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Get started by creating your first workflow.\n            </p>\n            <div className=\"mt-6\">\n              <button\n                onClick={handleCreateWorkflow}\n                className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700\"\n              >\n                Create Workflow\n              </button>\n            </div>\n          </div>\n        )}\n          </>\n        )}\n\n      </div>\n\n      {/* Workflow Editor Modal */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\n          <div className=\"relative top-8 mx-auto p-5 border w-full max-w-4xl shadow-lg rounded-md bg-white\">\n            <div className=\"mt-3\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-lg font-medium text-gray-900\">\n                  {selectedWorkflow ? 'Edit Workflow' : 'Create New Workflow'}\n                </h3>\n                <button\n                  onClick={() => {\n                    setShowCreateModal(false);\n                    setSelectedWorkflow(null);\n                  }}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <X className=\"w-6 h-6\" />\n                </button>\n              </div>\n              \n              <WorkflowEditor\n                workflow={selectedWorkflow ? {\n                  id: selectedWorkflow.id,\n                  title: selectedWorkflow.name,\n                  description: selectedWorkflow.description,\n                  isActive: selectedWorkflow.isActive,\n                  triggerType: selectedWorkflow.triggers[0]?.type || 'keyword',\n                  triggerValue: selectedWorkflow.triggers[0]?.value,\n                  conditions: [],\n                  actions: selectedWorkflow.actions.map(a => ({\n                    type: a.type,\n                    message: a.config.message,\n                    delay: a.delay,\n                    ...a.config\n                  })),\n                  chatbotId: selectedWorkflow.chatbotId,\n                  executionCount: selectedWorkflow.usage.totalTriggers,\n                  lastExecuted: selectedWorkflow.usage.lastTriggered?.toISOString() || '',\n                  createdAt: selectedWorkflow.createdAt.toISOString()\n                } : undefined}\n                chatbots={chatbots}\n                onSave={(workflowData) => {\n                  const transformedData = {\n                    name: workflowData.title,\n                    description: workflowData.description,\n                    chatbotId: workflowData.chatbotId,\n                    isActive: workflowData.isActive,\n                    triggers: [{\n                      id: `t${Date.now()}`,\n                      type: workflowData.triggerType as any,\n                      value: workflowData.triggerValue || workflowData.triggerType\n                    }],\n                    actions: workflowData.actions.map((action, index) => ({\n                      id: `a${Date.now()}_${index}`,\n                      type: action.type as any,\n                      config: {\n                        message: action.message,\n                        ...action\n                      },\n                      delay: action.delay,\n                      order: index + 1\n                    }))\n                  };\n                  handleSaveWorkflow(transformedData);\n                }}\n                onCancel={() => {\n                  setShowCreateModal(false);\n                  setSelectedWorkflow(null);\n                }}\n                onDelete={selectedWorkflow ? () => {\n                  handleDeleteWorkflow(selectedWorkflow.id);\n                  setShowCreateModal(false);\n                  setSelectedWorkflow(null);\n                } : undefined}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WorkflowManager; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/config/AppConfig.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4440,4443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4440,4443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface AppConfig {\n  ai: {\n    openaiApiKey: string;\n    enableAiFeatures: boolean;\n  };\n  analytics: {\n    mixpanelToken: string;\n    posthogToken: string;\n    vercelAnalyticsId: string;\n    enableAnalytics: boolean;\n  };\n  security: {\n    jwtSecret: string;\n    encryptionKey: string;\n    enableE2eEncryption: boolean;\n    enableAuditLogging: boolean;\n    enableRateLimiting: boolean;\n  };\n  collaboration: {\n    liveblocksPublicKey: string;\n    liveblocksSecretKey: string;\n  };\n  database: {\n    mongodbUri: string;\n    redisUrl: string;\n  };\n  payment: {\n    stripeSecretKey: string;\n    stripeWebhookSecret: string;\n  };\n  email: {\n    smtpHost: string;\n    smtpPort: number;\n    smtpUser: string;\n    smtpPassword: string;\n  };\n  app: {\n    nodeEnv: string;\n    port: number;\n    apiUrl: string;\n    frontendUrl: string;\n    corsOrigin: string;\n  };\n  performance: {\n    cacheTtl: number;\n    maxRequestsPerMinute: number;\n    workerThreads: number;\n  };\n}\n\nclass ConfigService {\n  private static instance: ConfigService;\n  private config: AppConfig;\n\n  private constructor() {\n    this.config = this.loadConfig();\n  }\n\n  public static getInstance(): ConfigService {\n    if (!ConfigService.instance) {\n      ConfigService.instance = new ConfigService();\n    }\n    return ConfigService.instance;\n  }\n\n  private loadConfig(): AppConfig {\n    return {\n      ai: {\n        openaiApiKey: process.env.OPENAI_API_KEY || '',\n        enableAiFeatures: process.env.ENABLE_AI_FEATURES === 'true',\n      },\n      analytics: {\n        mixpanelToken: process.env.MIXPANEL_TOKEN || '',\n        posthogToken: process.env.POSTHOG_TOKEN || '',\n        vercelAnalyticsId: process.env.VERCEL_ANALYTICS_ID || '',\n        enableAnalytics: process.env.ENABLE_ANALYTICS === 'true',\n      },\n      security: {\n        jwtSecret: process.env.JWT_SECRET || 'default-jwt-secret',\n        encryptionKey: process.env.ENCRYPTION_KEY || 'default-encryption-key',\n        enableE2eEncryption: process.env.ENABLE_E2E_ENCRYPTION === 'true',\n        enableAuditLogging: process.env.ENABLE_AUDIT_LOGGING === 'true',\n        enableRateLimiting: process.env.ENABLE_RATE_LIMITING === 'true',\n      },\n      collaboration: {\n        liveblocksPublicKey: process.env.LIVEBLOCKS_PUBLIC_KEY || '',\n        liveblocksSecretKey: process.env.LIVEBLOCKS_SECRET_KEY || '',\n      },\n      database: {\n        mongodbUri: process.env.MONGODB_URI || 'mongodb://localhost:27017/chatbot',\n        redisUrl: process.env.REDIS_URL || 'redis://localhost:6379',\n      },\n      payment: {\n        stripeSecretKey: process.env.STRIPE_SECRET_KEY || '',\n        stripeWebhookSecret: process.env.STRIPE_WEBHOOK_SECRET || '',\n      },\n      email: {\n        smtpHost: process.env.SMTP_HOST || 'smtp.gmail.com',\n        smtpPort: parseInt(process.env.SMTP_PORT || '587', 10),\n        smtpUser: process.env.SMTP_USER || '',\n        smtpPassword: process.env.SMTP_PASSWORD || '',\n      },\n      app: {\n        nodeEnv: process.env.NODE_ENV || 'development',\n        port: parseInt(process.env.PORT || '3000', 10),\n        apiUrl: process.env.API_URL || 'http://localhost:3000',\n        frontendUrl: process.env.FRONTEND_URL || 'http://localhost:5173',\n        corsOrigin: process.env.CORS_ORIGIN || 'http://localhost:5173',\n      },\n      performance: {\n        cacheTtl: parseInt(process.env.CACHE_TTL || '3600', 10),\n        maxRequestsPerMinute: parseInt(process.env.MAX_REQUESTS_PER_MINUTE || '100', 10),\n        workerThreads: parseInt(process.env.WORKER_THREADS || '4', 10),\n      },\n    };\n  }\n\n  public getConfig(): AppConfig {\n    return this.config;\n  }\n\n  public get<K extends keyof AppConfig>(key: K): AppConfig[K] {\n    return this.config[key];\n  }\n\n  public isDevelopment(): boolean {\n    return this.config.app.nodeEnv === 'development';\n  }\n\n  public isProduction(): boolean {\n    return this.config.app.nodeEnv === 'production';\n  }\n\n  public isTest(): boolean {\n    return this.config.app.nodeEnv === 'test';\n  }\n\n  public validateConfig(): void {\n    const requiredKeys = [\n      'ai.openaiApiKey',\n      'analytics.mixpanelToken',\n      'analytics.posthogToken',\n      'security.jwtSecret',\n      'security.encryptionKey',\n      'collaboration.liveblocksPublicKey',\n      'database.mongodbUri',\n      'payment.stripeSecretKey',\n    ];\n\n    const missingKeys = requiredKeys.filter((key) => {\n      const value = key.split('.').reduce((obj, k) => obj?.[k], this.config as any);\n      return !value;\n    });\n\n    if (missingKeys.length > 0) {\n      console.warn('Missing required configuration keys:', missingKeys);\n      if (this.isProduction()) {\n        throw new Error(`Missing required configuration keys: ${missingKeys.join(', ')}`);\n      }\n    }\n  }\n}\n\nexport const config = ConfigService.getInstance(); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/config/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/config/db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/config/env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/config/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/context/AuthContext.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/context/useAuth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/contexts/AnimationContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":40,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":40,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useState, ReactNode } from 'react';\nimport { Variants, Transition, Tween } from 'framer-motion';\nimport { \n  fadeIn, \n  slideUp, \n  slideDown, \n  slideInFromRight, \n  slideInFromLeft, \n  scale, \n  rotate, \n  popIn, \n  listItem, \n  staggerContainer \n} from '../utils/animations';\n\ninterface AnimationContextType {\n  animationsEnabled: boolean;\n  animationSpeed: 'fast' | 'normal' | 'slow';\n  preferReducedMotion: boolean;\n  getAnimationVariant: (type: AnimationType) => Variants;\n  toggleAnimations: () => void;\n  setAnimationSpeed: (speed: 'fast' | 'normal' | 'slow') => void;\n  setPreferReducedMotion: (reduced: boolean) => void;\n}\n\ntype AnimationType = \n  | 'fade' \n  | 'slideUp' \n  | 'slideDown' \n  | 'slideRight' \n  | 'slideLeft' \n  | 'scale' \n  | 'rotate' \n  | 'pop' \n  | 'listItem' \n  | 'stagger';\n\nconst AnimationContext = createContext<AnimationContextType | undefined>(undefined);\n\nexport const useAnimation = () => {\n  const context = useContext(AnimationContext);\n  if (!context) {\n    throw new Error('useAnimation must be used within an AnimationProvider');\n  }\n  return context;\n};\n\ninterface AnimationProviderProps {\n  children: ReactNode;\n}\n\nexport const AnimationProvider = ({ children }: AnimationProviderProps) => {\n  const [animationsEnabled, setAnimationsEnabled] = useState(true);\n  const [animationSpeed, setAnimationSpeed] = useState<'fast' | 'normal' | 'slow'>('normal');\n  const [preferReducedMotion, setPreferReducedMotion] = useState(false);\n\n  const getSpeedMultiplier = () => {\n    switch (animationSpeed) {\n      case 'fast':\n        return 0.7;\n      case 'slow':\n        return 1.3;\n      default:\n        return 1;\n    }\n  };\n\n  const modifyVariantDuration = (variant: Variants): Variants => {\n    if (!animationsEnabled || preferReducedMotion) {\n      return {\n        initial: {},\n        animate: {},\n        exit: {},\n      };\n    }\n\n    const speedMultiplier = getSpeedMultiplier();\n    const newVariant: Variants = {};\n\n    Object.entries(variant).forEach(([key, value]) => {\n      if (typeof value === 'object' && value !== null) {\n        const transition = value.transition as Tween;\n        newVariant[key] = {\n          ...value,\n          transition: {\n            ...transition,\n            duration: typeof transition?.duration === 'number'\n              ? transition.duration * speedMultiplier\n              : undefined\n          }\n        };\n      } else {\n        newVariant[key] = value;\n      }\n    });\n\n    return newVariant;\n  };\n\n  const getAnimationVariant = (type: AnimationType): Variants => {\n    switch (type) {\n      case 'fade':\n        return modifyVariantDuration(fadeIn);\n      case 'slideUp':\n        return modifyVariantDuration(slideUp);\n      case 'slideDown':\n        return modifyVariantDuration(slideDown);\n      case 'slideRight':\n        return modifyVariantDuration(slideInFromRight);\n      case 'slideLeft':\n        return modifyVariantDuration(slideInFromLeft);\n      case 'scale':\n        return modifyVariantDuration(scale);\n      case 'rotate':\n        return modifyVariantDuration(rotate);\n      case 'pop':\n        return modifyVariantDuration(popIn);\n      case 'listItem':\n        return modifyVariantDuration(listItem);\n      case 'stagger':\n        return modifyVariantDuration(staggerContainer);\n      default:\n        return modifyVariantDuration(fadeIn);\n    }\n  };\n\n  const toggleAnimations = () => {\n    setAnimationsEnabled(prev => !prev);\n  };\n\n  const value = {\n    animationsEnabled,\n    animationSpeed,\n    preferReducedMotion,\n    getAnimationVariant,\n    toggleAnimations,\n    setAnimationSpeed,\n    setPreferReducedMotion,\n  };\n\n  return (\n    <AnimationContext.Provider value={value}>\n      {children}\n    </AnimationContext.Provider>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/contexts/AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'token' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":36,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'token' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":46,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":20},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":75,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":75,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useCallback } from 'react';\nimport { MockApiService } from '../services/mockApi';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  tenantId: string;\n  isActive: boolean;\n  isVerified: boolean;\n  roles: string[];\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (firstName: string, lastName: string, email: string, password: string) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(() => {\n    const token = localStorage.getItem('token');\n    const savedUser = localStorage.getItem('user');\n    return token && savedUser ? JSON.parse(savedUser) : null;\n  });\n\n  const login = useCallback(async (email: string, password: string) => {\n    try {\n      const { token, user } = await MockApiService.login(email, password);\n      setUser(user);\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    }\n  }, []);\n\n  const register = useCallback(async (firstName: string, lastName: string, email: string, password: string) => {\n    try {\n      const { token, user } = await MockApiService.signUp({\n        firstName,\n        lastName,\n        email,\n        password,\n      });\n      setUser(user);\n    } catch (error) {\n      console.error('Registration failed:', error);\n      throw error;\n    }\n  }, []);\n\n  const logout = useCallback(() => {\n    MockApiService.logout();\n    setUser(null);\n  }, []);\n\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/contexts/ThemeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":37,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":37,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const ThemeProvider = ({ children }: { children: ReactNode }) => {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme === 'dark' || savedTheme === 'light') return savedTheme;\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/contexts/ToastContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":16,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":16,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useCallback } from 'react';\nimport Toast, { ToastType } from '../components/Toast';\n\ninterface ToastMessage {\n  id: number;\n  message: string;\n  type: ToastType;\n}\n\ninterface ToastContextType {\n  showToast: (message: string, type: ToastType) => void;\n}\n\nconst ToastContext = createContext<ToastContextType | undefined>(undefined);\n\nexport const useToast = () => {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n  return context;\n};\n\nexport const ToastProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [toasts, setToasts] = useState<ToastMessage[]>([]);\n\n  const showToast = useCallback((message: string, type: ToastType) => {\n    const id = Date.now();\n    setToasts((prev) => [...prev, { id, message, type }]);\n  }, []);\n\n  const removeToast = useCallback((id: number) => {\n    setToasts((prev) => prev.filter((toast) => toast.id !== id));\n  }, []);\n\n  return (\n    <ToastContext.Provider value={{ showToast }}>\n      {children}\n      {toasts.map((toast) => (\n        <Toast\n          key={toast.id}\n          message={toast.message}\n          type={toast.type}\n          onClose={() => removeToast(toast.id)}\n        />\n      ))}\n    </ToastContext.Provider>\n  );\n};\n\nexport default ToastProvider; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/data/footer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/data/menuItems.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/data/pricing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/data/siteDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/graphql/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/graphql/context.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/graphql/mutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/graphql/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/graphql/resolvers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pubsub' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":3,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[190,193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[190,193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[318,321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[318,321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PubSub } from 'graphql-subscriptions';\n\nconst pubsub = new PubSub();\n\nexport const resolvers = {\n  Query: {\n    hello: () => 'Hello from GraphQL!',\n  },\n  Mutation: {\n    echo: (_: any, { message }: { message: string }) => message,\n  },\n  Subscription: {\n    countdown: {\n      subscribe: async function* (_: any, { from }: { from: number }) {\n        for (let i = from; i >= 0; i--) {\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          yield { countdown: i };\n        }\n      },\n    },\n  },\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/graphql/schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/hooks/useAuth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'password' is defined but never used.","line":38,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":47}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport type { User } from '../store/types';\n\ninterface UpdateProfileData {\n  firstName: string;\n  lastName: string;\n  email: string;\n  notifications: {\n    email: boolean;\n    push: boolean;\n    marketing: boolean;\n  };\n}\n\nexport const useAuth = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // TODO: Implement actual authentication check\n    const checkAuth = async () => {\n      try {\n        // Simulate auth check\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n          setUser(JSON.parse(storedUser));\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    // TODO: Implement actual login logic\n    const mockUser: User = {\n      id: '1',\n      email,\n      firstName: 'John',\n      lastName: 'Doe',\n      isActive: true,\n      isVerified: true,\n      tenantId: '1',\n      roles: ['user'],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    localStorage.setItem('user', JSON.stringify(mockUser));\n    setUser(mockUser);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user');\n    setUser(null);\n  };\n\n  const updateProfile = async (data: UpdateProfileData) => {\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n\n    // TODO: Implement actual profile update logic\n    const updatedUser: User = {\n      ...user,\n      firstName: data.firstName,\n      lastName: data.lastName,\n      email: data.email,\n      updatedAt: new Date().toISOString(),\n    };\n\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n    setUser(updatedUser);\n  };\n\n  return {\n    user,\n    loading,\n    login,\n    logout,\n    updateProfile,\n    isAuthenticated: !!user\n  };\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/hooks/useChat.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1841,1844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1841,1844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3341,3344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3341,3344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useAuth } from './useAuth';\n\nexport interface Message {\n  id: string;\n  content: string;\n  sender: 'user' | 'assistant';\n  timestamp: Date;\n  metadata?: {\n    responseTime?: number;\n    confidence?: number;\n    sources?: string[];\n  };\n}\n\ninterface ChatState {\n  messages: Message[];\n  isLoading: boolean;\n  error: string | null;\n  trialId?: string;\n}\n\ninterface UseChat {\n  messages: Message[];\n  sendMessage: (message: string) => Promise<void>;\n  isLoading: boolean;\n  error: string | null;\n  trialId?: string;\n  setTrialId: (trialId: string) => void;\n  clearChat: () => void;\n}\n\nexport const useChat = (): UseChat => {\n  const { user } = useAuth();\n  const [state, setState] = useState<ChatState>({\n    messages: [],\n    isLoading: false,\n    error: null,\n    trialId: undefined,\n  });\n\n  // Get trialId from URL parameters or localStorage\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const trialParam = urlParams.get('trial');\n    const storedTrialId = localStorage.getItem('trialId');\n    \n    if (trialParam) {\n      setState((prev: ChatState) => ({ ...prev, trialId: trialParam }));\n      localStorage.setItem('trialId', trialParam);\n    } else if (storedTrialId) {\n      setState((prev: ChatState) => ({ ...prev, trialId: storedTrialId }));\n    }\n  }, []);\n\n  const sendMessage = async (content: string): Promise<void> => {\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content,\n      sender: 'user',\n      timestamp: new Date(),\n    };\n\n    setState((prev: ChatState) => ({\n      ...prev,\n      messages: [...prev.messages, userMessage],\n      isLoading: true,\n      error: null,\n    }));\n\n    try {\n      const startTime = Date.now();\n      \n      // Build API payload with trialId\n      const payload: any = {\n        message: content,\n        userId: user?.id,\n        context: {\n          conversationHistory: state.messages.slice(-5), // Last 5 messages for context\n        },\n      };\n\n      // Add trialId if available\n      if (state.trialId) {\n        payload.trialId = state.trialId;\n      }\n\n      const response = await fetch('/api/chat/message', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const responseTime = Date.now() - startTime;\n\n      const assistantMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: data.response || data.message,\n        sender: 'assistant',\n        timestamp: new Date(),\n        metadata: {\n          responseTime,\n          confidence: data.confidence,\n          sources: data.sources,\n        },\n      };\n\n      setState((prev: ChatState) => ({\n        ...prev,\n        messages: [...prev.messages, assistantMessage],\n        isLoading: false,\n      }));\n\n      // Update trial statistics if trialId exists\n      if (state.trialId) {\n        await updateTrialStats(state.trialId, {\n          responseTime,\n          customerSatisfaction: data.confidence || 0,\n        });\n      }\n\n    } catch (error: any) {\n      console.error('Error sending message:', error);\n      setState((prev: ChatState) => ({\n        ...prev,\n        isLoading: false,\n        error: error.message || 'Failed to send message',\n      }));\n    }\n  };\n\n  const setTrialId = (trialId: string) => {\n    setState((prev: ChatState) => ({ ...prev, trialId }));\n    localStorage.setItem('trialId', trialId);\n  };\n\n  const clearChat = () => {\n    setState((prev: ChatState) => ({\n      ...prev,\n      messages: [],\n      error: null,\n    }));\n  };\n\n  // Update trial statistics\n  const updateTrialStats = async (trialId: string, stats: {\n    responseTime?: number;\n    customerSatisfaction?: number;\n  }) => {\n    try {\n      await fetch(`/api/trial/${trialId}/stats`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n        },\n        body: JSON.stringify({\n          messagesProcessed: 1, // Increment by 1\n          responseTime: stats.responseTime,\n          customerSatisfaction: stats.customerSatisfaction,\n          timesSaved: Math.round(stats.responseTime! / 1000 / 60), // Minutes saved vs manual response\n        }),\n      });\n    } catch (error) {\n      console.error('Error updating trial stats:', error);\n      // Don't throw - this shouldn't break the chat flow\n    }\n  };\n\n  return {\n    messages: state.messages,\n    sendMessage,\n    isLoading: state.isLoading,\n    error: state.error,\n    trialId: state.trialId,\n    setTrialId,\n    clearChat,\n  };\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/hooks/useClientId.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/hooks/useConfigHistory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/hooks/useFaqs.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/hooks/useWorkflows.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[790,793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[790,793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[942,945],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[942,945],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'workflowId' is defined but never used.","line":88,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":88,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2570,2573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2570,2573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'instanceId' is defined but never used.","line":102,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":46}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { Workflow } from '../types';\n\nconst mockWorkflows: Workflow[] = [\n  {\n    id: '1',\n    name: 'Customer Onboarding',\n    description: 'Automated customer onboarding process',\n    trigger: { type: 'event', config: {} },\n    steps: [],\n    status: 'active',\n    createdAt: Date.now(),\n    updatedAt: Date.now(),\n  },\n  {\n    id: '2',\n    name: 'Data Sync',\n    description: 'Synchronize data between systems',\n    trigger: { type: 'schedule', config: {} },\n    steps: [],\n    status: 'active',\n    createdAt: Date.now(),\n    updatedAt: Date.now(),\n  },\n];\n\ninterface UseWorkflowsReturn {\n  workflows: Workflow[];\n  createWorkflow: (workflow: Partial<Workflow>) => Promise<void>;\n  executeWorkflow: (workflowId: string, data: Record<string, any>) => Promise<void>;\n  getWorkflowStatus: (instanceId: string) => Promise<{\n    status: 'running' | 'completed' | 'failed';\n    data: Record<string, any>;\n  } | null>;\n  isLoading: boolean;\n  error: Error | null;\n}\n\nexport const useWorkflows = (): UseWorkflowsReturn => {\n  const [workflows, setWorkflows] = useState<Workflow[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    fetchWorkflows();\n  }, []);\n\n  const fetchWorkflows = async () => {\n    try {\n      setIsLoading(true);\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n      setWorkflows(mockWorkflows);\n      setError(null);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to fetch workflows'));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const createWorkflow = async (workflow: Partial<Workflow>) => {\n    try {\n      setIsLoading(true);\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const newWorkflow: Workflow = {\n        ...workflow,\n        id: Date.now().toString(),\n        createdAt: Date.now(),\n        updatedAt: Date.now(),\n        status: 'active',\n        steps: workflow.steps || [],\n        name: workflow.name || '',\n        description: workflow.description || '',\n        trigger: workflow.trigger || { type: 'manual', config: {} },\n      };\n      setWorkflows(prev => [...prev, newWorkflow]);\n      setError(null);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to create workflow'));\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const executeWorkflow = async (workflowId: string, data: Record<string, any>) => {\n    try {\n      setIsLoading(true);\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n      setError(null);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to execute workflow'));\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getWorkflowStatus = async (instanceId: string) => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return {\n        status: 'completed' as const,\n        data: {},\n      };\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to get workflow status'));\n      return null;\n    }\n  };\n\n  return {\n    workflows,\n    createWorkflow,\n    executeWorkflow,\n    getWorkflowStatus,\n    isLoading,\n    error,\n  };\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/lib/apollo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/lib/services/affiliateService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/lib/services/analyticsService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/lib/services/api.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/lib/services/authService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/lib/services/chatbotService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/lib/services/faqService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/lib/services/leadService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/lib/services/multichannelService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/lib/services/paymentService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/middleware/authMiddleware.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/middleware/errorHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'next' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Request, Response, NextFunction } from 'express';\nimport logger from '../utils/logger.js';\n\ninterface ErrorWithStatus extends Error {\n  status?: number;\n  code?: string;\n}\n\nconst errorHandler = (\n  err: ErrorWithStatus,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  const status = err.status || 500;\n  const message = err.message || 'Internal Server Error';\n\n  logger.error(`Error ${status}: ${message}`);\n  logger.error(err.stack);\n\n  res.status(status).json({\n    error: {\n      code: err.code || 'INTERNAL_ERROR',\n      message,\n    },\n  });\n};\n\nexport default errorHandler; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/middleware/requestLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/middleware/sanitizeInput.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[401,404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[401,404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[407,410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[407,410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[625,628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[625,628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Request, Response, NextFunction } from 'express';\nimport xss from 'xss';\n\nconst sanitizeInput = (req: Request, res: Response, next: NextFunction) => {\n  if (req.body) {\n    req.body = sanitizeObject(req.body);\n  }\n  if (req.query) {\n    req.query = sanitizeObject(req.query);\n  }\n  if (req.params) {\n    req.params = sanitizeObject(req.params);\n  }\n  next();\n};\n\nconst sanitizeObject = (obj: any): any => {\n  if (typeof obj !== 'object' || obj === null) {\n    return typeof obj === 'string' ? xss(obj) : obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeObject(item));\n  }\n\n  const sanitized: any = {};\n  for (const [key, value] of Object.entries(obj)) {\n    sanitized[key] = sanitizeObject(value);\n  }\n  return sanitized;\n};\n\nexport default sanitizeInput; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Affiliate.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/AffiliateProgram.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setReferrals' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":63,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setPaymentHistory' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":133,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":133,"endColumn":43}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/Card';\nimport { Button } from '../components/ui/Button';\nimport { Badge } from '../components/ui/Badge';\nimport { \n  Users, \n  DollarSign, \n  TrendingUp, \n  Share2, \n  Copy, \n  ExternalLink, \n  BarChart3,\n  CreditCard,\n  Calendar,\n  Download,\n  Eye,\n  CheckCircle,\n  Clock,\n  AlertCircle,\n  Zap,\n  Gift,\n  Target,\n  Award\n} from 'lucide-react';\nimport { LineChart } from '../components/charts/LineChart';\nimport { BarChart } from '../components/charts/BarChart';\n\ninterface Referral {\n  id: string;\n  name: string;\n  email: string;\n  status: 'pending' | 'active' | 'converted' | 'paid';\n  commission: number;\n  date: string;\n  conversionDate?: string;\n  paymentDate?: string;\n  subscriptionType: string;\n  monthlyValue: number;\n}\n\ninterface AffiliateStats {\n  totalReferrals: number;\n  activeReferrals: number;\n  totalEarnings: number;\n  monthlyEarnings: number;\n  conversionRate: number;\n  pendingPayout: number;\n  lifetimeEarnings: number;\n  thisMonthReferrals: number;\n  averageCommission: number;\n}\n\ninterface PaymentHistory {\n  id: string;\n  amount: number;\n  date: string;\n  status: 'pending' | 'paid' | 'failed';\n  method: string;\n  reference: string;\n}\n\nconst AffiliateProgram = () => {\n  const [referrals, setReferrals] = useState<Referral[]>([\n    {\n      id: '1',\n      name: 'Sarah Johnson',\n      email: 'sarah.j@example.com',\n      status: 'paid',\n      commission: 25.00,\n      date: '2024-01-15',\n      conversionDate: '2024-01-20',\n      paymentDate: '2024-02-01',\n      subscriptionType: 'Pro Plan',\n      monthlyValue: 99.00\n    },\n    {\n      id: '2',\n      name: 'Mike Chen',\n      email: 'mike.chen@example.com',\n      status: 'converted',\n      commission: 49.50,\n      date: '2024-01-14',\n      conversionDate: '2024-01-18',\n      subscriptionType: 'Business Plan',\n      monthlyValue: 199.00\n    },\n    {\n      id: '3',\n      name: 'Emily Davis',\n      email: 'emily.davis@example.com',\n      status: 'active',\n      commission: 0,\n      date: '2024-01-13',\n      subscriptionType: 'Free Trial',\n      monthlyValue: 0\n    },\n    {\n      id: '4',\n      name: 'David Wilson',\n      email: 'david.w@example.com',\n      status: 'pending',\n      commission: 0,\n      date: '2024-01-12',\n      subscriptionType: 'Free Trial',\n      monthlyValue: 0\n    },\n    {\n      id: '5',\n      name: 'Lisa Brown',\n      email: 'lisa.brown@example.com',\n      status: 'paid',\n      commission: 74.25,\n      date: '2024-01-10',\n      conversionDate: '2024-01-15',\n      paymentDate: '2024-02-01',\n      subscriptionType: 'Enterprise Plan',\n      monthlyValue: 299.00\n    }\n  ]);\n\n  const [stats, setStats] = useState<AffiliateStats>({\n    totalReferrals: 45,\n    activeReferrals: 12,\n    totalEarnings: 1250.00,\n    monthlyEarnings: 325.00,\n    conversionRate: 26.7,\n    pendingPayout: 148.75,\n    lifetimeEarnings: 3420.50,\n    thisMonthReferrals: 8,\n    averageCommission: 27.8\n  });\n\n  const [paymentHistory, setPaymentHistory] = useState<PaymentHistory[]>([\n    {\n      id: '1',\n      amount: 325.00,\n      date: '2024-02-01',\n      status: 'paid',\n      method: 'PayPal',\n      reference: 'PAY-2024-001'\n    },\n    {\n      id: '2',\n      amount: 280.50,\n      date: '2024-01-01',\n      status: 'paid',\n      method: 'PayPal',\n      reference: 'PAY-2024-002'\n    },\n    {\n      id: '3',\n      amount: 148.75,\n      date: '2024-03-01',\n      status: 'pending',\n      method: 'PayPal',\n      reference: 'PAY-2024-003'\n    }\n  ]);\n\n  const [affiliateLink] = useState('https://aiorchestrator.com/ref/ABC123');\n  const [copied, setCopied] = useState(false);\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('paypal');\n\n  const handleCopyLink = async () => {\n    try {\n      await navigator.clipboard.writeText(affiliateLink);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (error) {\n      console.error('Failed to copy link:', error);\n    }\n  };\n\n  const handleRequestPayout = () => {\n    if (stats.pendingPayout >= 50) {\n      setShowPaymentModal(true);\n    } else {\n      alert('Minimum payout amount is $50. Current pending amount: $' + stats.pendingPayout.toFixed(2));\n    }\n  };\n\n  const handleConfirmPayout = () => {\n    // Simulate payout processing\n    alert(`Payout of $${stats.pendingPayout.toFixed(2)} has been initiated to your ${selectedPaymentMethod} account. You will receive it within 3-5 business days.`);\n    setShowPaymentModal(false);\n    // Update stats to reflect payout\n    setStats(prev => ({\n      ...prev,\n      pendingPayout: 0,\n      totalEarnings: prev.totalEarnings + prev.pendingPayout\n    }));\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'paid': return 'bg-green-100 text-green-800';\n      case 'converted': return 'bg-blue-100 text-blue-800';\n      case 'active': return 'bg-yellow-100 text-yellow-800';\n      case 'pending': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'paid': return 'Paid';\n      case 'converted': return 'Converted';\n      case 'active': return 'Active';\n      case 'pending': return 'Pending';\n      default: return 'Unknown';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'paid': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'converted': return <TrendingUp className=\"h-4 w-4\" />;\n      case 'active': return <Clock className=\"h-4 w-4\" />;\n      case 'pending': return <AlertCircle className=\"h-4 w-4\" />;\n      default: return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  const earningsData = [\n    { name: 'Jan', value: 280 },\n    { name: 'Feb', value: 325 },\n    { name: 'Mar', value: 148 },\n    { name: 'Apr', value: 0 },\n    { name: 'May', value: 0 },\n    { name: 'Jun', value: 0 },\n  ];\n\n  const referralsData = [\n    { name: 'Jan', value: 12 },\n    { name: 'Feb', value: 8 },\n    { name: 'Mar', value: 5 },\n    { name: 'Apr', value: 0 },\n    { name: 'May', value: 0 },\n    { name: 'Jun', value: 0 },\n  ];\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50/50 pt-16\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between py-6\">\n          <div>\n            <h1 className=\"text-2xl font-semibold text-gray-900\">Affiliate Program</h1>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Track your referrals, earnings, and manage your affiliate links\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button variant=\"outline\" className=\"inline-flex items-center\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Report\n            </Button>\n            <Button className=\"inline-flex items-center\">\n              <Share2 className=\"w-4 h-4 mr-2\" />\n              Share Program\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <Users className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-500\">Total Referrals</p>\n                  <p className=\"text-2xl font-semibold text-gray-900\">{stats.totalReferrals}</p>\n                  <p className=\"text-xs text-green-600 mt-1\">+{stats.thisMonthReferrals} this month</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-green-100 rounded-lg\">\n                  <DollarSign className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-500\">Lifetime Earnings</p>\n                  <p className=\"text-2xl font-semibold text-gray-900\">{formatCurrency(stats.lifetimeEarnings)}</p>\n                  <p className=\"text-xs text-green-600 mt-1\">+{formatCurrency(stats.monthlyEarnings)} this month</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-yellow-100 rounded-lg\">\n                  <CreditCard className=\"w-6 h-6 text-yellow-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-500\">Pending Payout</p>\n                  <p className=\"text-2xl font-semibold text-gray-900\">{formatCurrency(stats.pendingPayout)}</p>\n                  <p className=\"text-xs text-blue-600 mt-1\">Min $50 to withdraw</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\n                  <Target className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-500\">Conversion Rate</p>\n                  <p className=\"text-2xl font-semibold text-gray-900\">{stats.conversionRate}%</p>\n                  <p className=\"text-xs text-green-600 mt-1\">+2.3% from last month</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          {/* Affiliate Link Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Gift className=\"h-5 w-5 mr-2\" />\n                Your Affiliate Link\n              </CardTitle>\n              <CardDescription>\n                Share this link to earn commissions\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"text\"\n                  value={affiliateLink}\n                  readOnly\n                  className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-900\"\n                />\n                <Button\n                  variant=\"outline\"\n                  onClick={handleCopyLink}\n                  className=\"inline-flex items-center\"\n                >\n                  <Copy className=\"w-4 h-4 mr-1\" />\n                  {copied ? 'Copied!' : 'Copy'}\n                </Button>\n              </div>\n              <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                <span>Commission Rate: 25%</span>\n                <span>•</span>\n                <span>Min Payout: $50</span>\n              </div>\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <h3 className=\"text-sm font-medium text-blue-900 mb-2\">How it works</h3>\n                <ul className=\"text-sm text-blue-800 space-y-1\">\n                  <li>• Share your unique affiliate link with potential customers</li>\n                  <li>• Earn 25% commission on all successful referrals</li>\n                  <li>• Get paid monthly when you reach the $50 minimum</li>\n                  <li>• Track your performance in real-time</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payout Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <CreditCard className=\"h-5 w-5 mr-2\" />\n                Request Payout\n              </CardTitle>\n              <CardDescription>\n                Withdraw your earnings\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n                  {formatCurrency(stats.pendingPayout)}\n                </div>\n                <p className=\"text-sm text-gray-500\">Available for withdrawal</p>\n              </div>\n              \n              <Button \n                onClick={handleRequestPayout}\n                disabled={stats.pendingPayout < 50}\n                className=\"w-full\"\n              >\n                <Zap className=\"w-4 h-4 mr-2\" />\n                Request Payout\n              </Button>\n              \n              {stats.pendingPayout < 50 && (\n                <p className=\"text-xs text-gray-500 text-center\">\n                  Minimum $50 required for payout\n                </p>\n              )}\n              \n              <div className=\"text-sm text-gray-600\">\n                <p>Next payout date: March 1, 2024</p>\n                <p>Payment method: PayPal</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Stats */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Award className=\"h-5 w-5 mr-2\" />\n                Performance\n              </CardTitle>\n              <CardDescription>\n                This month's performance\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-600\">Monthly Earnings</span>\n                <span className=\"text-lg font-semibold text-gray-900\">{formatCurrency(stats.monthlyEarnings)}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-600\">New Referrals</span>\n                <span className=\"text-lg font-semibold text-gray-900\">{stats.thisMonthReferrals}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-600\">Avg Commission</span>\n                <span className=\"text-lg font-semibold text-gray-900\">{formatCurrency(stats.averageCommission)}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-600\">Conversion Rate</span>\n                <span className=\"text-lg font-semibold text-gray-900\">{stats.conversionRate}%</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Charts Section */}\n        <div className=\"grid gap-6 md:grid-cols-2 mb-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Earnings Trend</CardTitle>\n              <CardDescription>\n                Monthly earnings over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <LineChart data={earningsData} height={300} />\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Referrals Trend</CardTitle>\n              <CardDescription>\n                Monthly referrals over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <BarChart data={referralsData} height={300} />\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Referrals Table */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Recent Referrals</CardTitle>\n            <CardDescription>\n              Track your referral performance\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-gray-200\">\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Name</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Email</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Plan</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Status</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Commission</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Date</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {referrals.map((referral) => (\n                    <tr key={referral.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                      <td className=\"py-3 px-4\">\n                        <div className=\"font-medium text-gray-900\">{referral.name}</div>\n                      </td>\n                      <td className=\"py-3 px-4 text-gray-700\">{referral.email}</td>\n                      <td className=\"py-3 px-4 text-gray-700\">{referral.subscriptionType}</td>\n                      <td className=\"py-3 px-4\">\n                        <Badge className={getStatusColor(referral.status)}>\n                          <div className=\"flex items-center\">\n                            {getStatusIcon(referral.status)}\n                            <span className=\"ml-1\">{getStatusText(referral.status)}</span>\n                          </div>\n                        </Badge>\n                      </td>\n                      <td className=\"py-3 px-4 text-gray-700\">\n                        {referral.commission > 0 ? formatCurrency(referral.commission) : '-'}\n                      </td>\n                      <td className=\"py-3 px-4 text-gray-700\">{referral.date}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payment History */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Payment History</CardTitle>\n            <CardDescription>\n              Your payout history and status\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-gray-200\">\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Date</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Amount</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Method</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Status</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Reference</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {paymentHistory.map((payment) => (\n                    <tr key={payment.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                      <td className=\"py-3 px-4 text-gray-700\">{payment.date}</td>\n                      <td className=\"py-3 px-4 font-medium text-gray-900\">{formatCurrency(payment.amount)}</td>\n                      <td className=\"py-3 px-4 text-gray-700\">{payment.method}</td>\n                      <td className=\"py-3 px-4\">\n                        <Badge variant={payment.status === 'paid' ? 'default' : payment.status === 'pending' ? 'secondary' : 'destructive'}>\n                          {payment.status.charAt(0).toUpperCase() + payment.status.slice(1)}\n                        </Badge>\n                      </td>\n                      <td className=\"py-3 px-4 text-gray-700\">{payment.reference}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Payment Modal */}\n      {showPaymentModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 max-w-md w-full mx-4\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Request Payout</h3>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Payout Amount</label>\n                <div className=\"text-2xl font-bold text-gray-900\">{formatCurrency(stats.pendingPayout)}</div>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Payment Method</label>\n                <select\n                  value={selectedPaymentMethod}\n                  onChange={(e) => setSelectedPaymentMethod(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                >\n                  <option value=\"paypal\">PayPal</option>\n                  <option value=\"bank\">Bank Transfer</option>\n                  <option value=\"stripe\">Stripe</option>\n                </select>\n              </div>\n              \n              <div className=\"flex space-x-3 pt-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowPaymentModal(false)}\n                  className=\"flex-1\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleConfirmPayout}\n                  className=\"flex-1\"\n                >\n                  Confirm Payout\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AffiliateProgram; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Analytics.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAnalyticsDashboard' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1252,1255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1252,1255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'prev' is defined but never used.","line":64,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6500,6503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6500,6503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationData' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":192,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":192,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'revenueData' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":202,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'satisfactionData' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":212,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":212,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getTrendIcon' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":219,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":219,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":370,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":370,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12980,12983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12980,12983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":392,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":392,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14097,14100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14097,14100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":531,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":531,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20546,20549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20546,20549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":555,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":555,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21728,21731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21728,21731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":599,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":599,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24047,24050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24047,24050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":686,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":686,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28257,28260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28257,28260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FC, useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/Card';\nimport { Button } from '../components/ui/Button';\nimport { Badge } from '../components/ui/Badge';\nimport { \n  TrendingUp, \n  TrendingDown, \n  Users, \n  MessageSquare, \n  DollarSign, \n  Activity, \n  Bot,\n  Clock,\n  Target,\n  Zap,\n  Download,\n  Calendar,\n  Filter,\n  Search\n} from 'lucide-react';\nimport { LineChart } from '../components/charts/LineChart';\nimport { BarChart } from '../components/charts/BarChart';\nimport { DonutChart } from '../components/charts/DonutChart';\nimport { getAnalyticsDashboard } from '../lib/services/analyticsService';\n\ninterface ChatbotAnalytics {\n  id: string;\n  name: string;\n  totalConversations: number;\n  activeUsers: number;\n  responseTime: number;\n  satisfactionRate: number;\n  conversionRate: number;\n  revenue: number;\n  messagesPerConversation: number;\n  resolutionRate: number;\n}\n\ninterface AnalyticsData {\n  chatbots: ChatbotAnalytics[];\n  timeRange: string;\n  totalRevenue: number;\n  totalConversations: number;\n  averageResponseTime: number;\n  overallSatisfaction: number;\n}\n\nconst Analytics: FC = () => {\n  const [analyticsData, setAnalyticsData] = useState<any>(null);\n  const [selectedChatbot, setSelectedChatbot] = useState<string>('all');\n  const [timeRange, setTimeRange] = useState<string>('7d');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [realTimeData, setRealTimeData] = useState({\n    activeUsers: 0,\n    currentConversations: 0,\n    responseTime: 0,\n    satisfaction: 0\n  });\n\n  // Real-time data simulation\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRealTimeData(prev => ({\n        activeUsers: Math.floor(Math.random() * 50) + 25,\n        currentConversations: Math.floor(Math.random() * 15) + 5,\n        responseTime: Math.floor(Math.random() * 1000) + 500,\n        satisfaction: Math.floor(Math.random() * 20) + 80\n      }));\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    const loadAnalytics = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        // Enhanced mock data with comprehensive metrics\n        const mockData = {\n          chatbots: [\n            {\n              id: 'chatbot-1',\n              name: 'Customer Support Bot',\n              totalConversations: 2845,\n              activeUsers: 1200,\n              responseTime: 1.2,\n              satisfactionRate: 94.5,\n              conversionRate: 23.8,\n              revenue: 45600,\n              messagesPerConversation: 6.4,\n              resolutionRate: 91.7,\n              category: 'Support',\n              status: 'Active',\n              growth: 12.5,\n              topIntents: ['order_status', 'returns', 'shipping', 'billing'],\n              hourlyData: Array.from({ length: 24 }, (_, i) => ({\n                hour: i,\n                conversations: Math.floor(Math.random() * 50) + 10,\n                satisfaction: Math.floor(Math.random() * 20) + 80\n              }))\n            },\n            {\n              id: 'chatbot-2',\n              name: 'Sales Assistant',\n              totalConversations: 1892,\n              activeUsers: 856,\n              responseTime: 0.8,\n              satisfactionRate: 96.2,\n              conversionRate: 31.4,\n              revenue: 78900,\n              messagesPerConversation: 8.2,\n              resolutionRate: 88.3,\n              category: 'Sales',\n              status: 'Active',\n              growth: 18.7,\n              topIntents: ['product_info', 'pricing', 'demo_request', 'features'],\n              hourlyData: Array.from({ length: 24 }, (_, i) => ({\n                hour: i,\n                conversations: Math.floor(Math.random() * 40) + 5,\n                satisfaction: Math.floor(Math.random() * 15) + 85\n              }))\n            },\n            {\n              id: 'chatbot-3',\n              name: 'Product Guide',\n              totalConversations: 1234,\n              activeUsers: 567,\n              responseTime: 1.5,\n              satisfactionRate: 89.1,\n              conversionRate: 19.2,\n              revenue: 23400,\n              messagesPerConversation: 5.1,\n              resolutionRate: 85.6,\n              category: 'Information',\n              status: 'Active',\n              growth: 8.3,\n              topIntents: ['how_to_use', 'troubleshooting', 'features', 'compatibility'],\n              hourlyData: Array.from({ length: 24 }, (_, i) => ({\n                hour: i,\n                conversations: Math.floor(Math.random() * 30) + 3,\n                satisfaction: Math.floor(Math.random() * 25) + 75\n              }))\n            }\n          ],\n          timeRange: timeRange,\n          totalRevenue: 147900,\n          totalConversations: 5971,\n          averageResponseTime: 1.2,\n          overallSatisfaction: 93.6,\n          weeklyData: [\n            { day: 'Mon', conversations: 847, revenue: 21200, satisfaction: 94 },\n            { day: 'Tue', conversations: 923, revenue: 23400, satisfaction: 93 },\n            { day: 'Wed', conversations: 756, revenue: 18900, satisfaction: 95 },\n            { day: 'Thu', conversations: 1024, revenue: 26800, satisfaction: 92 },\n            { day: 'Fri', conversations: 1156, revenue: 29100, satisfaction: 94 },\n            { day: 'Sat', conversations: 634, revenue: 15600, satisfaction: 96 },\n            { day: 'Sun', conversations: 631, revenue: 12900, satisfaction: 95 }\n          ],\n          channelDistribution: [\n            { channel: 'Website', conversations: 2845, percentage: 47.6 },\n            { channel: 'WhatsApp', conversations: 1567, percentage: 26.2 },\n            { channel: 'Shopify', conversations: 892, percentage: 14.9 },\n            { channel: 'Messenger', conversations: 667, percentage: 11.2 }\n          ],\n          sentimentAnalysis: {\n            positive: 78.4,\n            neutral: 16.8,\n            negative: 4.8\n          },\n          topIssues: [\n            { issue: 'Order Status', count: 847, resolution: 96.2 },\n            { issue: 'Product Information', count: 623, resolution: 91.5 },\n            { issue: 'Shipping Inquiry', count: 456, resolution: 94.8 },\n            { issue: 'Returns Process', count: 334, resolution: 89.7 },\n            { issue: 'Technical Support', count: 289, resolution: 87.2 }\n          ]\n        };\n        \n        setAnalyticsData(mockData);\n      } catch (err: any) {\n        setError(err.message || 'Failed to load analytics');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadAnalytics();\n  }, [timeRange]);\n\n  const conversationData = [\n    { name: 'Mon', value: 245 },\n    { name: 'Tue', value: 312 },\n    { name: 'Wed', value: 289 },\n    { name: 'Thu', value: 456 },\n    { name: 'Fri', value: 523 },\n    { name: 'Sat', value: 398 },\n    { name: 'Sun', value: 367 },\n  ];\n\n  const revenueData = [\n    { name: 'Mon', value: 3200 },\n    { name: 'Tue', value: 4100 },\n    { name: 'Wed', value: 3800 },\n    { name: 'Thu', value: 6200 },\n    { name: 'Fri', value: 7100 },\n    { name: 'Sat', value: 5400 },\n    { name: 'Sun', value: 4800 },\n  ];\n\n  const satisfactionData = [\n    { name: 'Very Satisfied', value: 65, color: '#10B981' },\n    { name: 'Satisfied', value: 25, color: '#3B82F6' },\n    { name: 'Neutral', value: 8, color: '#F59E0B' },\n    { name: 'Dissatisfied', value: 2, color: '#EF4444' },\n  ];\n\n  const getTrendIcon = (trend: 'up' | 'down') => {\n    return trend === 'up' ? <TrendingUp className=\"h-4 w-4 text-green-500\" /> : <TrendingDown className=\"h-4 w-4 text-red-500\" />;\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatNumber = (num: number) => {\n    return new Intl.NumberFormat('en-US').format(num);\n  };\n\n  const getGrowthIndicator = (growth: number) => {\n    if (growth > 0) {\n      return (\n        <div className=\"flex items-center text-green-600\">\n          <span className=\"text-sm\">↗</span>\n          <span className=\"text-xs ml-1\">+{growth}%</span>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"flex items-center text-red-600\">\n          <span className=\"text-sm\">↘</span>\n          <span className=\"text-xs ml-1\">{growth}%</span>\n        </div>\n      );\n    }\n  };\n\n  const handleExportData = () => {\n    try {\n      // Prepare export data\n      const exportData = {\n        exportDate: new Date().toISOString(),\n        timeRange: timeRange,\n        selectedChatbot: selectedChatbot,\n        summary: {\n          totalRevenue: analyticsData.totalRevenue,\n          totalConversations: analyticsData.totalConversations,\n          averageResponseTime: analyticsData.averageResponseTime,\n          overallSatisfaction: analyticsData.overallSatisfaction\n        },\n        chatbots: analyticsData.chatbots,\n        weeklyData: analyticsData.weeklyData,\n        channelDistribution: analyticsData.channelDistribution,\n        sentimentAnalysis: analyticsData.sentimentAnalysis,\n        topIssues: analyticsData.topIssues\n      };\n\n      // Convert to CSV format\n      const csvContent = [\n        // Header\n        'Export Date,Time Range,Total Revenue,Total Conversations,Avg Response Time,Overall Satisfaction',\n        // Summary data\n        `${new Date().toLocaleDateString()},${timeRange},${exportData.summary.totalRevenue},${exportData.summary.totalConversations},${exportData.summary.averageResponseTime}s,${exportData.summary.overallSatisfaction}%`,\n        '',\n        'Chatbot Performance',\n        'Name,Conversations,Active Users,Response Time,Satisfaction Rate,Conversion Rate,Revenue',\n        ...exportData.chatbots.map(bot => \n          `\"${bot.name}\",${bot.totalConversations},${bot.activeUsers},${bot.responseTime}s,${bot.satisfactionRate}%,${bot.conversionRate}%,${bot.revenue}`\n        ),\n        '',\n        'Weekly Performance',\n        'Day,Conversations,Revenue,Satisfaction',\n        ...exportData.weeklyData.map(day => \n          `${day.day},${day.conversations},${day.revenue},${day.satisfaction}%`\n        ),\n        '',\n        'Channel Distribution',\n        'Channel,Conversations,Percentage',\n        ...exportData.channelDistribution.map(channel => \n          `${channel.channel},${channel.conversations},${channel.percentage}%`\n        )\n      ].join('\\n');\n\n      // Create and download file\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const link = document.createElement('a');\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', `analytics-export-${timeRange}-${new Date().getTime()}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      // Show success message\n      alert('Analytics data exported successfully!');\n    } catch (error) {\n      console.error('Export failed:', error);\n      alert('Failed to export data. Please try again.');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50/50 pt-16\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n              <p className=\"mt-4 text-gray-600\">Loading analytics...</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50/50 pt-16\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center py-12\">\n            <div className=\"text-6xl mb-4\">📊</div>\n            <h3 className=\"mt-2 text-sm font-medium text-red-600\">{error}</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">Check your connection or try again later.</p>\n            <Button \n              onClick={() => window.location.reload()} \n              className=\"mt-4\"\n              variant=\"primary\"\n            >\n              Retry\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!analyticsData) {\n    return (\n      <div className=\"min-h-screen bg-gray-50/50 pt-16\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center py-12\">\n            <div className=\"text-6xl mb-4\">📈</div>\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No analytics data available</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">Start using your chatbots to see analytics here.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const selectedBot = selectedChatbot !== 'all' \n    ? analyticsData.chatbots.find((bot: any) => bot.id === selectedChatbot)\n    : null;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50/50 pt-16\">\n      <div className=\"max-w-7xl mx-auto px-6 space-y-8\">\n        {/* Enhanced Header */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 font-sans\">Analytics Dashboard</h1>\n              <p className=\"mt-2 text-gray-600 text-base font-normal max-w-3xl\">\n                Comprehensive insights into your chatbot performance and customer engagement\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <select\n                value={selectedChatbot}\n                onChange={(e) => setSelectedChatbot(e.target.value)}\n                className=\"px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                <option value=\"all\">All Chatbots</option>\n                {analyticsData.chatbots.map((bot: any) => (\n                  <option key={bot.id} value={bot.id}>{bot.name}</option>\n                ))}\n              </select>\n              <select\n                value={timeRange}\n                onChange={(e) => setTimeRange(e.target.value)}\n                className=\"px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                <option value=\"7d\">Last 7 days</option>\n                <option value=\"30d\">Last 30 days</option>\n                <option value=\"90d\">Last 3 months</option>\n                <option value=\"1y\">Last 12 months</option>\n              </select>\n              <Button \n                variant=\"outline\" \n                className=\"inline-flex items-center text-gray-700 border-gray-300 hover:bg-gray-50\"\n                onClick={handleExportData}\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Data\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Real-Time Metrics */}\n        <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl shadow-lg p-6 text-white\">\n          <h2 className=\"text-xl font-semibold mb-4 text-white\">🔴 Live Metrics</h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-white\">{realTimeData.activeUsers}</div>\n              <div className=\"text-sm text-white opacity-90\">Active Users</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-white\">{realTimeData.currentConversations}</div>\n              <div className=\"text-sm text-white opacity-90\">Live Conversations</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-white\">{realTimeData.responseTime}ms</div>\n              <div className=\"text-sm text-white opacity-90\">Response Time</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-white\">{realTimeData.satisfaction}%</div>\n              <div className=\"text-sm text-white opacity-90\">Satisfaction</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Enhanced Key Metrics */}\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n          <Card className=\"overflow-hidden\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Total Conversations</p>\n                  <p className=\"text-3xl font-bold text-gray-900\">\n                    {selectedBot ? formatNumber(selectedBot.totalConversations) : formatNumber(analyticsData.totalConversations)}\n                  </p>\n                  {selectedBot && getGrowthIndicator(selectedBot.growth)}\n                </div>\n                <div className=\"p-3 bg-blue-100 rounded-lg\">\n                  <span className=\"text-2xl\">💬</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"overflow-hidden\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Total Revenue</p>\n                  <p className=\"text-3xl font-bold text-gray-900\">\n                    {selectedBot ? formatCurrency(selectedBot.revenue) : formatCurrency(analyticsData.totalRevenue)}\n                  </p>\n                  <div className=\"flex items-center text-green-600\">\n                    <span className=\"text-sm\">↗</span>\n                    <span className=\"text-xs ml-1\">+24.3%</span>\n                  </div>\n                </div>\n                <div className=\"p-3 bg-green-100 rounded-lg\">\n                  <span className=\"text-2xl\">💰</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"overflow-hidden\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Avg Response Time</p>\n                  <p className=\"text-3xl font-bold text-gray-900\">\n                    {selectedBot ? `${selectedBot.responseTime}s` : `${analyticsData.averageResponseTime}s`}\n                  </p>\n                  <div className=\"flex items-center text-green-600\">\n                    <span className=\"text-sm\">↘</span>\n                    <span className=\"text-xs ml-1\">-12.5%</span>\n                  </div>\n                </div>\n                <div className=\"p-3 bg-purple-100 rounded-lg\">\n                  <span className=\"text-2xl\">⚡</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"overflow-hidden\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Satisfaction Rate</p>\n                  <p className=\"text-3xl font-bold text-gray-900\">\n                    {selectedBot ? `${selectedBot.satisfactionRate}%` : `${analyticsData.overallSatisfaction}%`}\n                  </p>\n                  <div className=\"flex items-center text-green-600\">\n                    <span className=\"text-sm\">↗</span>\n                    <span className=\"text-xs ml-1\">+3.7%</span>\n                  </div>\n                </div>\n                <div className=\"p-3 bg-yellow-100 rounded-lg\">\n                  <span className=\"text-2xl\">😊</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Enhanced Charts Section */}\n        <div className=\"grid gap-6 lg:grid-cols-2\">\n          {/* Weekly Performance Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Weekly Performance Trends</CardTitle>\n              <CardDescription>Conversations and revenue over the last 7 days</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {analyticsData.weeklyData.map((day: any, index: number) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"font-medium text-gray-900\">{day.day}</div>\n                      <Badge variant=\"secondary\">{day.satisfaction}% satisfaction</Badge>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold text-gray-900\">{formatNumber(day.conversations)} conversations</div>\n                      <div className=\"text-sm text-gray-500\">{formatCurrency(day.revenue)}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Channel Distribution */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Channel Distribution</CardTitle>\n              <CardDescription>Conversation volume by platform</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {analyticsData.channelDistribution.map((channel: any, index: number) => (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-medium text-gray-900\">{channel.channel}</span>\n                      <span className=\"text-sm text-gray-500\">{channel.percentage}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div \n                        className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                        style={{ width: `${channel.percentage}%` }}\n                      ></div>\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      {formatNumber(channel.conversations)} conversations\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Detailed Chatbot Performance */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Chatbot Performance Comparison</CardTitle>\n            <CardDescription>Detailed metrics for each chatbot</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-gray-200\">\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Chatbot</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Category</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Conversations</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Revenue</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Conversion</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Satisfaction</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Growth</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Status</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {analyticsData.chatbots.map((bot: any) => (\n                    <tr key={bot.id} className=\"border-b border-gray-100 hover:bg-gray-50 transition-colors\">\n                      <td className=\"py-4 px-4\">\n                        <div className=\"flex items-center\">\n                          <span className=\"text-2xl mr-3\">🤖</span>\n                          <div>\n                            <div className=\"font-medium text-gray-900\">{bot.name}</div>\n                            <div className=\"text-sm text-gray-500\">{bot.activeUsers} active users</div>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"py-4 px-4\">\n                        <Badge variant=\"secondary\">{bot.category}</Badge>\n                      </td>\n                      <td className=\"py-4 px-4 text-gray-700\">{formatNumber(bot.totalConversations)}</td>\n                      <td className=\"py-4 px-4 text-gray-700 font-medium\">{formatCurrency(bot.revenue)}</td>\n                      <td className=\"py-4 px-4 text-gray-700\">{bot.conversionRate}%</td>\n                      <td className=\"py-4 px-4\">\n                        <div className=\"flex items-center\">\n                          <span className=\"text-gray-700\">{bot.satisfactionRate}%</span>\n                          <div className=\"ml-2 w-16 bg-gray-200 rounded-full h-2\">\n                            <div \n                              className=\"bg-green-500 h-2 rounded-full\"\n                              style={{ width: `${bot.satisfactionRate}%` }}\n                            ></div>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"py-4 px-4\">\n                        {getGrowthIndicator(bot.growth)}\n                      </td>\n                      <td className=\"py-4 px-4\">\n                        <Badge variant={bot.status === 'Active' ? \"default\" : \"secondary\"}>\n                          {bot.status}\n                        </Badge>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Advanced Insights */}\n        <div className=\"grid gap-6 lg:grid-cols-3\">\n          {/* Sentiment Analysis */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Sentiment Analysis</CardTitle>\n              <CardDescription>Customer emotion analysis</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <span className=\"text-green-500 mr-2\">😊</span>\n                    <span className=\"text-gray-700\">Positive</span>\n                  </div>\n                  <span className=\"font-semibold\">{analyticsData.sentimentAnalysis.positive}%</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <span className=\"text-gray-400 mr-2\">😐</span>\n                    <span className=\"text-gray-700\">Neutral</span>\n                  </div>\n                  <span className=\"font-semibold\">{analyticsData.sentimentAnalysis.neutral}%</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <span className=\"text-red-500 mr-2\">😞</span>\n                    <span className=\"text-gray-700\">Negative</span>\n                  </div>\n                  <span className=\"font-semibold\">{analyticsData.sentimentAnalysis.negative}%</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Top Issues */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Top Customer Issues</CardTitle>\n              <CardDescription>Most common inquiries</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {analyticsData.topIssues.map((issue: any, index: number) => (\n                  <div key={index} className=\"flex items-center justify-between p-2 hover:bg-gray-50 rounded\">\n                    <div>\n                      <div className=\"font-medium text-gray-900\">{issue.issue}</div>\n                      <div className=\"text-sm text-gray-500\">{issue.count} cases</div>\n                    </div>\n                    <Badge variant={issue.resolution > 90 ? \"default\" : \"secondary\"}>\n                      {issue.resolution}% resolved\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Performance Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Performance Summary</CardTitle>\n              <CardDescription>Key performance indicators</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-700\">Average Messages per Chat</span>\n                  <span className=\"font-semibold\">6.4</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-700\">First Response Rate</span>\n                  <span className=\"font-semibold text-green-600\">94.2%</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-700\">Issue Resolution Rate</span>\n                  <span className=\"font-semibold text-green-600\">89.7%</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-700\">Customer Retention</span>\n                  <span className=\"font-semibold text-blue-600\">76.3%</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-700\">Peak Hours</span>\n                  <span className=\"font-semibold\">2PM - 4PM</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Analytics; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Chat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Chatbot.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/ChatbotSuccess.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/ConfirmEmailSent.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[821,824],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[821,824],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[876,879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[876,879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1360,1363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1360,1363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4145,4148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4145,4148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":220,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7582,7585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7582,7585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport StatCard from '../components/dashboard/StatCard';\nimport ActiveChatbots from '../components/dashboard/ActiveChatbots';\nimport RecentEvents from '../components/dashboard/RecentEvents';\nimport { MockApiService } from '../services/mockApi';\n\ninterface Event {\n  id: string;\n  type: 'chatbot_created' | 'workflow_executed' | 'error' | 'warning';\n  title: string;\n  description: string;\n  timestamp: string;\n}\n\ninterface SystemHealth {\n  label: string;\n  value: string;\n  status: 'green' | 'yellow' | 'red';\n}\n\nconst Dashboard: React.FC = () => {\n  const navigate = useNavigate();\n  const [timeRange, setTimeRange] = useState<'24h' | '7d' | '30d' | '90d'>('24h');\n  const [dashboardStats, setDashboardStats] = useState<any>(null);\n  const [chatbots, setChatbots] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const [stats, bots] = await Promise.all([\n          MockApiService.getDashboardStats(),\n          MockApiService.getChatbots()\n        ]);\n        \n        setDashboardStats(stats);\n        setChatbots(bots);\n      } catch (err: any) {\n        console.error('Failed to fetch dashboard data:', err);\n        setError(err.message || 'Failed to load dashboard data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Handle loading states\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50/50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Handle error states\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50/50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-red-600 text-6xl mb-4\">⚠️</div>\n          <h2 className=\"text-2xl font-semibold text-gray-900 mb-2\">Unable to load dashboard</h2>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <button \n            onClick={() => window.location.reload()} \n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const statsData = dashboardStats || { totalMessages: 0, totalChatbots: 0, activeUsers: 0, responseTime: 0 };\n\n  // Transform real data into the format expected by StatCard\n  const stats = [\n    {\n      title: 'Total Messages',\n      value: statsData.totalMessages,\n      icon: <span className=\"text-xl\">�</span>,\n      trend: { value: 12, isPositive: true },\n      details: [\n        { label: 'This Month', value: statsData.totalMessages.toString() },\n        { label: 'Avg. per Day', value: Math.round(statsData.totalMessages / 30).toString() },\n        { label: 'Response Rate', value: '98%' }\n      ]\n    },\n    {\n      title: 'Active Chatbots',\n      value: statsData.totalChatbots,\n      icon: <span className=\"text-xl\">🤖</span>,\n      trend: { value: 4, isPositive: true },\n      details: [\n        { label: 'Total Bots', value: statsData.totalChatbots.toString() },\n        { label: 'Active Users', value: statsData.activeUsers.toString() },\n        { label: 'Uptime', value: '99.9%' }\n      ]\n    },\n    {\n      title: 'Performance',\n      value: Math.round(statsData.responseTime * 1000), // Convert to ms\n      icon: <span className=\"text-xl\">⚡</span>,\n      trend: { value: 2, isPositive: false },\n      details: [\n        { label: 'Avg. Response', value: `${Math.round(statsData.responseTime * 1000)}ms` },\n        { label: 'Success Rate', value: '95%' },\n        { label: 'CPU Usage', value: '42%' }\n      ]\n    }\n  ];\n\n  // Transform chatbots data for display\n  const transformedChatbots = chatbots.map((bot: any) => ({\n    id: bot.id,\n    name: bot.name,\n    description: bot.description || 'AI Assistant',\n    status: bot.isActive ? 'Active' : 'Inactive',\n    isActive: bot.isActive,\n    icon: '🤖',\n    metrics: {\n      conversations: bot.metrics.totalMessages,\n      avgResponseTime: `${Math.round(bot.metrics.avgResponseTime * 1000)}ms`,\n      satisfaction: Math.round(bot.metrics.satisfactionScore * 10) / 10\n    }\n  }));\n\n  const recentEvents: Event[] = [\n    {\n      id: '1',\n      type: 'chatbot_created',\n      title: 'New Chatbot Created',\n      description: 'Customer Support Bot - 17:24:20',\n      timestamp: '2 hours ago'\n    },\n    {\n      id: '2',\n      type: 'workflow_executed',\n      title: 'Workflow Executed',\n      description: 'Order Processing - 16:24:20',\n      timestamp: '3 hours ago'\n    }\n  ];\n\n  const systemHealth: SystemHealth[] = [\n    { label: 'API Status', value: 'Operational', status: 'green' },\n    { label: 'Response Time', value: '124ms', status: 'green' },\n    { label: 'Memory Usage', value: '68%', status: 'yellow' },\n    { label: 'Error Rate', value: '0.02%', status: 'green' }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50/50 pt-16\">\n      <div className=\"max-w-7xl mx-auto px-6 space-y-8\">\n        {/* Header with Time Range Selector */}\n        <div className=\"flex items-center justify-between bg-white p-6 rounded-xl shadow-sm\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 font-sans\">Dashboard</h1>\n            <p className=\"text-gray-600 mt-2 text-base font-normal\">\n              Monitor your chatbots' performance and recent activities\n            </p>\n          </div>\n          <div className=\"flex items-center gap-2 bg-gray-50 rounded-lg p-1\">\n            {(['24h', '7d', '30d', '90d'] as const).map((range) => (\n              <button\n                key={range}\n                onClick={() => setTimeRange(range)}\n                className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${\n                  timeRange === range\n                    ? 'bg-blue-600 text-white'\n                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'\n                }`}\n              >\n                {range}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {stats.map((stat, index) => (\n            <StatCard\n              key={index}\n              title={stat.title}\n              value={stat.value}\n              icon={stat.icon}\n              trend={stat.trend}\n              details={stat.details}\n            />\n          ))}\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Chatbots */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <div className=\"bg-white rounded-lg shadow-sm\">\n              <ActiveChatbots\n                chatbots={transformedChatbots}\n                onChatbotClick={(id: string) => navigate(`/chatbot/${id}`)}\n              />\n            </div>\n            \n            {/* Chatbot Metrics */}\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Chatbot Metrics</h2>\n              <div className=\"space-y-4\">\n                {transformedChatbots.map((chatbot: any) => (\n                  <div \n                    key={chatbot.id} \n                    className=\"p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer\"\n                  >\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h3 className=\"font-medium text-gray-900\">{chatbot.name}</h3>\n                      <span className={`px-3 py-1 text-xs rounded-full ${\n                        chatbot.isActive ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-700'\n                      }`}>\n                        {chatbot.status}\n                      </span>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-6\">\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold text-gray-900\">\n                          {chatbot.metrics.conversations}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">Conversations</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold text-gray-900\">\n                          {chatbot.metrics.avgResponseTime}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">Avg. Response</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold text-gray-900\">\n                          {chatbot.metrics.satisfaction}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">Satisfaction</div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Right Column */}\n          <div className=\"space-y-6\">\n            <div className=\"bg-white rounded-lg shadow-sm\">\n              <RecentEvents events={recentEvents} />\n            </div>\n            \n            {/* System Health */}\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">System Health</h2>\n              <div className=\"space-y-4\">\n                {systemHealth.map((metric, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <span className=\"text-sm text-gray-600\">{metric.label}</span>\n                    <span className={`text-sm font-medium ${\n                      metric.status === 'green' ? 'text-green-600' :\n                      metric.status === 'yellow' ? 'text-yellow-600' :\n                      'text-red-600'\n                    }`}>\n                      {metric.value}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {[\n            { \n              title: 'Create Chatbot',\n              icon: '🤖',\n              path: '/chatbots',\n              description: 'Build a new AI assistant'\n            },\n            { \n              title: 'Add Workflow',\n              icon: '⚡',\n              path: '/workflows',\n              description: 'Automate conversations'\n            },\n            { \n              title: 'View Analytics',\n              icon: '📊',\n              path: '/analytics',\n              description: 'Deep dive into data'\n            },\n            { \n              title: 'Settings',\n              icon: '⚙️',\n              path: '/settings',\n              description: 'Configure your account'\n            }\n          ].map((action) => (\n            <button\n              key={action.title}\n              onClick={() => navigate(action.path)}\n              className=\"flex flex-col items-center p-6 bg-white rounded-lg shadow-sm hover:bg-gray-50 transition-colors text-center\"\n            >\n              <span className=\"text-2xl mb-2\">{action.icon}</span>\n              <h3 className=\"font-medium text-gray-900 mb-1\">{action.title}</h3>\n              <p className=\"text-sm text-gray-500\">{action.description}</p>\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/FAQ.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/FaqManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1380,1383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1380,1383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2576,2579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2576,2579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2960,2963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2960,2963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4082,4085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4082,4085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Plus, Edit, Trash2, Search, Filter } from 'lucide-react';\nimport { MockApiService } from '../services/mockApi';\n\ninterface FAQ {\n  id: string;\n  question: string;\n  answer: string;\n  category: string;\n  tags: string[];\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst FaqManagement = () => {\n  const [faqs, setFaqs] = useState<FAQ[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('All');\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [editingFaq, setEditingFaq] = useState<FAQ | null>(null);\n  const [modalData, setModalData] = useState({\n    question: '',\n    answer: '',\n    category: 'Integration',\n    tags: ''\n  });\n  const [modalLoading, setModalLoading] = useState(false);\n  const [modalError, setModalError] = useState<string | null>(null);\n\n  const categories = ['All', 'Integration', 'Billing', 'Customization', 'Support', 'Features'];\n\n  // Fetch FAQs from backend\n  useEffect(() => {\n    loadFaqs();\n  }, []);\n\n  const loadFaqs = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await MockApiService.getFAQs();\n      setFaqs(data);\n    } catch (err: any) {\n      console.error('Failed to fetch FAQs:', err);\n      setError(err.message || 'Failed to load FAQs');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredFaqs = faqs.filter(faq => {\n    const matchesSearch = faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      faq.answer.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === 'All' || faq.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const handleAddFaq = () => {\n    setEditingFaq(null);\n    setModalData({ question: '', answer: '', category: 'Integration', tags: '' });\n    setShowAddModal(true);\n    setModalError(null);\n  };\n\n  const handleEditFaq = (faq: FAQ) => {\n    setEditingFaq(faq);\n    setModalData({ question: faq.question, answer: faq.answer, category: faq.category, tags: faq.tags.join(',') });\n    setShowAddModal(true);\n    setModalError(null);\n  };\n\n  const handleDeleteFaq = async (id: string) => {\n    if (window.confirm('Are you sure you want to delete this FAQ?')) {\n      try {\n        await MockApiService.deleteFAQ(id);\n        setFaqs(faqs.filter(faq => faq.id !== id));\n      } catch (err: any) {\n        alert(err.message || 'Failed to delete FAQ');\n      }\n    }\n  };\n\n  const handleTogglePublish = async (id: string) => {\n    const faq = faqs.find(f => f.id === id);\n    if (!faq) return;\n    try {\n      const updated = await MockApiService.updateFAQ(id, { ...faq, isActive: !faq.isActive });\n      setFaqs(faqs.map(f => (f.id === id ? updated : f)));\n    } catch (err: any) {\n      alert(err.message || 'Failed to update FAQ');\n    }\n  };\n\n  const handleModalChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    setModalData({ ...modalData, [e.target.name]: e.target.value });\n  };\n\n  const handleModalSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setModalLoading(true);\n    setModalError(null);\n    try {\n      if (editingFaq) {\n        const tags = typeof modalData.tags === 'string' ? modalData.tags.split(',').map(t => t.trim()) : modalData.tags;\n        const updated = await MockApiService.updateFAQ(editingFaq.id, { \n          ...editingFaq, \n          ...modalData,\n          tags \n        });\n        setFaqs(faqs.map(f => (f.id === editingFaq.id ? updated : f)));\n      } else {\n        const tags = typeof modalData.tags === 'string' ? modalData.tags.split(',').map(t => t.trim()) : modalData.tags || [];\n        const created = await MockApiService.createFAQ({ \n          ...modalData, \n          tags \n        });\n        setFaqs([created, ...faqs]);\n      }\n      setShowAddModal(false);\n    } catch (err: any) {\n      console.error('Failed to save FAQ:', err);\n      setModalError(err.message || 'Failed to save FAQ');\n    } finally {\n      setModalLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50/50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading FAQs...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50/50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-red-600 text-6xl mb-4\">⚠️</div>\n          <h2 className=\"text-2xl font-semibold text-gray-900 mb-2\">Unable to load FAQs</h2>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <button \n            onClick={() => loadFaqs()} \n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50/50 pt-16\">\n      <div className=\"max-w-7xl mx-auto px-6 space-y-8\">\n        {/* Enhanced Header */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 font-sans\">FAQ Management</h1>\n              <p className=\"mt-2 text-gray-600 text-base font-normal max-w-3xl\">\n                Create, edit, and organize your FAQ content to help users find answers quickly and efficiently\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={handleAddFaq}\n                className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add New FAQ\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Enhanced Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <div className=\"bg-white p-6 rounded-xl border border-gray-200 shadow-sm\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 bg-blue-100 rounded-lg\">\n                <span className=\"text-2xl\">❓</span>\n              </div>\n              <div className=\"ml-4\">\n                <div className=\"text-2xl font-bold text-gray-900\">{faqs.length}</div>\n                <div className=\"text-sm font-medium text-gray-500\">Total FAQs</div>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-white p-6 rounded-xl border border-gray-200 shadow-sm\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 bg-green-100 rounded-lg\">\n                <span className=\"text-2xl\">✅</span>\n              </div>\n              <div className=\"ml-4\">\n                <div className=\"text-2xl font-bold text-gray-900\">{faqs.filter(f => f.isActive).length}</div>\n                <div className=\"text-sm font-medium text-gray-500\">Published</div>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-white p-6 rounded-xl border border-gray-200 shadow-sm\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 bg-yellow-100 rounded-lg\">\n                <span className=\"text-2xl\">📝</span>\n              </div>\n              <div className=\"ml-4\">\n                <div className=\"text-2xl font-bold text-gray-900\">{faqs.filter(f => !f.isActive).length}</div>\n                <div className=\"text-sm font-medium text-gray-500\">Drafts</div>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-white p-6 rounded-xl border border-gray-200 shadow-sm\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 bg-purple-100 rounded-lg\">\n                <span className=\"text-2xl\">📂</span>\n              </div>\n              <div className=\"ml-4\">\n                <div className=\"text-2xl font-bold text-gray-900\">{categories.filter(c => c !== 'All').length}</div>\n                <div className=\"text-sm font-medium text-gray-500\">Categories</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* Enhanced Filters */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search FAQs...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Filter className=\"w-4 h-4 text-gray-400\" />\n              <select\n                value={selectedCategory}\n                onChange={(e) => setSelectedCategory(e.target.value)}\n                className=\"border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                {categories.map(category => (\n                  <option key={category} value={category}>{category}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n        {/* FAQ List */}\n        <div className=\"bg-white rounded-lg shadow-sm\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-medium text-gray-900\">\n              FAQs ({filteredFaqs.length})\n            </h2>\n          </div>\n          <div className=\"divide-y divide-gray-200\">\n            {filteredFaqs.length === 0 ? (\n              <div className=\"p-12 text-center\">\n                <div className=\"text-gray-400 mb-4\">\n                  <Search className=\"mx-auto h-12 w-12\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No FAQs found</h3>\n                <p className=\"text-gray-500 mb-6\">\n                  {searchTerm || selectedCategory !== 'All'\n                    ? 'Try adjusting your search or filter criteria'\n                    : 'Get started by creating your first FAQ'}\n                </p>\n                {!searchTerm && selectedCategory === 'All' && (\n                  <button\n                    onClick={handleAddFaq}\n                    className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add New FAQ\n                  </button>\n                )}\n              </div>\n            ) : (\n              filteredFaqs.map((faq) => (\n                <div key={faq.id} className=\"p-6 hover:bg-gray-50\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <h3 className=\"text-lg font-medium text-gray-900\">{faq.question}</h3>\n                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                          faq.isActive\n                            ? 'bg-green-100 text-green-800'\n                            : 'bg-gray-100 text-gray-800'\n                        }`}>\n                          {faq.isActive ? 'Active' : 'Inactive'}\n                        </span>\n                        <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                          {faq.category}\n                        </span>\n                      </div>\n                      <p className=\"text-gray-600 mb-3\">{faq.answer}</p>\n                      <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                        <span>Created: {faq.createdAt}</span>\n                        <span>Updated: {faq.updatedAt}</span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2 ml-4\">\n                      <button\n                        onClick={() => handleTogglePublish(faq.id)}\n                        className={`px-3 py-1 text-xs font-medium rounded-md ${\n                          faq.isActive\n                            ? 'bg-red-100 text-red-700 hover:bg-red-200'\n                            : 'bg-green-100 text-green-700 hover:bg-green-200'\n                        }`}\n                      >\n                        {faq.isActive ? 'Deactivate' : 'Activate'}\n                      </button>\n                      <button\n                        onClick={() => handleEditFaq(faq)}\n                        className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-md\"\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </button>\n                      <button\n                        onClick={() => handleDeleteFaq(faq.id)}\n                        className=\"p-2 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded-md\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n        {/* Add/Edit Modal */}\n        {showAddModal && (\n          <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\n            <div className=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\n              <form onSubmit={handleModalSubmit}>\n                <div className=\"mt-3\">\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-4\">\n                    {editingFaq ? 'Edit FAQ' : 'Add New FAQ'}\n                  </h3>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">Question</label>\n                      <input\n                        type=\"text\"\n                        name=\"question\"\n                        value={modalData.question}\n                        onChange={handleModalChange}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                        placeholder=\"Enter the question...\"\n                        required\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">Answer</label>\n                      <textarea\n                        name=\"answer\"\n                        value={modalData.answer}\n                        onChange={handleModalChange}\n                        rows={4}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                        placeholder=\"Enter the answer...\"\n                        required\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">Category</label>\n                      <select\n                        name=\"category\"\n                        value={modalData.category}\n                        onChange={handleModalChange}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                        required\n                      >\n                        {categories.filter(cat => cat !== 'All').map(category => (\n                          <option key={category} value={category}>{category}</option>\n                        ))}\n                      </select>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">Tags (comma-separated)</label>\n                      <input\n                        type=\"text\"\n                        name=\"tags\"\n                        value={modalData.tags}\n                        onChange={handleModalChange}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                        placeholder=\"tag1, tag2, tag3\"\n                      />\n                    </div>\n                  </div>\n                  {modalError && <div className=\"text-red-500 text-sm mt-2\">{modalError}</div>}\n                  <div className=\"flex space-x-3 pt-4\">\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowAddModal(false)}\n                      className=\"flex-1 px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\"\n                      disabled={modalLoading}\n                    >\n                      Cancel\n                    </button>\n                    <button\n                      type=\"submit\"\n                      className=\"flex-1 px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700\"\n                      disabled={modalLoading}\n                    >\n                      {modalLoading ? 'Saving...' : editingFaq ? 'Update' : 'Create'}\n                    </button>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FaqManagement; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Leads.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Login.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Login.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[644,647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[644,647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\nconst Login: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n  const { login } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n    \n    try {\n      await login(email, password);\n      navigate('/dashboard');\n    } catch (err: any) {\n      console.error('Login error:', err);\n      setError(err?.message || 'Failed to login. Please check your credentials.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            Sign in to your account\n          </h2>\n        </div>\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          {error && (\n            <div className=\"bg-red-50 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n              <span className=\"block sm:inline\">{error}</span>\n            </div>\n          )}\n          <div className=\"rounded-md shadow-sm -space-y-px\">\n            <div>\n              <input\n                type=\"email\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Email address\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                disabled={isLoading}\n              />\n            </div>\n            <div>\n              <input\n                type=\"password\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                disabled={isLoading}\n              />\n            </div>\n          </div>\n\n          <div>\n            <button\n              type=\"submit\"\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <span className=\"absolute left-0 inset-y-0 flex items-center pl-3\">\n                  <svg className=\"animate-spin h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                </span>\n              ) : null}\n              {isLoading ? 'Signing in...' : 'Sign in'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Login; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Multichannel.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Payments.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Payments.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'planId' is defined but never used.","line":149,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'planId' is defined but never used.","line":154,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":154,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":165,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":165,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":170,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":175,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":175,"endColumn":36}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FC, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/Card';\nimport { Button } from '../components/ui/Button';\nimport { CreditCard, DollarSign, Download, Plus, ArrowUpRight, ArrowDownLeft } from 'lucide-react';\nimport { useAnimation } from '../contexts/AnimationContext';\nimport { UsageTrendsChart } from '../components/charts/UsageTrendsChart';\nimport { SubscriptionCard } from '../components/subscription/SubscriptionCard';\nimport { PaymentMethodManager } from '../components/payments/PaymentMethodManager';\nimport { BillingHistory } from '../components/payments/BillingHistory';\nimport { Toast } from '../components/ui/Toast';\n\n// Mock data\nconst mockUsageData = [\n  {\n    timestamp: '2024-03-01',\n    apiCalls: 150000,\n    storageUsed: 50,\n    activeUsers: 1200,\n  },\n  {\n    timestamp: '2024-03-08',\n    apiCalls: 180000,\n    storageUsed: 55,\n    activeUsers: 1350,\n  },\n  {\n    timestamp: '2024-03-15',\n    apiCalls: 220000,\n    storageUsed: 62,\n    activeUsers: 1500,\n  },\n];\n\nconst subscriptionPlans = [\n  {\n    id: 'starter',\n    name: 'Starter',\n    price: 49,\n    billingPeriod: 'monthly' as 'monthly' | 'yearly',\n    features: [\n      { name: 'Up to 5 team members', included: true },\n      { name: 'Basic analytics', included: true },\n      { name: 'Standard support', included: true },\n      { name: 'Advanced security', included: false },\n      { name: 'Custom integrations', included: false },\n    ],\n    limits: {\n      apiCalls: 100000,\n      storage: 50,\n      users: 5,\n    },\n  },\n  {\n    id: 'pro',\n    name: 'Professional',\n    price: 99,\n    billingPeriod: 'monthly' as 'monthly' | 'yearly',\n    features: [\n      { name: 'Up to 20 team members', included: true },\n      { name: 'Advanced analytics', included: true },\n      { name: 'Priority support', included: true },\n      { name: 'Advanced security', included: true },\n      { name: 'Basic integrations', included: true },\n    ],\n    limits: {\n      apiCalls: 500000,\n      storage: 200,\n      users: 20,\n    },\n    isPopular: true,\n    isCurrent: true,\n  },\n  {\n    id: 'enterprise',\n    name: 'Enterprise',\n    price: 299,\n    billingPeriod: 'monthly' as 'monthly' | 'yearly',\n    features: [\n      { name: 'Unlimited team members', included: true },\n      { name: 'Custom analytics', included: true },\n      { name: '24/7 dedicated support', included: true },\n      { name: 'Advanced security', included: true },\n      { name: 'Custom integrations', included: true },\n    ],\n    limits: {\n      apiCalls: 2000000,\n      storage: 1000,\n      users: 999999,\n    },\n  },\n];\n\nconst mockPaymentMethods = [\n  {\n    id: '1',\n    type: 'visa' as const,\n    last4: '4242',\n    expMonth: '12',\n    expYear: '24',\n    isDefault: true,\n  },\n  {\n    id: '2',\n    type: 'mastercard' as const,\n    last4: '5555',\n    expMonth: '08',\n    expYear: '25',\n    isDefault: false,\n  },\n];\n\nconst mockInvoices = [\n  {\n    id: 'INV-001',\n    date: '2024-03-15',\n    amount: 99,\n    status: 'paid' as const,\n    items: [\n      {\n        description: 'Professional Plan - Monthly',\n        quantity: 1,\n        unitPrice: 99,\n      },\n    ],\n    pdfUrl: '#',\n  },\n  {\n    id: 'INV-002',\n    date: '2024-02-15',\n    amount: 99,\n    status: 'paid' as const,\n    items: [\n      {\n        description: 'Professional Plan - Monthly',\n        quantity: 1,\n        unitPrice: 99,\n      },\n    ],\n    pdfUrl: '#',\n  },\n];\n\nconst Payments: FC = () => {\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const { getAnimationVariant } = useAnimation();\n\n  const handleUpgrade = (planId: string) => {\n    setToastMessage('Subscription upgraded successfully');\n    setShowToast(true);\n  };\n\n  const handleDowngrade = (planId: string) => {\n    setToastMessage('Subscription downgraded successfully');\n    setShowToast(true);\n  };\n\n  const handleAddPaymentMethod = () => {\n    // In a real app, this would open a Stripe Elements form\n    setToastMessage('Payment method added successfully');\n    setShowToast(true);\n  };\n\n  const handleRemovePaymentMethod = (id: string) => {\n    setToastMessage('Payment method removed successfully');\n    setShowToast(true);\n  };\n\n  const handleSetDefaultPaymentMethod = (id: string) => {\n    setToastMessage('Default payment method updated');\n    setShowToast(true);\n  };\n\n  const handleDownloadInvoice = (id: string) => {\n    // In a real app, this would trigger a PDF download\n    setToastMessage('Invoice download started');\n    setShowToast(true);\n  };\n\n  const handleExportHistory = () => {\n    // In a real app, this would generate a CSV export\n    setToastMessage('Billing history export started');\n    setShowToast(true);\n  };\n\n  return (\n    <motion.div\n      variants={getAnimationVariant('fade')}\n      initial=\"initial\"\n      animate=\"animate\"\n      className=\"space-y-8\"\n    >\n      <div className=\"flex items-center justify-between\">\n        <motion.h1 \n          className=\"text-3xl font-bold tracking-tight\"\n          variants={getAnimationVariant('slideLeft')}\n        >\n          Payments & Billing\n        </motion.h1>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Current Usage</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-gray-500 dark:text-gray-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">$99.00</div>\n            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n              Next billing date: April 15, 2024\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">API Usage</CardTitle>\n            <CreditCard className=\"h-4 w-4 text-gray-500 dark:text-gray-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">220K</div>\n            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n              44% of monthly limit\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Storage Used</CardTitle>\n            <CreditCard className=\"h-4 w-4 text-gray-500 dark:text-gray-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">62 GB</div>\n            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n              31% of total capacity\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <UsageTrendsChart data={mockUsageData} />\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Current Plan</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-sm text-gray-500 mb-4\">\n              You are currently on the Professional plan. Your next billing date is April 15, 2024.\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span>API Calls Used</span>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"font-medium\">220,000 / 500,000</span>\n                  <div className=\"w-32 h-2 bg-gray-100 dark:bg-gray-800 rounded-full overflow-hidden\">\n                    <div className=\"h-full bg-primary-500 rounded-full\" style={{ width: '44%' }} />\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span>Storage Used</span>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"font-medium\">62 GB / 200 GB</span>\n                  <div className=\"w-32 h-2 bg-gray-100 dark:bg-gray-800 rounded-full overflow-hidden\">\n                    <div className=\"h-full bg-primary-500 rounded-full\" style={{ width: '31%' }} />\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span>Team Members</span>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"font-medium\">8 / 20</span>\n                  <div className=\"w-32 h-2 bg-gray-100 dark:bg-gray-800 rounded-full overflow-hidden\">\n                    <div className=\"h-full bg-primary-500 rounded-full\" style={{ width: '40%' }} />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-3\">\n        {subscriptionPlans.map((plan) => (\n          <SubscriptionCard\n            key={plan.id}\n            plan={plan}\n            onUpgrade={() => handleUpgrade(plan.id)}\n            onDowngrade={() => handleDowngrade(plan.id)}\n          />\n        ))}\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <PaymentMethodManager\n          paymentMethods={mockPaymentMethods}\n          onAddPaymentMethod={handleAddPaymentMethod}\n          onRemovePaymentMethod={handleRemovePaymentMethod}\n          onSetDefaultPaymentMethod={handleSetDefaultPaymentMethod}\n        />\n\n        <BillingHistory\n          invoices={mockInvoices}\n          onDownloadInvoice={handleDownloadInvoice}\n          onExportHistory={handleExportHistory}\n        />\n      </div>\n\n      {showToast && (\n        <Toast\n          message={toastMessage}\n          type=\"success\"\n          onClose={() => setShowToast(false)}\n        />\n      )}\n    </motion.div>\n  );\n};\n\nexport default Payments; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Pricing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Profile.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Profile.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'motion' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'activityData' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":9,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FC, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/Card';\nimport { Button } from '../components/ui/Button';\nimport { Camera, Mail, Phone, MapPin, Calendar, Edit2, Plus, X, Save, Award, Users } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { LineChart } from '../components/charts/LineChart';\nimport { BarChart } from '../components/charts/BarChart';\n\nconst activityData = [\n  { name: 'Mon', value: 5 },\n  { name: 'Tue', value: 8 },\n  { name: 'Wed', value: 3 },\n  { name: 'Thu', value: 10 },\n  { name: 'Fri', value: 6 },\n  { name: 'Sat', value: 2 },\n  { name: 'Sun', value: 4 },\n];\n\nconst Profile: FC = () => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [profileData, setProfileData] = useState({\n    name: 'Sarah Johnson',\n    title: 'Product Manager',\n    company: 'TechCorp Solutions',\n    about: 'Experienced product manager passionate about AI and customer experience. Leading digital transformation initiatives and building innovative chatbot solutions that drive business growth.',\n    email: 'sarah.johnson@techcorp.com',\n    phone: '+1 (555) 123-4567',\n    location: 'San Francisco, CA',\n    joinedDate: 'January 2024',\n    website: 'https://sarahjohnson.dev',\n    linkedin: 'https://linkedin.com/in/sarahjohnson',\n    timezone: 'Pacific Time (UTC-8)',\n    language: 'English'\n  });\n  const [skills, setSkills] = useState([\n    'Product Management', 'AI Strategy', 'Customer Experience', \n    'Data Analysis', 'Team Leadership', 'Agile Methodology',\n    'User Research', 'A/B Testing', 'Strategic Planning'\n  ]);\n  const [newSkill, setNewSkill] = useState('');\n  const [achievements] = useState([\n    {\n      title: 'AI Innovation Award',\n      description: 'Led the development of award-winning chatbot platform',\n      date: '2024',\n      icon: '🏆'\n    },\n    {\n      title: 'Team Excellence',\n      description: 'Built and managed high-performing product team',\n      date: '2023',\n      icon: '👥'\n    },\n    {\n      title: 'Customer Success Champion',\n      description: 'Achieved 95%+ customer satisfaction scores',\n      date: '2023',\n      icon: '⭐'\n    }\n  ]);\n\n  const [stats] = useState({\n    chatbotsCreated: 12,\n    totalMessages: 45678,\n    avgSatisfaction: 94.5,\n    integrations: 8\n  });\n\n  const handleAddSkill = () => {\n    if (newSkill.trim() && !skills.includes(newSkill.trim())) {\n      setSkills([...skills, newSkill.trim()]);\n      setNewSkill('');\n    }\n  };\n\n  const handleRemoveSkill = (skillToRemove: string) => {\n    setSkills(skills.filter(skill => skill !== skillToRemove));\n  };\n\n  const handleProfileChange = (field: string, value: string) => {\n    setProfileData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSaveProfile = () => {\n    // Here you would typically save to backend\n    setIsEditing(false);\n    // Show success message\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50/50 pt-16\">\n      <div className=\"max-w-6xl mx-auto px-6 space-y-8\">\n        {/* Enhanced Profile Header */}\n        <div className=\"relative\">\n          {/* Cover Photo */}\n          <div className=\"h-64 w-full rounded-xl bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 relative overflow-hidden\">\n            <div className=\"absolute inset-0 bg-black bg-opacity-20\"></div>\n            <div className=\"absolute top-4 right-4\">\n              <Button variant=\"outline\" size=\"sm\" className=\"bg-white/10 border-white/20 text-white hover:bg-white/20\">\n                📷 Change Cover\n              </Button>\n            </div>\n          </div>\n          \n          {/* Profile Info Overlay */}\n          <div className=\"absolute -bottom-16 left-8 flex items-end space-x-6\">\n            {/* Profile Picture */}\n            <div className=\"relative\">\n              <div className=\"h-32 w-32 rounded-xl bg-white shadow-xl overflow-hidden border-4 border-white\">\n                <img\n                  src=\"https://images.unsplash.com/photo-1494790108755-2616b612b17c?w=128&h=128&fit=crop&crop=face\"\n                  alt=\"Profile\"\n                  className=\"h-full w-full object-cover\"\n                />\n              </div>\n              <button className=\"absolute bottom-2 right-2 rounded-full bg-blue-600 p-2 text-white hover:bg-blue-700 transition-colors shadow-lg\">\n                <span className=\"text-sm\">📷</span>\n              </button>\n            </div>\n            \n            {/* Basic Info */}\n            <div className=\"mb-4 text-white\">\n              <h1 className=\"text-3xl font-bold\">{profileData.name}</h1>\n              <p className=\"text-xl opacity-90\">{profileData.title}</p>\n              <p className=\"text-lg opacity-75\">{profileData.company}</p>\n            </div>\n          </div>\n\n          {/* Edit Button */}\n          <div className=\"absolute top-4 left-4\">\n            <Button\n              onClick={() => isEditing ? handleSaveProfile() : setIsEditing(true)}\n              variant={isEditing ? \"success\" : \"outline\"}\n              className={isEditing ? \"\" : \"bg-white/10 border-white/20 text-white hover:bg-white/20\"}\n              leftIcon={<span>{isEditing ? \"💾\" : \"✏️\"}</span>}\n            >\n              {isEditing ? \"Save Changes\" : \"Edit Profile\"}\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 mt-20\">\n          <Card className=\"text-center p-6 hover:shadow-lg transition-all duration-200\">\n            <div className=\"text-3xl mb-2\">🤖</div>\n            <div className=\"text-2xl font-bold text-gray-900\">{stats.chatbotsCreated}</div>\n            <div className=\"text-sm text-gray-500\">Chatbots Created</div>\n          </Card>\n          <Card className=\"text-center p-6 hover:shadow-lg transition-all duration-200\">\n            <div className=\"text-3xl mb-2\">💬</div>\n            <div className=\"text-2xl font-bold text-gray-900\">{stats.totalMessages.toLocaleString()}</div>\n            <div className=\"text-sm text-gray-500\">Total Messages</div>\n          </Card>\n          <Card className=\"text-center p-6 hover:shadow-lg transition-all duration-200\">\n            <div className=\"text-3xl mb-2\">😊</div>\n            <div className=\"text-2xl font-bold text-gray-900\">{stats.avgSatisfaction}%</div>\n            <div className=\"text-sm text-gray-500\">Avg Satisfaction</div>\n          </Card>\n          <Card className=\"text-center p-6 hover:shadow-lg transition-all duration-200\">\n            <div className=\"text-3xl mb-2\">🔗</div>\n            <div className=\"text-2xl font-bold text-gray-900\">{stats.integrations}</div>\n            <div className=\"text-sm text-gray-500\">Integrations</div>\n          </Card>\n        </div>\n\n        <div className=\"grid gap-8 lg:grid-cols-3\">\n          {/* Left Column - Main Info */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            {/* About Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <span>👤</span>\n                  <span>About</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {isEditing ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">Full Name</label>\n                        <input\n                          type=\"text\"\n                          value={profileData.name}\n                          onChange={(e) => handleProfileChange('name', e.target.value)}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">Job Title</label>\n                        <input\n                          type=\"text\"\n                          value={profileData.title}\n                          onChange={(e) => handleProfileChange('title', e.target.value)}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">About</label>\n                      <textarea\n                        rows={4}\n                        value={profileData.about}\n                        onChange={(e) => handleProfileChange('about', e.target.value)}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      />\n                    </div>\n                  </div>\n                ) : (\n                  <p className=\"text-gray-700 leading-relaxed\">{profileData.about}</p>\n                )}\n\n                {/* Contact Information */}\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-lg\">📧</span>\n                      {isEditing ? (\n                        <input\n                          type=\"email\"\n                          value={profileData.email}\n                          onChange={(e) => handleProfileChange('email', e.target.value)}\n                          className=\"flex-1 px-3 py-1 border border-gray-300 rounded bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        />\n                      ) : (\n                        <span className=\"text-gray-700\">{profileData.email}</span>\n                      )}\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-lg\">📱</span>\n                      {isEditing ? (\n                        <input\n                          type=\"tel\"\n                          value={profileData.phone}\n                          onChange={(e) => handleProfileChange('phone', e.target.value)}\n                          className=\"flex-1 px-3 py-1 border border-gray-300 rounded bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        />\n                      ) : (\n                        <span className=\"text-gray-700\">{profileData.phone}</span>\n                      )}\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-lg\">📍</span>\n                      {isEditing ? (\n                        <input\n                          type=\"text\"\n                          value={profileData.location}\n                          onChange={(e) => handleProfileChange('location', e.target.value)}\n                          className=\"flex-1 px-3 py-1 border border-gray-300 rounded bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        />\n                      ) : (\n                        <span className=\"text-gray-700\">{profileData.location}</span>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-lg\">🌐</span>\n                      {isEditing ? (\n                        <input\n                          type=\"url\"\n                          value={profileData.website}\n                          onChange={(e) => handleProfileChange('website', e.target.value)}\n                          className=\"flex-1 px-3 py-1 border border-gray-300 rounded bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        />\n                      ) : (\n                        <a href={profileData.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:text-blue-800\">\n                          {profileData.website}\n                        </a>\n                      )}\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-lg\">💼</span>\n                      {isEditing ? (\n                        <input\n                          type=\"url\"\n                          value={profileData.linkedin}\n                          onChange={(e) => handleProfileChange('linkedin', e.target.value)}\n                          className=\"flex-1 px-3 py-1 border border-gray-300 rounded bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        />\n                      ) : (\n                        <a href={profileData.linkedin} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:text-blue-800\">\n                          LinkedIn Profile\n                        </a>\n                      )}\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-lg\">📅</span>\n                      <span className=\"text-gray-700\">Joined {profileData.joinedDate}</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <span>📊</span>\n                  <span>Recent Activity</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {[\n                    { action: 'Created new chatbot', target: 'Customer Support Bot v2', time: '2 hours ago', icon: '🤖' },\n                    { action: 'Updated integration', target: 'WhatsApp Business API', time: '1 day ago', icon: '🔗' },\n                    { action: 'Analyzed performance', target: 'Sales Assistant metrics', time: '2 days ago', icon: '📈' },\n                    { action: 'Added FAQ entries', target: '15 new customer questions', time: '3 days ago', icon: '❓' },\n                    { action: 'Team collaboration', target: 'Shared dashboard with marketing team', time: '1 week ago', icon: '👥' }\n                  ].map((activity, index) => (\n                    <div key={index} className=\"flex items-center space-x-4 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n                      <span className=\"text-2xl\">{activity.icon}</span>\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium text-gray-900\">{activity.action}</div>\n                        <div className=\"text-sm text-gray-600\">{activity.target}</div>\n                      </div>\n                      <div className=\"text-sm text-gray-500\">{activity.time}</div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Skills & Achievements */}\n          <div className=\"space-y-8\">\n            {/* Skills */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span>🎯</span>\n                    <span>Skills</span>\n                  </div>\n                  {isEditing && (\n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"text\"\n                        value={newSkill}\n                        onChange={(e) => setNewSkill(e.target.value)}\n                        onKeyPress={(e) => e.key === 'Enter' && handleAddSkill()}\n                        placeholder=\"Add skill...\"\n                        className=\"px-2 py-1 text-sm border border-gray-300 rounded bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      />\n                      <Button size=\"sm\" onClick={handleAddSkill} leftIcon={<span>➕</span>}>\n                        Add\n                      </Button>\n                    </div>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap gap-2\">\n                  {skills.map((skill, index) => (\n                    <span\n                      key={index}\n                      className={`group relative px-3 py-1 rounded-full text-sm font-medium transition-all ${\n                        isEditing \n                          ? 'bg-blue-100 text-blue-700 hover:bg-blue-200 cursor-pointer' \n                          : 'bg-blue-100 text-blue-700'\n                      }`}\n                    >\n                      {skill}\n                      {isEditing && (\n                        <button\n                          onClick={() => handleRemoveSkill(skill)}\n                          className=\"absolute -top-1 -right-1 hidden group-hover:flex h-4 w-4 items-center justify-center rounded-full bg-red-500 text-white text-xs\"\n                        >\n                          ×\n                        </button>\n                      )}\n                    </span>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Achievements */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <span>🏆</span>\n                  <span>Achievements</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {achievements.map((achievement, index) => (\n                    <div key={index} className=\"flex items-start space-x-3 p-3 bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg border border-yellow-200\">\n                      <span className=\"text-2xl\">{achievement.icon}</span>\n                      <div className=\"flex-1\">\n                        <div className=\"font-semibold text-gray-900\">{achievement.title}</div>\n                        <div className=\"text-sm text-gray-600\">{achievement.description}</div>\n                        <div className=\"text-xs text-gray-500 mt-1\">{achievement.date}</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Preferences */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <span>⚙️</span>\n                  <span>Preferences</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Language</label>\n                    {isEditing ? (\n                      <select \n                        value={profileData.language}\n                        onChange={(e) => handleProfileChange('language', e.target.value)}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      >\n                        <option>English</option>\n                        <option>Spanish</option>\n                        <option>French</option>\n                        <option>German</option>\n                      </select>\n                    ) : (\n                      <div className=\"text-gray-700\">{profileData.language}</div>\n                    )}\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Timezone</label>\n                    {isEditing ? (\n                      <select \n                        value={profileData.timezone}\n                        onChange={(e) => handleProfileChange('timezone', e.target.value)}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      >\n                        <option>Pacific Time (UTC-8)</option>\n                        <option>Mountain Time (UTC-7)</option>\n                        <option>Central Time (UTC-6)</option>\n                        <option>Eastern Time (UTC-5)</option>\n                        <option>UTC+0 (GMT)</option>\n                      </select>\n                    ) : (\n                      <div className=\"text-gray-700\">{profileData.timezone}</div>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Settings.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7455,7458],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7455,7458],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FC, useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/Card';\nimport { Button } from '../components/ui/Button';\n\ninterface NotificationSetting {\n  id: string;\n  title: string;\n  description: string;\n  enabled: boolean;\n  category: 'email' | 'push' | 'sms' | 'system';\n}\n\ninterface SecurityEvent {\n  id: string;\n  type: 'login' | 'password_change' | 'api_access' | 'integration_added';\n  description: string;\n  timestamp: string;\n  location: string;\n  device: string;\n  success: boolean;\n}\n\nconst Settings: FC = () => {\n  const [activeTab, setActiveTab] = useState<'general' | 'notifications' | 'security' | 'api' | 'billing' | 'team'>('general');\n  const [saving, setSaving] = useState<string | null>(null);\n  \n  const [notifications, setNotifications] = useState<NotificationSetting[]>([\n    {\n      id: 'chatbot-messages',\n      title: 'New chatbot messages',\n      description: 'Get notified when customers send messages',\n      enabled: true,\n      category: 'email'\n    },\n    {\n      id: 'system-alerts',\n      title: 'System alerts and errors',\n      description: 'Important system notifications and error alerts',\n      enabled: true,\n      category: 'email'\n    },\n    {\n      id: 'integration-updates',\n      title: 'Integration status updates',\n      description: 'Notifications about integration connections and issues',\n      enabled: true,\n      category: 'email'\n    },\n    {\n      id: 'performance-reports',\n      title: 'Weekly performance reports',\n      description: 'Summary of your chatbot performance metrics',\n      enabled: false,\n      category: 'email'\n    },\n    {\n      id: 'push-messages',\n      title: 'Browser push notifications',\n      description: 'Real-time notifications in your browser',\n      enabled: true,\n      category: 'push'\n    },\n    {\n      id: 'mobile-push',\n      title: 'Mobile app notifications',\n      description: 'Push notifications on your mobile device',\n      enabled: false,\n      category: 'push'\n    },\n    {\n      id: 'sms-critical',\n      title: 'Critical SMS alerts',\n      description: 'SMS notifications for critical system issues',\n      enabled: false,\n      category: 'sms'\n    }\n  ]);\n\n  const [profileData, setProfileData] = useState({\n    fullName: 'Sarah Johnson',\n    email: 'sarah.johnson@techcorp.com',\n    company: 'TechCorp Solutions',\n    jobTitle: 'Product Manager',\n    bio: 'Product manager passionate about AI and customer experience.',\n    language: 'English',\n    timezone: 'Pacific Time (UTC-8)',\n    theme: 'light',\n    dateFormat: 'MM/DD/YYYY',\n    timeFormat: '12-hour'\n  });\n\n  const [securitySettings, setSecuritySettings] = useState({\n    twoFactorEnabled: true,\n    sessionTimeout: '8',\n    loginAlerts: true,\n    apiAccessLogging: true,\n    ipWhitelist: '',\n    passwordPolicy: 'strong'\n  });\n\n  const [securityEvents] = useState<SecurityEvent[]>([\n    {\n      id: '1',\n      type: 'login',\n      description: 'Successful login',\n      timestamp: '2024-01-15 14:32:00',\n      location: 'San Francisco, CA',\n      device: 'Chrome on macOS',\n      success: true\n    },\n    {\n      id: '2',\n      type: 'api_access',\n      description: 'API key used for chatbot integration',\n      timestamp: '2024-01-15 13:45:00',\n      location: 'San Francisco, CA',\n      device: 'API Client',\n      success: true\n    },\n    {\n      id: '3',\n      type: 'integration_added',\n      description: 'WhatsApp integration connected',\n      timestamp: '2024-01-14 16:20:00',\n      location: 'San Francisco, CA',\n      device: 'Chrome on macOS',\n      success: true\n    },\n    {\n      id: '4',\n      type: 'login',\n      description: 'Failed login attempt',\n      timestamp: '2024-01-13 22:15:00',\n      location: 'Unknown',\n      device: 'Unknown browser',\n      success: false\n    }\n  ]);\n\n  const [apiKeys] = useState([\n    {\n      id: 'main-api',\n      name: 'Main API Key',\n      description: 'Primary key for chatbot integrations',\n      key: 'sk-proj-1234567890abcdef...',\n      created: '2024-01-01',\n      lastUsed: '2 minutes ago',\n      permissions: ['read', 'write', 'delete']\n    },\n    {\n      id: 'analytics-api',\n      name: 'Analytics API Key',\n      description: 'Read-only access for analytics data',\n      key: 'sk-anly-9876543210fedcba...',\n      created: '2024-01-05',\n      lastUsed: '1 hour ago',\n      permissions: ['read']\n    }\n  ]);\n\n  const toggleNotification = (id: string) => {\n    setNotifications(notifications.map(notification =>\n      notification.id === id\n        ? { ...notification, enabled: !notification.enabled }\n        : notification\n    ));\n  };\n\n  const handleProfileChange = (field: string, value: string) => {\n    setProfileData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSecurityChange = (field: string, value: string | boolean) => {\n    setSecuritySettings(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSaveSection = async (section: string) => {\n    setSaving(section);\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    setSaving(null);\n    // Show success message\n  };\n\n  const generateApiKey = () => {\n    // Generate new API key logic\n    console.log('Generating new API key...');\n  };\n\n  const revokeApiKey = (keyId: string) => {\n    // Revoke API key logic\n    console.log(`Revoking API key: ${keyId}`);\n  };\n\n  const getSecurityEventIcon = (type: SecurityEvent['type']) => {\n    switch (type) {\n      case 'login': return '🔐';\n      case 'password_change': return '🔑';\n      case 'api_access': return '🔌';\n      case 'integration_added': return '🔗';\n      default: return '📝';\n    }\n  };\n\n  const tabs = [\n    { id: 'general', label: 'General', icon: '⚙️' },\n    { id: 'notifications', label: 'Notifications', icon: '🔔' },\n    { id: 'security', label: 'Security', icon: '🔒' },\n    { id: 'api', label: 'API Keys', icon: '🔑' },\n    { id: 'billing', label: 'Billing', icon: '💳' },\n    { id: 'team', label: 'Team', icon: '👥' }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50/50 pt-16\">\n      <div className=\"max-w-7xl mx-auto px-6 space-y-8\">\n        {/* Enhanced Header */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Settings</h1>\n              <p className=\"mt-2 text-gray-600\">\n                Manage your account settings, preferences, and security options\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button variant=\"outline\" leftIcon={<span>📥</span>}>\n                Export Settings\n              </Button>\n              <Button \n                variant=\"primary\" \n                leftIcon={<span>💾</span>}\n                onClick={() => handleSaveSection('all')}\n                disabled={saving === 'all'}\n              >\n                {saving === 'all' ? 'Saving...' : 'Save All Changes'}\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Enhanced Tab Navigation */}\n        <div className=\"bg-white rounded-xl shadow-sm\">\n          <div className=\"border-b border-gray-200\">\n            <nav className=\"flex space-x-8 px-6 overflow-x-auto\">\n              {tabs.map((tab) => (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id as any)}\n                  className={`py-4 px-2 border-b-2 font-medium text-sm whitespace-nowrap transition-colors ${\n                    activeTab === tab.id\n                      ? 'border-blue-500 text-blue-600'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }`}\n                >\n                  <span className=\"mr-2\">{tab.icon}</span>\n                  {tab.label}\n                </button>\n              ))}\n            </nav>\n          </div>\n\n          {/* Tab Content */}\n          <div className=\"p-6\">\n            {/* General Settings */}\n            {activeTab === 'general' && (\n              <div className=\"space-y-8\">\n                <div className=\"grid gap-8 lg:grid-cols-2\">\n                  {/* Profile Information */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <span>👤</span>\n                        <span>Profile Information</span>\n                      </CardTitle>\n                      <CardDescription>\n                        Update your personal information and contact details\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid gap-4 md:grid-cols-2\">\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Full Name</label>\n                          <input\n                            type=\"text\"\n                            value={profileData.fullName}\n                            onChange={(e) => handleProfileChange('fullName', e.target.value)}\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Job Title</label>\n                          <input\n                            type=\"text\"\n                            value={profileData.jobTitle}\n                            onChange={(e) => handleProfileChange('jobTitle', e.target.value)}\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                          />\n                        </div>\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">Email</label>\n                        <input\n                          type=\"email\"\n                          value={profileData.email}\n                          onChange={(e) => handleProfileChange('email', e.target.value)}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">Company</label>\n                        <input\n                          type=\"text\"\n                          value={profileData.company}\n                          onChange={(e) => handleProfileChange('company', e.target.value)}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">Bio</label>\n                        <textarea\n                          rows={3}\n                          value={profileData.bio}\n                          onChange={(e) => handleProfileChange('bio', e.target.value)}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        />\n                      </div>\n                      <Button \n                        variant=\"primary\" \n                        onClick={() => handleSaveSection('profile')}\n                        disabled={saving === 'profile'}\n                        leftIcon={<span>💾</span>}\n                      >\n                        {saving === 'profile' ? 'Saving...' : 'Save Profile'}\n                      </Button>\n                    </CardContent>\n                  </Card>\n\n                  {/* Preferences */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <span>🎨</span>\n                        <span>Preferences</span>\n                      </CardTitle>\n                      <CardDescription>\n                        Customize your app experience and regional settings\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">Language</label>\n                        <select \n                          value={profileData.language}\n                          onChange={(e) => handleProfileChange('language', e.target.value)}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        >\n                          <option>English</option>\n                          <option>Spanish</option>\n                          <option>French</option>\n                          <option>German</option>\n                          <option>Italian</option>\n                          <option>Portuguese</option>\n                        </select>\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">Timezone</label>\n                        <select \n                          value={profileData.timezone}\n                          onChange={(e) => handleProfileChange('timezone', e.target.value)}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        >\n                          <option>Pacific Time (UTC-8)</option>\n                          <option>Mountain Time (UTC-7)</option>\n                          <option>Central Time (UTC-6)</option>\n                          <option>Eastern Time (UTC-5)</option>\n                          <option>UTC+0 (GMT)</option>\n                          <option>Central European Time (UTC+1)</option>\n                        </select>\n                      </div>\n                      <div className=\"grid gap-4 md:grid-cols-2\">\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date Format</label>\n                          <select \n                            value={profileData.dateFormat}\n                            onChange={(e) => handleProfileChange('dateFormat', e.target.value)}\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                          >\n                            <option>MM/DD/YYYY</option>\n                            <option>DD/MM/YYYY</option>\n                            <option>YYYY-MM-DD</option>\n                          </select>\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Time Format</label>\n                          <select \n                            value={profileData.timeFormat}\n                            onChange={(e) => handleProfileChange('timeFormat', e.target.value)}\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                          >\n                            <option>12-hour</option>\n                            <option>24-hour</option>\n                          </select>\n                        </div>\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Theme</label>\n                        <div className=\"flex items-center space-x-4\">\n                          <label className=\"flex items-center\">\n                            <input\n                              type=\"radio\"\n                              value=\"light\"\n                              checked={profileData.theme === 'light'}\n                              onChange={(e) => handleProfileChange('theme', e.target.value)}\n                              className=\"mr-2\"\n                            />\n                            <span className=\"mr-2\">☀️</span>\n                            Light\n                          </label>\n                          <label className=\"flex items-center\">\n                            <input\n                              type=\"radio\"\n                              value=\"dark\"\n                              checked={profileData.theme === 'dark'}\n                              onChange={(e) => handleProfileChange('theme', e.target.value)}\n                              className=\"mr-2\"\n                            />\n                            <span className=\"mr-2\">🌙</span>\n                            Dark\n                          </label>\n                          <label className=\"flex items-center\">\n                            <input\n                              type=\"radio\"\n                              value=\"auto\"\n                              checked={profileData.theme === 'auto'}\n                              onChange={(e) => handleProfileChange('theme', e.target.value)}\n                              className=\"mr-2\"\n                            />\n                            <span className=\"mr-2\">🔄</span>\n                            Auto\n                          </label>\n                        </div>\n                      </div>\n                      <Button \n                        variant=\"primary\" \n                        onClick={() => handleSaveSection('preferences')}\n                        disabled={saving === 'preferences'}\n                        leftIcon={<span>💾</span>}\n                      >\n                        {saving === 'preferences' ? 'Saving...' : 'Save Preferences'}\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            )}\n\n            {/* Notifications Settings */}\n            {activeTab === 'notifications' && (\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <span>📧</span>\n                      <span>Email Notifications</span>\n                    </CardTitle>\n                    <CardDescription>\n                      Manage email notifications for different events\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {notifications.filter(n => n.category === 'email').map((notification) => (\n                        <div\n                          key={notification.id}\n                          className=\"flex items-center justify-between py-3 px-4 bg-gray-50 rounded-lg\"\n                        >\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium text-gray-900\">{notification.title}</div>\n                            <div className=\"text-sm text-gray-500\">{notification.description}</div>\n                          </div>\n                          <button\n                            onClick={() => toggleNotification(notification.id)}\n                            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                              notification.enabled ? 'bg-blue-600' : 'bg-gray-200'\n                            }`}\n                          >\n                            <span\n                              className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                                notification.enabled ? 'translate-x-6' : 'translate-x-1'\n                              }`}\n                            />\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <span>🔔</span>\n                      <span>Push Notifications</span>\n                    </CardTitle>\n                    <CardDescription>\n                      Real-time browser and mobile notifications\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {notifications.filter(n => n.category === 'push').map((notification) => (\n                        <div\n                          key={notification.id}\n                          className=\"flex items-center justify-between py-3 px-4 bg-gray-50 rounded-lg\"\n                        >\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium text-gray-900\">{notification.title}</div>\n                            <div className=\"text-sm text-gray-500\">{notification.description}</div>\n                          </div>\n                          <button\n                            onClick={() => toggleNotification(notification.id)}\n                            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                              notification.enabled ? 'bg-blue-600' : 'bg-gray-200'\n                            }`}\n                          >\n                            <span\n                              className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                                notification.enabled ? 'translate-x-6' : 'translate-x-1'\n                              }`}\n                            />\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {/* Security Settings */}\n            {activeTab === 'security' && (\n              <div className=\"space-y-6\">\n                <div className=\"grid gap-6 lg:grid-cols-2\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <span>🔐</span>\n                        <span>Account Security</span>\n                      </CardTitle>\n                      <CardDescription>\n                        Manage your account security and access controls\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                          <div>\n                            <div className=\"font-medium text-gray-900\">Two-Factor Authentication</div>\n                            <div className=\"text-sm text-gray-500\">\n                              Add an extra layer of security to your account\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            {securitySettings.twoFactorEnabled && (\n                              <span className=\"text-green-600 text-sm\">✓ Enabled</span>\n                            )}\n                            <Button \n                              variant={securitySettings.twoFactorEnabled ? \"outline\" : \"primary\"}\n                              size=\"sm\"\n                            >\n                              {securitySettings.twoFactorEnabled ? 'Manage' : 'Enable'}\n                            </Button>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                          <div>\n                            <div className=\"font-medium text-gray-900\">Session Timeout</div>\n                            <div className=\"text-sm text-gray-500\">\n                              Automatically log out after inactivity\n                            </div>\n                          </div>\n                          <select \n                            value={securitySettings.sessionTimeout}\n                            onChange={(e) => handleSecurityChange('sessionTimeout', e.target.value)}\n                            className=\"px-3 py-1 border border-gray-300 rounded bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                          >\n                            <option value=\"1\">1 hour</option>\n                            <option value=\"4\">4 hours</option>\n                            <option value=\"8\">8 hours</option>\n                            <option value=\"24\">24 hours</option>\n                            <option value=\"never\">Never</option>\n                          </select>\n                        </div>\n\n                        <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                          <div>\n                            <div className=\"font-medium text-gray-900\">Login Alerts</div>\n                            <div className=\"text-sm text-gray-500\">\n                              Get notified of new login attempts\n                            </div>\n                          </div>\n                          <button\n                            onClick={() => handleSecurityChange('loginAlerts', !securitySettings.loginAlerts)}\n                            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                              securitySettings.loginAlerts ? 'bg-blue-600' : 'bg-gray-200'\n                            }`}\n                          >\n                            <span\n                              className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                                securitySettings.loginAlerts ? 'translate-x-6' : 'translate-x-1'\n                              }`}\n                            />\n                          </button>\n                        </div>\n                      </div>\n\n                      <div className=\"pt-4 border-t border-gray-200\">\n                        <Button \n                          variant=\"destructive\" \n                          size=\"sm\"\n                          leftIcon={<span>🔑</span>}\n                        >\n                          Change Password\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <span>📊</span>\n                        <span>Recent Security Activity</span>\n                      </CardTitle>\n                      <CardDescription>\n                        Monitor your account activity and access logs\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        {securityEvents.map((event) => (\n                          <div key={event.id} className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg\">\n                            <span className=\"text-lg\">{getSecurityEventIcon(event.type)}</span>\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"font-medium text-gray-900\">{event.description}</div>\n                                <span className={`text-xs px-2 py-1 rounded-full ${\n                                  event.success \n                                    ? 'bg-green-100 text-green-700' \n                                    : 'bg-red-100 text-red-700'\n                                }`}>\n                                  {event.success ? 'Success' : 'Failed'}\n                                </span>\n                              </div>\n                              <div className=\"text-sm text-gray-500\">\n                                {event.timestamp} • {event.location} • {event.device}\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                      <div className=\"mt-4\">\n                        <Button variant=\"outline\" size=\"sm\" fullWidth>\n                          View Full Security Log\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            )}\n\n            {/* API Keys */}\n            {activeTab === 'api' && (\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span>🔑</span>\n                        <span>API Keys</span>\n                      </div>\n                      <Button \n                        variant=\"primary\" \n                        onClick={generateApiKey}\n                        leftIcon={<span>➕</span>}\n                      >\n                        Generate New Key\n                      </Button>\n                    </CardTitle>\n                    <CardDescription>\n                      Manage API keys for integrations and third-party access\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {apiKeys.map((key) => (\n                        <div key={key.id} className=\"border border-gray-200 rounded-lg p-4\">\n                          <div className=\"flex items-center justify-between mb-3\">\n                            <div>\n                              <div className=\"font-medium text-gray-900\">{key.name}</div>\n                              <div className=\"text-sm text-gray-500\">{key.description}</div>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button variant=\"outline\" size=\"sm\">\n                                Copy\n                              </Button>\n                              <Button \n                                variant=\"destructive\" \n                                size=\"sm\"\n                                onClick={() => revokeApiKey(key.id)}\n                              >\n                                Revoke\n                              </Button>\n                            </div>\n                          </div>\n                          \n                          <div className=\"bg-gray-50 rounded p-3 mb-3\">\n                            <code className=\"text-sm text-gray-700 font-mono\">{key.key}</code>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                            <div>\n                              <div className=\"text-gray-500\">Created</div>\n                              <div className=\"font-medium\">{key.created}</div>\n                            </div>\n                            <div>\n                              <div className=\"text-gray-500\">Last Used</div>\n                              <div className=\"font-medium\">{key.lastUsed}</div>\n                            </div>\n                            <div>\n                              <div className=\"text-gray-500\">Permissions</div>\n                              <div className=\"flex space-x-1\">\n                                {key.permissions.map((permission) => (\n                                  <span key={permission} className=\"inline-block px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded\">\n                                    {permission}\n                                  </span>\n                                ))}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {/* Billing Settings */}\n            {activeTab === 'billing' && (\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <span>💳</span>\n                      <span>Billing & Subscription</span>\n                    </CardTitle>\n                    <CardDescription>\n                      Manage your subscription and payment information\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-12\">\n                      <div className=\"text-6xl mb-4\">🚧</div>\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Billing Settings</h3>\n                      <p className=\"text-gray-500 mb-4\">\n                        Billing and subscription management will be available soon.\n                      </p>\n                      <Button variant=\"outline\">\n                        Contact Sales\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {/* Team Settings */}\n            {activeTab === 'team' && (\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <span>👥</span>\n                      <span>Team Management</span>\n                    </CardTitle>\n                    <CardDescription>\n                      Manage team members and permissions\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-12\">\n                      <div className=\"text-6xl mb-4\">👥</div>\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Team Features</h3>\n                      <p className=\"text-gray-500 mb-4\">\n                        Team management features will be available in the next update.\n                      </p>\n                      <Button variant=\"outline\">\n                        Learn More\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Signup.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Trial.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[536,539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[536,539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[566,569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[566,569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1256,1259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1256,1259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\n\nconst Trial: React.FC = () => {\n  const [step, setStep] = useState(1);\n  const [formData, setFormData] = useState({\n    email: '',\n    company: '',\n    website: '',\n    plan: 'Pro',\n    billingCycle: 'monthly',\n    creditCard: {\n      number: '',\n      expiry: '',\n      cvc: ''\n    }\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    // Analytics tracking\n    if ((window as any).gtag) {\n      (window as any).gtag('event', 'trial_signup_step', {\n        step_number: step,\n        plan_name: formData.plan,\n        billing_cycle: formData.billingCycle,\n      });\n    }\n\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    if (step < 3) {\n      setStep(step + 1);\n    } else {\n      // Redirect to dashboard with trial active\n      window.location.href = '/dashboard?trial=active';\n    }\n    \n    setIsLoading(false);\n  };\n\n  const updateFormData = (field: string, value: string) => {\n    if (field.includes('.')) {\n      const [parent, child] = field.split('.');\n      setFormData(prev => ({\n        ...prev,\n        [parent]: {\n          ...(prev as any)[parent],\n          [child]: value\n        }\n      }));\n    } else {\n      setFormData(prev => ({\n        ...prev,\n        [field]: value,\n      }));\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4\">\n      <div className=\"max-w-md w-full\">\n        {/* Progress Bar */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between text-sm text-gray-500 mb-2\">\n            <span>Step {step} of 3</span>\n            <span>{Math.round((step / 3) * 100)}% complete</span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div \n              className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${(step / 3) * 100}%` }}\n            />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\n          {step === 1 && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center\">\n                <h2 className=\"text-2xl font-bold mb-2\">Start Your 7-Day Free Trial</h2>\n                <p className=\"text-gray-600 mb-6\">\n                  Get complete access to {formData.plan} plan features\n                </p>\n              </div>\n\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Work Email</label>\n                  <input\n                    type=\"email\"\n                    required\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"you@company.com\"\n                    value={formData.email}\n                    onChange={(e) => updateFormData('email', e.target.value)}\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Company Name</label>\n                  <input\n                    type=\"text\"\n                    required\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"Your Company\"\n                    value={formData.company}\n                    onChange={(e) => updateFormData('company', e.target.value)}\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Website</label>\n                  <input\n                    type=\"url\"\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"https://yoursite.com\"\n                    value={formData.website}\n                    onChange={(e) => updateFormData('website', e.target.value)}\n                  />\n                </div>\n\n                <button \n                  type=\"submit\" \n                  className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-md font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? 'Processing...' : 'Continue →'}\n                </button>\n              </form>\n\n              <div className=\"flex justify-center items-center space-x-6 text-sm text-gray-500\">\n                <div className=\"flex items-center space-x-1\">\n                  <span>🛡️</span>\n                  <span>SSL Encrypted</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <span>✅</span>\n                  <span>No Commitment</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {step === 2 && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center\">\n                <h2 className=\"text-2xl font-bold mb-2\">Secure Your Trial</h2>\n                <p className=\"text-gray-600 mb-6\">\n                  €1 authorization (refunded immediately)\n                </p>\n              </div>\n\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    💳 Card Number\n                  </label>\n                  <input\n                    type=\"text\"\n                    required\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"1234 5678 9012 3456\"\n                    value={formData.creditCard.number}\n                    onChange={(e) => updateFormData('creditCard.number', e.target.value)}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Expiry</label>\n                    <input\n                      type=\"text\"\n                      required\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"MM/YY\"\n                      value={formData.creditCard.expiry}\n                      onChange={(e) => updateFormData('creditCard.expiry', e.target.value)}\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">CVC</label>\n                    <input\n                      type=\"text\"\n                      required\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"123\"\n                      value={formData.creditCard.cvc}\n                      onChange={(e) => updateFormData('creditCard.cvc', e.target.value)}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <div className=\"flex items-start space-x-2\">\n                    <span className=\"text-blue-600 text-lg\">🛡️</span>\n                    <div className=\"text-sm\">\n                      <p className=\"font-medium text-blue-900\">Why we need this?</p>\n                      <p className=\"text-blue-700\">\n                        To prevent abuse and provide seamless upgrade experience. \n                        Your trial starts immediately with full {formData.plan} access.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <button \n                  type=\"submit\" \n                  className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-md font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? 'Securing...' : 'Start My Free Trial →'}\n                </button>\n              </form>\n\n              <p className=\"text-xs text-center text-gray-500\">\n                256-bit SSL encrypted • PCI DSS compliant • Cancel anytime\n              </p>\n            </div>\n          )}\n\n          {step === 3 && (\n            <div className=\"space-y-6 text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-2xl\">✅</span>\n              </div>\n              \n              <div>\n                <h2 className=\"text-2xl font-bold mb-2\">Welcome to Your AI Journey!</h2>\n                <p className=\"text-gray-600 mb-6\">\n                  Your {formData.plan} trial is now active. Let's set up your first chatbot!\n                </p>\n              </div>\n\n              <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-lg\">\n                <h3 className=\"font-semibold mb-4\">What happens next?</h3>\n                <div className=\"space-y-3 text-left\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-medium\">1</div>\n                    <span>Guided setup wizard (15 minutes)</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-medium\">2</div>\n                    <span>Deploy your first AI chatbot</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-medium\">3</div>\n                    <span>Watch your conversations convert</span>\n                  </div>\n                </div>\n              </div>\n\n              <button \n                onClick={handleSubmit}\n                className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-md font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center justify-center\"\n                disabled={isLoading}\n              >\n                <span className=\"mr-2\">⚡</span>\n                {isLoading ? 'Setting up...' : 'Start Setup Wizard'}\n              </button>\n\n              <div className=\"text-sm text-gray-500\">\n                <p>Trial ends on {new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString()}</p>\n                <p>We'll remind you 2 days before it ends</p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Trust Signals */}\n        <div className=\"mt-6 text-center\">\n          <div className=\"flex justify-center space-x-4 text-xs text-gray-500\">\n            <span>🔒 GDPR Compliant</span>\n            <span>⚡ Setup in minutes</span>\n            <span>💬 24/7 Support</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Trial;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Usage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/pages/Workflows.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/providers/ApolloProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/router/AppRouter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/services/AIService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/services/AnalyticsService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[522,525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[522,525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[825,828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[825,828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1031,1034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1031,1034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1500,1503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1500,1503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1917,1920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1917,1920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2234,2237],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2234,2237],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2600,2603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2600,2603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3295,3298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3295,3298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mixpanel from 'mixpanel-browser';\nimport posthog from 'posthog-js';\nimport { Analytics } from '@vercel/analytics/react';\n\ndeclare global {\n  interface Window {\n    localStorage: Storage;\n  }\n}\n\nexport class AnalyticsService {\n  constructor(\n    mixpanelToken: string,\n    posthogToken: string,\n    posthogApiHost: string = 'https://app.posthog.com'\n  ) {\n    mixpanel.init(mixpanelToken);\n    posthog.init(posthogToken, { api_host: posthogApiHost });\n  }\n\n  trackEvent(eventName: string, properties: Record<string, any> = {}): void {\n    // Track in Mixpanel\n    mixpanel.track(eventName, properties);\n\n    // Track in PostHog\n    posthog.capture(eventName, properties);\n\n    // Custom event processing\n    this.processCustomAnalytics(eventName, properties);\n  }\n\n  identifyUser(userId: string, traits: Record<string, any> = {}): void {\n    mixpanel.identify(userId);\n    mixpanel.people.set(traits);\n\n    posthog.identify(userId, traits);\n  }\n\n  private processCustomAnalytics(eventName: string, properties: Record<string, any>): void {\n    // Store events in local storage for offline support\n    const offlineEvents = JSON.parse(localStorage.getItem('offlineEvents') || '[]');\n    offlineEvents.push({ eventName, properties, timestamp: Date.now() });\n    localStorage.setItem('offlineEvents', JSON.stringify(offlineEvents));\n\n    // Process custom metrics\n    this.updateCustomMetrics(eventName, properties);\n  }\n\n  private updateCustomMetrics(eventName: string, properties: Record<string, any>): void {\n    const metrics = {\n      userEngagement: this.calculateEngagementScore(properties),\n      conversationQuality: this.calculateConversationQuality(properties),\n      botPerformance: this.calculateBotPerformance(properties),\n    };\n\n    // Store metrics for dashboard\n    localStorage.setItem('customMetrics', JSON.stringify(metrics));\n  }\n\n  private calculateEngagementScore(properties: Record<string, any>): number {\n    // Implement engagement scoring logic\n    const {\n      timeSpent = 0,\n      messageCount = 0,\n      interactionDepth = 0,\n    } = properties;\n\n    return (timeSpent * 0.4 + messageCount * 0.3 + interactionDepth * 0.3) / 100;\n  }\n\n  private calculateConversationQuality(properties: Record<string, any>): number {\n    // Implement conversation quality scoring\n    const {\n      successfulResponses = 0,\n      totalResponses = 1,\n      userSatisfactionScore = 0,\n    } = properties;\n\n    return (\n      (successfulResponses / totalResponses) * 0.6 +\n      (userSatisfactionScore / 100) * 0.4\n    );\n  }\n\n  private calculateBotPerformance(properties: Record<string, any>): number {\n    // Implement bot performance metrics\n    const {\n      responseTime = 0,\n      accuracyScore = 0,\n      resolutionRate = 0,\n    } = properties;\n\n    const normalizedResponseTime = Math.min(1, 1000 / responseTime);\n    return (\n      normalizedResponseTime * 0.3 +\n      accuracyScore * 0.4 +\n      resolutionRate * 0.3\n    );\n  }\n\n  async syncOfflineEvents(): Promise<void> {\n    const offlineEvents = JSON.parse(localStorage.getItem('offlineEvents') || '[]');\n    \n    for (const event of offlineEvents) {\n      await this.trackEvent(event.eventName, event.properties);\n    }\n\n    localStorage.removeItem('offlineEvents');\n  }\n\n  getAnalyticsDashboardData(): Record<string, any> {\n    return {\n      metrics: JSON.parse(localStorage.getItem('customMetrics') || '{}'),\n      recentEvents: JSON.parse(localStorage.getItem('offlineEvents') || '[]'),\n    };\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/services/CollaborationService.ts","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useStorage\" cannot be called in a class component. React Hooks must be called in a React function component or a custom React Hook function.","line":47,"column":21,"nodeType":"Identifier","endLine":47,"endColumn":31},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRoom\" cannot be called in a class component. React Hooks must be called in a React function component or a custom React Hook function.","line":48,"column":18,"nodeType":"Identifier","endLine":48,"endColumn":25},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useStorage\" cannot be called in a class component. React Hooks must be called in a React function component or a custom React Hook function.","line":63,"column":21,"nodeType":"Identifier","endLine":63,"endColumn":31},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRoom\" cannot be called in a class component. React Hooks must be called in a React function component or a custom React Hook function.","line":64,"column":18,"nodeType":"Identifier","endLine":64,"endColumn":25},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useUpdateMyPresence\" cannot be called in a class component. React Hooks must be called in a React function component or a custom React Hook function.","line":79,"column":30,"nodeType":"Identifier","endLine":79,"endColumn":49},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useUpdateMyPresence\" cannot be called in a class component. React Hooks must be called in a React function component or a custom React Hook function.","line":84,"column":30,"nodeType":"Identifier","endLine":84,"endColumn":49}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@liveblocks/client';\nimport { createRoomContext } from '@liveblocks/react';\n\ntype Presence = {\n  cursor: { x: number; y: number } | null;\n  isTyping: boolean;\n  name: string;\n};\n\ntype Storage = {\n  messages: Array<{\n    id: string;\n    text: string;\n    author: string;\n    timestamp: number;\n  }>;\n  annotations: Array<{\n    id: string;\n    text: string;\n    position: { x: number; y: number };\n    author: string;\n  }>;\n};\n\nconst client = createClient({\n  publicApiKey: process.env.LIVEBLOCKS_PUBLIC_KEY || '',\n});\n\nexport const {\n  RoomProvider,\n  useRoom,\n  useMyPresence,\n  useUpdateMyPresence,\n  useOthers,\n  useStorage,\n  useMutation,\n} = createRoomContext<Presence, Storage>(client);\n\nexport class CollaborationService {\n  private roomId: string;\n\n  constructor(roomId: string) {\n    this.roomId = roomId;\n  }\n\n  async addMessage(text: string, author: string): Promise<void> {\n    const storage = useStorage();\n    const room = useRoom();\n\n    if (!storage || !room) return;\n\n    await room.updateStorage((draft: Storage) => {\n      draft.messages.push({\n        id: crypto.randomUUID(),\n        text,\n        author,\n        timestamp: Date.now(),\n      });\n    });\n  }\n\n  async addAnnotation(text: string, position: { x: number; y: number }, author: string): Promise<void> {\n    const storage = useStorage();\n    const room = useRoom();\n\n    if (!storage || !room) return;\n\n    await room.updateStorage((draft: Storage) => {\n      draft.annotations.push({\n        id: crypto.randomUUID(),\n        text,\n        position,\n        author,\n      });\n    });\n  }\n\n  updateCursor(position: { x: number; y: number } | null): void {\n    const updateMyPresence = useUpdateMyPresence();\n    updateMyPresence({ cursor: position });\n  }\n\n  setTypingStatus(isTyping: boolean): void {\n    const updateMyPresence = useUpdateMyPresence();\n    updateMyPresence({ isTyping });\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/services/IntegrationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[173,176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[173,176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1256,1259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1256,1259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":256,"column":107,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":110,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7660,7663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7660,7663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":269,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8087,8090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8087,8090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":300,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9072,9075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9072,9075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":311,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":311,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9481,9484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9481,9484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":322,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":322,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9867,9870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9867,9870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":322,"column":99,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":322,"endColumn":102,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9881,9884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9881,9884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import api from '../utils/api.js';\n\nexport interface IntegrationConfig {\n  id: string;\n  name: string;\n  icon: string;\n  description: string;\n  isActive: boolean;\n  config: any;\n  instructions: string[];\n  codeSnippet?: string;\n  setupSteps: string[];\n}\n\nexport interface ChatbotConfig {\n  id: string;\n  name: string;\n  primaryColor: string;\n  gradient: { from: string; to: string };\n  theme: 'light' | 'dark';\n  welcomeMessage: string;\n  language: string;\n  avatar?: string;\n  chatIcon?: string;\n  fontFamily: string;\n  fontSize: string;\n  bubbleShape: string;\n}\n\nexport interface WebsiteIntegration {\n  chatbotId: string;\n  domain: string;\n  isActive: boolean;\n  customCode?: string;\n  analyticsEnabled: boolean;\n}\n\nexport interface ShopifyIntegration {\n  chatbotId: string;\n  shopDomain: string;\n  apiKey: string;\n  isActive: boolean;\n  themeIntegration: boolean;\n  productRecommendations: boolean;\n}\n\nexport interface WhatsAppIntegration {\n  chatbotId: string;\n  phoneNumber: string;\n  businessAccountId: string;\n  isActive: boolean;\n  webhookUrl: string;\n  autoReplyEnabled: boolean;\n}\n\nexport interface FacebookIntegration {\n  chatbotId: string;\n  pageId: string;\n  accessToken: string;\n  isActive: boolean;\n  webhookUrl: string;\n  messengerProfile: any;\n}\n\nexport interface TelegramIntegration {\n  chatbotId: string;\n  botToken: string;\n  botUsername: string;\n  isActive: boolean;\n  webhookUrl: string;\n  commands: string[];\n}\n\nexport interface InstagramIntegration {\n  chatbotId: string;\n  accountId: string;\n  accessToken: string;\n  isActive: boolean;\n  autoReplyEnabled: boolean;\n  storyReplies: boolean;\n}\n\nclass IntegrationService {\n  // Get all integrations for a chatbot\n  async getIntegrations(chatbotId: string): Promise<IntegrationConfig[]> {\n    try {\n      const response = await api.get(`/chatbots/${chatbotId}/integrations`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching integrations:', error);\n      throw error;\n    }\n  }\n\n  // Activate/Deactivate integration\n  async toggleIntegration(chatbotId: string, integrationId: string, isActive: boolean): Promise<void> {\n    try {\n      await api.patch(`/chatbots/${chatbotId}/integrations/${integrationId}`, {\n        isActive\n      });\n    } catch (error) {\n      console.error('Error toggling integration:', error);\n      throw error;\n    }\n  }\n\n  // Website Integration\n  async setupWebsiteIntegration(chatbotId: string, config: Partial<WebsiteIntegration>): Promise<WebsiteIntegration> {\n    try {\n      const response = await api.post(`/chatbots/${chatbotId}/integrations/website`, config);\n      return response.data;\n    } catch (error) {\n      console.error('Error setting up website integration:', error);\n      throw error;\n    }\n  }\n\n  async getWebsiteIntegration(chatbotId: string): Promise<WebsiteIntegration> {\n    try {\n      const response = await api.get(`/chatbots/${chatbotId}/integrations/website`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching website integration:', error);\n      throw error;\n    }\n  }\n\n  // Shopify Integration\n  async setupShopifyIntegration(chatbotId: string, config: Partial<ShopifyIntegration>): Promise<ShopifyIntegration> {\n    try {\n      const response = await api.post(`/chatbots/${chatbotId}/integrations/shopify`, config);\n      return response.data;\n    } catch (error) {\n      console.error('Error setting up Shopify integration:', error);\n      throw error;\n    }\n  }\n\n  async getShopifyIntegration(chatbotId: string): Promise<ShopifyIntegration> {\n    try {\n      const response = await api.get(`/chatbots/${chatbotId}/integrations/shopify`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Shopify integration:', error);\n      throw error;\n    }\n  }\n\n  // WhatsApp Integration\n  async setupWhatsAppIntegration(chatbotId: string, config: Partial<WhatsAppIntegration>): Promise<WhatsAppIntegration> {\n    try {\n      const response = await api.post(`/chatbots/${chatbotId}/integrations/whatsapp`, config);\n      return response.data;\n    } catch (error) {\n      console.error('Error setting up WhatsApp integration:', error);\n      throw error;\n    }\n  }\n\n  async getWhatsAppIntegration(chatbotId: string): Promise<WhatsAppIntegration> {\n    try {\n      const response = await api.get(`/chatbots/${chatbotId}/integrations/whatsapp`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching WhatsApp integration:', error);\n      throw error;\n    }\n  }\n\n  // Facebook Integration\n  async setupFacebookIntegration(chatbotId: string, config: Partial<FacebookIntegration>): Promise<FacebookIntegration> {\n    try {\n      const response = await api.post(`/chatbots/${chatbotId}/integrations/facebook`, config);\n      return response.data;\n    } catch (error) {\n      console.error('Error setting up Facebook integration:', error);\n      throw error;\n    }\n  }\n\n  async getFacebookIntegration(chatbotId: string): Promise<FacebookIntegration> {\n    try {\n      const response = await api.get(`/chatbots/${chatbotId}/integrations/facebook`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Facebook integration:', error);\n      throw error;\n    }\n  }\n\n  // Telegram Integration\n  async setupTelegramIntegration(chatbotId: string, config: Partial<TelegramIntegration>): Promise<TelegramIntegration> {\n    try {\n      const response = await api.post(`/chatbots/${chatbotId}/integrations/telegram`, config);\n      return response.data;\n    } catch (error) {\n      console.error('Error setting up Telegram integration:', error);\n      throw error;\n    }\n  }\n\n  async getTelegramIntegration(chatbotId: string): Promise<TelegramIntegration> {\n    try {\n      const response = await api.get(`/chatbots/${chatbotId}/integrations/telegram`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Telegram integration:', error);\n      throw error;\n    }\n  }\n\n  // Instagram Integration\n  async setupInstagramIntegration(chatbotId: string, config: Partial<InstagramIntegration>): Promise<InstagramIntegration> {\n    try {\n      const response = await api.post(`/chatbots/${chatbotId}/integrations/instagram`, config);\n      return response.data;\n    } catch (error) {\n      console.error('Error setting up Instagram integration:', error);\n      throw error;\n    }\n  }\n\n  async getInstagramIntegration(chatbotId: string): Promise<InstagramIntegration> {\n    try {\n      const response = await api.get(`/chatbots/${chatbotId}/integrations/instagram`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Instagram integration:', error);\n      throw error;\n    }\n  }\n\n  // Generate integration code\n  async generateIntegrationCode(chatbotId: string, platform: string, config: ChatbotConfig): Promise<string> {\n    try {\n      const response = await api.post(`/chatbots/${chatbotId}/integrations/${platform}/code`, config);\n      return response.data.code;\n    } catch (error) {\n      console.error('Error generating integration code:', error);\n      throw error;\n    }\n  }\n\n  // Test integration connection\n  async testIntegration(chatbotId: string, integrationId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await api.post(`/chatbots/${chatbotId}/integrations/${integrationId}/test`);\n      return response.data;\n    } catch (error) {\n      console.error('Error testing integration:', error);\n      throw error;\n    }\n  }\n\n  // Get integration analytics\n  async getIntegrationAnalytics(chatbotId: string, integrationId: string, period: string = '7d'): Promise<any> {\n    try {\n      const response = await api.get(`/chatbots/${chatbotId}/integrations/${integrationId}/analytics`, {\n        params: { period }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching integration analytics:', error);\n      throw error;\n    }\n  }\n\n  // Update integration settings\n  async updateIntegrationSettings(chatbotId: string, integrationId: string, settings: any): Promise<void> {\n    try {\n      await api.put(`/chatbots/${chatbotId}/integrations/${integrationId}/settings`, settings);\n    } catch (error) {\n      console.error('Error updating integration settings:', error);\n      throw error;\n    }\n  }\n\n  // Delete integration\n  async deleteIntegration(chatbotId: string, integrationId: string): Promise<void> {\n    try {\n      await api.delete(`/chatbots/${chatbotId}/integrations/${integrationId}`);\n    } catch (error) {\n      console.error('Error deleting integration:', error);\n      throw error;\n    }\n  }\n\n  // Get available integration platforms\n  async getAvailablePlatforms(): Promise<IntegrationConfig[]> {\n    try {\n      const response = await api.get('/integrations/platforms');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching available platforms:', error);\n      throw error;\n    }\n  }\n\n  // Validate integration configuration\n  async validateIntegrationConfig(platform: string, config: any): Promise<{ valid: boolean; errors: string[] }> {\n    try {\n      const response = await api.post(`/integrations/${platform}/validate`, config);\n      return response.data;\n    } catch (error) {\n      console.error('Error validating integration config:', error);\n      throw error;\n    }\n  }\n\n  // Get integration webhooks\n  async getIntegrationWebhooks(chatbotId: string, integrationId: string): Promise<any[]> {\n    try {\n      const response = await api.get(`/chatbots/${chatbotId}/integrations/${integrationId}/webhooks`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching integration webhooks:', error);\n      throw error;\n    }\n  }\n\n  // Create integration webhook\n  async createIntegrationWebhook(chatbotId: string, integrationId: string, webhook: any): Promise<any> {\n    try {\n      const response = await api.post(`/chatbots/${chatbotId}/integrations/${integrationId}/webhooks`, webhook);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating integration webhook:', error);\n      throw error;\n    }\n  }\n\n  // Delete integration webhook\n  async deleteIntegrationWebhook(chatbotId: string, integrationId: string, webhookId: string): Promise<void> {\n    try {\n      await api.delete(`/chatbots/${chatbotId}/integrations/${integrationId}/webhooks/${webhookId}`);\n    } catch (error) {\n      console.error('Error deleting integration webhook:', error);\n      throw error;\n    }\n  }\n}\n\nconst integrationService = new IntegrationService();\nexport { integrationService };\nexport default integrationService; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/services/PricingOptimizationService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'aiService' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":80,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'productId' is defined but never used.","line":119,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3721,3724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3721,3724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'aiInsights' is defined but never used.","line":197,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":197,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":211,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6197,6200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6197,6200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ServiceRegistry } from './ServiceRegistry.ts';\nimport { AIService } from './AIService.ts';\nimport { AnalyticsService } from './AnalyticsService.ts';\nimport { SecurityService, UserRole } from './SecurityService.ts';\n\ninterface PricingRule {\n  id: string;\n  name: string;\n  condition: string;\n  adjustment: {\n    type: 'percentage' | 'fixed';\n    value: number;\n  };\n  priority: number;\n}\n\ninterface CompetitorPrice {\n  competitor: string;\n  productId: string;\n  price: number;\n  timestamp: number;\n}\n\ninterface MarketData {\n  demand: number;\n  seasonality: number;\n  competitorPrices: CompetitorPrice[];\n  userSegment: string;\n  region: string;\n}\n\ninterface OptimizationResult {\n  suggestedPrice: number;\n  confidence: number;\n  factors: {\n    name: string;\n    impact: number;\n    explanation: string;\n  }[];\n}\n\nexport class PricingOptimizationService {\n  private registry: ServiceRegistry;\n  private pricingRules: PricingRule[] = [];\n  private priceHistory: Map<string, { price: number; timestamp: number }[]> = new Map();\n  private marketData: Map<string, MarketData> = new Map();\n\n  constructor() {\n    this.registry = ServiceRegistry.getInstance();\n    this.initializeDefaultRules();\n  }\n\n  private initializeDefaultRules(): void {\n    this.pricingRules = [\n      {\n        id: 'seasonal-adjustment',\n        name: 'Seasonal Pricing',\n        condition: 'data.seasonality > 0.7',\n        adjustment: { type: 'percentage', value: 15 },\n        priority: 1,\n      },\n      {\n        id: 'competitive-match',\n        name: 'Competitive Matching',\n        condition: 'data.competitorPrices.length > 0',\n        adjustment: { type: 'percentage', value: -5 },\n        priority: 2,\n      },\n      {\n        id: 'demand-based',\n        name: 'Demand-Based Pricing',\n        condition: 'data.demand > 0.8',\n        adjustment: { type: 'percentage', value: 10 },\n        priority: 3,\n      },\n    ];\n  }\n\n  async optimizePrice(productId: string, basePrice: number): Promise<OptimizationResult> {\n    const aiService = this.registry.getService<AIService>('ai');\n    const analyticsService = this.registry.getService<AnalyticsService>('analytics');\n    const securityService = this.registry.getService<SecurityService>('security');\n\n    // Check permissions\n    if (!securityService.hasPermission(UserRole.ADMIN, 'write', 'pricing')) {\n      throw new Error('Permission denied for price optimization');\n    }\n\n    // Get market data\n    const marketData = await this.getMarketData(productId);\n    \n    // Get AI insights\n    const aiInsights = await this.getAIInsights(productId, basePrice, marketData);\n\n    // Track optimization event\n    analyticsService.trackEvent('price_optimization_started', {\n      productId,\n      basePrice,\n      marketData,\n    });\n\n    // Calculate optimal price\n    const result = await this.calculateOptimalPrice(productId, basePrice, marketData, aiInsights);\n\n    // Store price history\n    this.updatePriceHistory(productId, result.suggestedPrice);\n\n    // Track result\n    analyticsService.trackEvent('price_optimization_completed', {\n      productId,\n      originalPrice: basePrice,\n      optimizedPrice: result.suggestedPrice,\n      confidence: result.confidence,\n    });\n\n    return result;\n  }\n\n  private async getMarketData(productId: string): Promise<MarketData> {\n    // In a real implementation, this would fetch real-time market data\n    // from various sources (APIs, databases, etc.)\n    return {\n      demand: Math.random(),\n      seasonality: Math.random(),\n      competitorPrices: [],\n      userSegment: 'enterprise',\n      region: 'global',\n    };\n  }\n\n  private async getAIInsights(\n    productId: string,\n    basePrice: number,\n    marketData: MarketData\n  ): Promise<any> {\n    const aiService = this.registry.getService<AIService>('ai');\n    \n    const prompt = `Analyze the following market data and suggest optimal pricing:\n      Product ID: ${productId}\n      Base Price: ${basePrice}\n      Market Data: ${JSON.stringify(marketData, null, 2)}\n    `;\n\n    return aiService.generateSuggestions(prompt);\n  }\n\n  private async calculateOptimalPrice(\n    productId: string,\n    basePrice: number,\n    marketData: MarketData,\n    aiInsights: string\n  ): Promise<OptimizationResult> {\n    let adjustedPrice = basePrice;\n    const factors: OptimizationResult['factors'] = [];\n\n    // Apply AI-suggested adjustments\n    const aiAdjustment = this.parseAIAdjustment(aiInsights);\n    if (aiAdjustment) {\n      adjustedPrice *= (1 + aiAdjustment.impact);\n      factors.push({\n        name: 'AI Recommendation',\n        impact: aiAdjustment.impact * 100,\n        explanation: aiAdjustment.explanation,\n      });\n    }\n\n    // Apply pricing rules\n    for (const rule of this.pricingRules) {\n      try {\n        if (this.evaluateCondition(rule.condition, { data: marketData })) {\n          const adjustment = rule.adjustment.type === 'percentage'\n            ? basePrice * (rule.adjustment.value / 100)\n            : rule.adjustment.value;\n\n          adjustedPrice += adjustment;\n          factors.push({\n            name: rule.name,\n            impact: (adjustment / basePrice) * 100,\n            explanation: `Applied ${rule.name} rule with ${rule.adjustment.type} adjustment`,\n          });\n        }\n      } catch (error) {\n        console.error(`Error applying pricing rule ${rule.name}:`, error);\n      }\n    }\n\n    // Calculate confidence based on available data quality\n    const confidence = this.calculateConfidence(marketData, factors);\n\n    return {\n      suggestedPrice: Math.max(0, adjustedPrice), // Ensure price is not negative\n      confidence,\n      factors,\n    };\n  }\n\n  private parseAIAdjustment(aiInsights: string): { impact: number; explanation: string } | null {\n    try {\n      // In a real implementation, this would parse structured AI insights\n      // For now, return a random adjustment\n      return {\n        impact: (Math.random() - 0.5) * 0.2, // -10% to +10%\n        explanation: 'AI-suggested adjustment based on market analysis',\n      };\n    } catch (error) {\n      console.error('Error parsing AI insights:', error);\n      return null;\n    }\n  }\n\n  private evaluateCondition(condition: string, context: Record<string, any>): boolean {\n    try {\n      return new Function('data', `return ${condition}`)(context.data);\n    } catch (error) {\n      console.error('Error evaluating condition:', error);\n      return false;\n    }\n  }\n\n  private calculateConfidence(\n    marketData: MarketData,\n    factors: OptimizationResult['factors']\n  ): number {\n    // Calculate confidence based on:\n    // 1. Amount and quality of market data\n    // 2. Number of factors considered\n    // 3. Consistency of different signals\n    const dataQuality = this.calculateDataQuality(marketData);\n    const factorConsistency = this.calculateFactorConsistency(factors);\n    \n    return (dataQuality + factorConsistency) / 2;\n  }\n\n  private calculateDataQuality(marketData: MarketData): number {\n    let quality = 0;\n    \n    // Check competitor data\n    if (marketData.competitorPrices.length > 0) quality += 0.3;\n    \n    // Check demand data\n    if (marketData.demand >= 0) quality += 0.3;\n    \n    // Check seasonality data\n    if (marketData.seasonality >= 0) quality += 0.2;\n    \n    // Check segment and region data\n    if (marketData.userSegment && marketData.region) quality += 0.2;\n    \n    return quality;\n  }\n\n  private calculateFactorConsistency(factors: OptimizationResult['factors']): number {\n    if (factors.length === 0) return 0;\n\n    // Calculate the standard deviation of factor impacts\n    const impacts = factors.map(f => f.impact);\n    const mean = impacts.reduce((a, b) => a + b, 0) / impacts.length;\n    const variance = impacts.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / impacts.length;\n    const stdDev = Math.sqrt(variance);\n\n    // Higher consistency = lower standard deviation\n    // Convert to a 0-1 scale where 0 = high deviation, 1 = low deviation\n    return Math.max(0, 1 - (stdDev / 50)); // 50 is an arbitrary scaling factor\n  }\n\n  private updatePriceHistory(productId: string, price: number): void {\n    const history = this.priceHistory.get(productId) || [];\n    history.push({ price, timestamp: Date.now() });\n    \n    // Keep only last 30 days of history\n    const thirtyDaysAgo = Date.now() - 30 * 24 * 60 * 60 * 1000;\n    const trimmedHistory = history.filter(entry => entry.timestamp >= thirtyDaysAgo);\n    \n    this.priceHistory.set(productId, trimmedHistory);\n  }\n\n  addPricingRule(rule: PricingRule): void {\n    this.pricingRules.push(rule);\n    // Sort rules by priority\n    this.pricingRules.sort((a, b) => a.priority - b.priority);\n  }\n\n  getPricingRules(): PricingRule[] {\n    return [...this.pricingRules];\n  }\n\n  getPriceHistory(productId: string): { price: number; timestamp: number }[] {\n    return this.priceHistory.get(productId) || [];\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/services/SecurityService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/services/ServiceRegistry.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[388,391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[388,391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AIService } from './AIService.ts';\nimport { AnalyticsService } from './AnalyticsService.ts';\nimport { CollaborationService } from './CollaborationService.ts';\nimport { SecurityService } from './SecurityService.ts';\nimport { WorkflowService } from './WorkflowService.ts';\n\nexport class ServiceRegistry {\n  private static instance: ServiceRegistry;\n  private services: Map<string, any>;\n\n  private constructor() {\n    this.services = new Map();\n    this.initializeServices();\n  }\n\n  private async initializeServices(): Promise<void> {\n    // Initialize AI Service\n    const aiService = new AIService(process.env.OPENAI_API_KEY || '');\n    this.services.set('ai', aiService);\n\n    // Initialize Analytics Service\n    const analyticsService = new AnalyticsService(\n      process.env.MIXPANEL_TOKEN || '',\n      process.env.POSTHOG_TOKEN || ''\n    );\n    this.services.set('analytics', analyticsService);\n\n    // Initialize Security Service\n    const securityService = new SecurityService();\n    this.services.set('security', securityService);\n\n    // Initialize Workflow Service\n    const workflowService = new WorkflowService();\n    this.services.set('workflow', workflowService);\n\n    // Initialize Collaboration Service\n    const collaborationService = new CollaborationService('default-room');\n    this.services.set('collaboration', collaborationService);\n  }\n\n  public static getInstance(): ServiceRegistry {\n    if (!ServiceRegistry.instance) {\n      ServiceRegistry.instance = new ServiceRegistry();\n    }\n    return ServiceRegistry.instance;\n  }\n\n  public getService<T>(serviceName: string): T {\n    const service = this.services.get(serviceName);\n    if (!service) {\n      throw new Error(`Service ${serviceName} not found`);\n    }\n    return service as T;\n  }\n\n  public async healthCheck(): Promise<Record<string, boolean>> {\n    const health: Record<string, boolean> = {};\n    \n    for (const [name, service] of this.services.entries()) {\n      try {\n        if (typeof service.healthCheck === 'function') {\n          health[name] = await service.healthCheck();\n        } else {\n          health[name] = true;\n        }\n      } catch (error) {\n        console.error(`Health check failed for ${name}:`, error);\n        health[name] = false;\n      }\n    }\n\n    return health;\n  }\n\n  public async shutdown(): Promise<void> {\n    for (const [name, service] of this.services.entries()) {\n      try {\n        if (typeof service.shutdown === 'function') {\n          await service.shutdown();\n        }\n      } catch (error) {\n        console.error(`Error shutting down ${name}:`, error);\n      }\n    }\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/services/WorkflowService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[189,192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[189,192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[385,388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[385,388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[724,727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[724,727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1593,1596],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1593,1596],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2169,2172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2169,2172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2523,2526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2523,2526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2556,2559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2556,2559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3066,3069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3066,3069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3099,3102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3099,3102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3433,3436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3433,3436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3466,3469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3466,3469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3760,3763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3760,3763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3793,3796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3793,3796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4105,4108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4105,4108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4138,4141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4138,4141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4431,4434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4431,4434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4464,4467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4464,4467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4821,4824],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4821,4824],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4851,4854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4851,4854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5000,5003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5000,5003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5030,5033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5030,5033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":179,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5189,5192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5189,5192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":192,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5547,5550],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5547,5550],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":227,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6458,6461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6458,6461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":250,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7067,7070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7067,7070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from 'events';\n\nexport interface WorkflowStep {\n  id: string;\n  name: string;\n  type: 'approval' | 'notification' | 'action' | 'condition';\n  config: Record<string, any>;\n  nextSteps: string[];\n}\n\nexport interface Workflow {\n  id: string;\n  name: string;\n  description: string;\n  trigger: {\n    type: 'event' | 'schedule' | 'manual';\n    config: Record<string, any>;\n  };\n  steps: WorkflowStep[];\n  status: 'active' | 'inactive' | 'archived';\n  createdAt: number;\n  updatedAt: number;\n}\n\nexport class WorkflowService extends EventEmitter {\n  private workflows: Map<string, Workflow>;\n  private runningInstances: Map<string, {\n    workflowId: string;\n    currentStep: string;\n    data: Record<string, any>;\n    status: 'running' | 'completed' | 'failed';\n  }>;\n\n  constructor() {\n    super();\n    this.workflows = new Map();\n    this.runningInstances = new Map();\n    this.initializeEventListeners();\n  }\n\n  private initializeEventListeners(): void {\n    this.on('stepCompleted', this.handleStepCompletion.bind(this));\n    this.on('workflowCompleted', this.handleWorkflowCompletion.bind(this));\n    this.on('workflowFailed', this.handleWorkflowFailure.bind(this));\n  }\n\n  createWorkflow(workflow: Omit<Workflow, 'id' | 'createdAt' | 'updatedAt'>): string {\n    const id = crypto.randomUUID();\n    const now = Date.now();\n\n    const newWorkflow: Workflow = {\n      ...workflow,\n      id,\n      createdAt: now,\n      updatedAt: now,\n    };\n\n    this.workflows.set(id, newWorkflow);\n    return id;\n  }\n\n  async startWorkflow(workflowId: string, initialData: Record<string, any> = {}): Promise<string> {\n    const workflow = this.workflows.get(workflowId);\n    if (!workflow) throw new Error('Workflow not found');\n\n    const instanceId = crypto.randomUUID();\n    const firstStep = workflow.steps[0];\n\n    this.runningInstances.set(instanceId, {\n      workflowId,\n      currentStep: firstStep.id,\n      data: initialData,\n      status: 'running',\n    });\n\n    await this.executeStep(instanceId, firstStep, initialData);\n    return instanceId;\n  }\n\n  private async executeStep(\n    instanceId: string,\n    step: WorkflowStep,\n    data: Record<string, any>\n  ): Promise<void> {\n    try {\n      const result = await this.processStep(step, data);\n      this.emit('stepCompleted', { instanceId, stepId: step.id, result });\n    } catch (error) {\n      this.emit('workflowFailed', { instanceId, stepId: step.id, error });\n    }\n  }\n\n  private async processStep(\n    step: WorkflowStep,\n    data: Record<string, any>\n  ): Promise<Record<string, any>> {\n    switch (step.type) {\n      case 'approval':\n        return this.handleApprovalStep(step, data);\n      case 'notification':\n        return this.handleNotificationStep(step, data);\n      case 'action':\n        return this.handleActionStep(step, data);\n      case 'condition':\n        return this.handleConditionStep(step, data);\n      default:\n        throw new Error(`Unknown step type: ${step.type}`);\n    }\n  }\n\n  private async handleApprovalStep(\n    step: WorkflowStep,\n    data: Record<string, any>\n  ): Promise<Record<string, any>> {\n    // In a real implementation, this would create an approval task\n    // and wait for user input\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ ...data, approved: true });\n      }, 1000);\n    });\n  }\n\n  private async handleNotificationStep(\n    step: WorkflowStep,\n    data: Record<string, any>\n  ): Promise<Record<string, any>> {\n    // In a real implementation, this would send notifications\n    // through various channels (email, SMS, push, etc.)\n    console.log('Notification:', step.config.message, data);\n    return data;\n  }\n\n  private async handleActionStep(\n    step: WorkflowStep,\n    data: Record<string, any>\n  ): Promise<Record<string, any>> {\n    // In a real implementation, this would execute custom actions\n    // defined in the workflow\n    const actionResult = await this.executeAction(step.config.action, data);\n    return { ...data, actionResult };\n  }\n\n  private async handleConditionStep(\n    step: WorkflowStep,\n    data: Record<string, any>\n  ): Promise<Record<string, any>> {\n    // Evaluate condition and determine next step\n    const condition = step.config.condition;\n    const result = this.evaluateCondition(condition, data);\n    return { ...data, conditionResult: result };\n  }\n\n  private async executeAction(\n    action: string,\n    data: Record<string, any>\n  ): Promise<Record<string, any>> {\n    // Execute custom action based on action type\n    switch (action) {\n      case 'processDocument':\n        return this.processDocument(data);\n      case 'updateDatabase':\n        return this.updateDatabase(data);\n      default:\n        throw new Error(`Unknown action: ${action}`);\n    }\n  }\n\n  private async processDocument(data: Record<string, any>): Promise<Record<string, any>> {\n    // Implement document processing logic\n    return { ...data, processed: true };\n  }\n\n  private async updateDatabase(data: Record<string, any>): Promise<Record<string, any>> {\n    // Implement database update logic\n    return { ...data, updated: true };\n  }\n\n  private evaluateCondition(condition: string, data: Record<string, any>): boolean {\n    // Implement condition evaluation logic\n    try {\n      return new Function('data', `return ${condition}`)(data);\n    } catch (error) {\n      console.error('Error evaluating condition:', error);\n      return false;\n    }\n  }\n\n  private handleStepCompletion(event: {\n    instanceId: string;\n    stepId: string;\n    result: Record<string, any>;\n  }): void {\n    const instance = this.runningInstances.get(event.instanceId);\n    if (!instance) return;\n\n    const workflow = this.workflows.get(instance.workflowId);\n    if (!workflow) return;\n\n    const currentStep = workflow.steps.find((s) => s.id === event.stepId);\n    if (!currentStep) return;\n\n    // Update instance data\n    instance.data = event.result;\n\n    // Find and execute next steps\n    const nextSteps = workflow.steps.filter((s) =>\n      currentStep.nextSteps.includes(s.id)\n    );\n\n    if (nextSteps.length === 0) {\n      this.emit('workflowCompleted', {\n        instanceId: event.instanceId,\n        result: event.result,\n      });\n      return;\n    }\n\n    // Execute next steps\n    nextSteps.forEach((step) => {\n      this.executeStep(event.instanceId, step, event.result);\n    });\n  }\n\n  private handleWorkflowCompletion(event: {\n    instanceId: string;\n    result: Record<string, any>;\n  }): void {\n    const instance = this.runningInstances.get(event.instanceId);\n    if (!instance) return;\n\n    instance.status = 'completed';\n    console.log('Workflow completed:', event);\n  }\n\n  private handleWorkflowFailure(event: {\n    instanceId: string;\n    stepId: string;\n    error: Error;\n  }): void {\n    const instance = this.runningInstances.get(event.instanceId);\n    if (!instance) return;\n\n    instance.status = 'failed';\n    console.error('Workflow failed:', event);\n  }\n\n  getWorkflowStatus(instanceId: string): {\n    status: 'running' | 'completed' | 'failed';\n    data: Record<string, any>;\n  } | null {\n    const instance = this.runningInstances.get(instanceId);\n    if (!instance) return null;\n\n    return {\n      status: instance.status,\n      data: instance.data,\n    };\n  }\n\n  listWorkflows(): Workflow[] {\n    return Array.from(this.workflows.values());\n  }\n\n  updateWorkflow(id: string, updates: Partial<Workflow>): boolean {\n    const workflow = this.workflows.get(id);\n    if (!workflow) return false;\n\n    this.workflows.set(id, {\n      ...workflow,\n      ...updates,\n      updatedAt: Date.now(),\n    });\n\n    return true;\n  }\n\n  deleteWorkflow(id: string): boolean {\n    return this.workflows.delete(id);\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/services/mockApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/store/apis/analyticsApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/store/apis/chatApi.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[256,259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[256,259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[538,541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[538,541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { RootState } from '../index';\n\ninterface Message {\n  id: string;\n  content: string;\n  role: 'user' | 'assistant' | 'system';\n  createdAt: string;\n  metadata?: Record<string, any>;\n}\n\ninterface Conversation {\n  id: string;\n  title: string;\n  messages: Message[];\n  createdAt: string;\n  updatedAt: string;\n  status: 'active' | 'archived' | 'deleted';\n}\n\ninterface SendMessageRequest {\n  conversationId: string;\n  content: string;\n  metadata?: Record<string, any>;\n}\n\ninterface CreateConversationRequest {\n  title: string;\n  initialMessage?: string;\n}\n\nexport const chatApi = createApi({\n  reducerPath: 'chatApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/api/chat',\n    prepareHeaders: (headers, { getState }) => {\n      const token = (getState() as RootState).auth.token;\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  tagTypes: ['Conversation', 'Message'],\n  endpoints: (builder) => ({\n    getConversations: builder.query<Conversation[], void>({\n      query: () => '/conversations',\n      providesTags: ['Conversation'],\n    }),\n    getConversation: builder.query<Conversation, string>({\n      query: (id) => `/conversations/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Conversation', id }],\n    }),\n    createConversation: builder.mutation<Conversation, CreateConversationRequest>({\n      query: (data) => ({\n        url: '/conversations',\n        method: 'POST',\n        body: data,\n      }),\n      invalidatesTags: ['Conversation'],\n    }),\n    deleteConversation: builder.mutation<void, string>({\n      query: (id) => ({\n        url: `/conversations/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Conversation'],\n    }),\n    sendMessage: builder.mutation<Message, SendMessageRequest>({\n      query: (data) => ({\n        url: `/conversations/${data.conversationId}/messages`,\n        method: 'POST',\n        body: data,\n      }),\n      invalidatesTags: (result, error, { conversationId }) => [\n        { type: 'Conversation', id: conversationId },\n      ],\n    }),\n    getMessages: builder.query<Message[], string>({\n      query: (conversationId) => `/conversations/${conversationId}/messages`,\n      providesTags: (result, error, conversationId) => [\n        { type: 'Message', id: conversationId },\n      ],\n    }),\n    streamMessage: builder.query<Message, SendMessageRequest>({\n      query: (data) => ({\n        url: `/conversations/${data.conversationId}/messages/stream`,\n        method: 'POST',\n        body: data,\n      }),\n      async onCacheEntryAdded(\n        arg,\n        { updateCachedData, cacheDataLoaded, cacheEntryRemoved }\n      ) {\n        try {\n          await cacheDataLoaded;\n\n          const eventSource = new EventSource(\n            `/api/chat/conversations/${arg.conversationId}/messages/stream`\n          );\n\n          eventSource.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            updateCachedData((draft) => {\n              return { ...draft, ...data };\n            });\n          };\n\n          await cacheEntryRemoved;\n          eventSource.close();\n        } catch {\n          // Handle errors\n        }\n      },\n    }),\n  }),\n});\n\nexport const {\n  useGetConversationsQuery,\n  useGetConversationQuery,\n  useCreateConversationMutation,\n  useDeleteConversationMutation,\n  useSendMessageMutation,\n  useGetMessagesQuery,\n  useStreamMessageQuery,\n} = chatApi; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/store/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/store/slices/authSlice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/store/slices/chatBotSlice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/store/slices/chatSlice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/store/slices/settingsSlice.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'state' is defined but never used.","line":95,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface SettingsState {\n  notifications: {\n    email: boolean;\n    push: boolean;\n    desktop: boolean;\n  };\n  language: string;\n  timezone: string;\n  dateFormat: string;\n  currency: string;\n  accessibility: {\n    highContrast: boolean;\n    reducedMotion: boolean;\n    fontSize: 'small' | 'medium' | 'large';\n  };\n  privacy: {\n    shareAnalytics: boolean;\n    shareUsageData: boolean;\n  };\n  display: {\n    density: 'compact' | 'comfortable' | 'spacious';\n    sidebarPosition: 'left' | 'right';\n    menuLayout: 'vertical' | 'horizontal';\n  };\n}\n\nconst initialState: SettingsState = {\n  notifications: {\n    email: true,\n    push: true,\n    desktop: false,\n  },\n  language: 'en',\n  timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n  dateFormat: 'MM/DD/YYYY',\n  currency: 'USD',\n  accessibility: {\n    highContrast: false,\n    reducedMotion: false,\n    fontSize: 'medium',\n  },\n  privacy: {\n    shareAnalytics: true,\n    shareUsageData: true,\n  },\n  display: {\n    density: 'comfortable',\n    sidebarPosition: 'left',\n    menuLayout: 'vertical',\n  },\n};\n\nconst settingsSlice = createSlice({\n  name: 'settings',\n  initialState,\n  reducers: {\n    updateNotificationSettings: (\n      state,\n      action: PayloadAction<Partial<SettingsState['notifications']>>\n    ) => {\n      state.notifications = { ...state.notifications, ...action.payload };\n    },\n    setLanguage: (state, action: PayloadAction<string>) => {\n      state.language = action.payload;\n    },\n    setTimezone: (state, action: PayloadAction<string>) => {\n      state.timezone = action.payload;\n    },\n    setDateFormat: (state, action: PayloadAction<string>) => {\n      state.dateFormat = action.payload;\n    },\n    setCurrency: (state, action: PayloadAction<string>) => {\n      state.currency = action.payload;\n    },\n    updateAccessibilitySettings: (\n      state,\n      action: PayloadAction<Partial<SettingsState['accessibility']>>\n    ) => {\n      state.accessibility = { ...state.accessibility, ...action.payload };\n    },\n    updatePrivacySettings: (\n      state,\n      action: PayloadAction<Partial<SettingsState['privacy']>>\n    ) => {\n      state.privacy = { ...state.privacy, ...action.payload };\n    },\n    updateDisplaySettings: (\n      state,\n      action: PayloadAction<Partial<SettingsState['display']>>\n    ) => {\n      state.display = { ...state.display, ...action.payload };\n    },\n    resetSettings: (state) => {\n      return initialState;\n    },\n  },\n});\n\nexport const {\n  updateNotificationSettings,\n  setLanguage,\n  setTimezone,\n  setDateFormat,\n  setCurrency,\n  updateAccessibilitySettings,\n  updatePrivacySettings,\n  updateDisplaySettings,\n  resetSettings,\n} = settingsSlice.actions;\n\nexport default settingsSlice.reducer; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/store/slices/uiSlice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/store/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/sw.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/types/chatbot.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/types/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/types/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[967,970],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[967,970],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1163,1166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1163,1166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1487,1490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1487,1490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface IMenuItem {\n  text: string;\n  url: string;\n  icon?: string;\n}\n\nexport interface ISocials {\n  twitter?: string;\n  linkedin?: string;\n  facebook?: string;\n  instagram?: string;\n}\n\nexport interface IFooterDetails {\n  subheading: string;\n  quickLinks: IMenuItem[];\n  email: string;\n  telephone: string;\n  socials: ISocials;\n}\n\nexport interface ISiteDetails {\n  title: string;\n  description: string;\n  googleAnalyticsId?: string;\n  theme: {\n    primary: string;\n    secondary: string;\n  };\n}\n\nexport interface IUser {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  isActive: boolean;\n  isVerified: boolean;\n  tenantId: string;\n  roles: string[];\n  lastLogin?: Date;\n}\n\nexport interface Message {\n  id: string;\n  content: string;\n  sender: 'user' | 'bot';\n  timestamp: number;\n}\n\nexport interface WorkflowStep {\n  id: string;\n  name: string;\n  type: 'approval' | 'notification' | 'action' | 'condition';\n  config: Record<string, any>;\n  nextSteps: string[];\n}\n\nexport interface Workflow {\n  id: string;\n  name: string;\n  description: string;\n  trigger: {\n    type: 'event' | 'schedule' | 'manual';\n    config: Record<string, any>;\n  };\n  steps: WorkflowStep[];\n  status: 'active' | 'inactive' | 'archived';\n  createdAt: number;\n  updatedAt: number;\n}\n\nexport interface AnalyticsMetrics {\n  userEngagement: number;\n  conversationQuality: number;\n  botPerformance: number;\n  recentEvents: Array<{\n    eventName: string;\n    properties: Record<string, any>;\n    timestamp: number;\n  }>;\n}\n\nexport interface ConversationTrend {\n  date: string;\n  total: number;\n  automated: number;\n  escalated: number;\n}\n\nexport interface UserEngagement {\n  byChannel: Array<{\n    name: string;\n    value: number;\n  }>;\n  sessionDuration: Array<{\n    range: string;\n    count: number;\n  }>;\n}\n\nexport interface BotPerformance {\n  responseTime: Array<{\n    range: string;\n    count: number;\n  }>;\n  resolutionRate: Array<{\n    category: string;\n    value: number;\n    color?: string;\n  }>;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/utils/animations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/utils/api.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/utils/api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[294,297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[294,297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[399,402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[399,402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1082,1085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1082,1085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1433,1436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1433,1436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1998,2001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1998,2001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2134,2137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2134,2137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { store } from '../store';\nimport { logout } from '../store/slices/authSlice';\nimport { addNotification } from '../store/slices/uiSlice';\n\nexport class APIError extends Error {\n  constructor(\n    message: string,\n    public status?: number,\n    public code?: string,\n    public errors?: any[]\n  ) {\n    super(message);\n    this.name = 'APIError';\n  }\n}\n\nexport const handleAPIError = (error: any) => {\n  console.error('API Error:', error);\n\n  if (error.status === 401) {\n    store.dispatch(logout());\n    store.dispatch(\n      addNotification({\n        type: 'error',\n        message: 'Your session has expired. Please log in again.',\n      })\n    );\n    return;\n  }\n\n  let message = 'An unexpected error occurred. Please try again later.';\n\n  if (error instanceof APIError) {\n    message = error.message;\n  } else if (error.data?.message) {\n    message = error.data.message;\n  } else if (error.message) {\n    message = error.message;\n  }\n\n  store.dispatch(\n    addNotification({\n      type: 'error',\n      message,\n    })\n  );\n};\n\nexport const formatAPIResponse = <T>(data: any): T => {\n  if (!data) {\n    throw new APIError('No data received from the server');\n  }\n\n  if (data.error) {\n    throw new APIError(\n      data.error.message || 'An error occurred',\n      data.error.status,\n      data.error.code,\n      data.error.errors\n    );\n  }\n\n  return data as T;\n};\n\nexport const createQueryString = (params: Record<string, any>): string => {\n  const searchParams = new URLSearchParams();\n\n  Object.entries(params).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      if (Array.isArray(value)) {\n        value.forEach((item) => searchParams.append(key, item.toString()));\n      } else if (typeof value === 'object') {\n        searchParams.append(key, JSON.stringify(value));\n      } else {\n        searchParams.append(key, value.toString());\n      }\n    }\n  });\n\n  return searchParams.toString();\n};\n\nexport const parseQueryString = <T extends Record<string, any>>(\n  queryString: string\n): Partial<T> => {\n  const searchParams = new URLSearchParams(queryString);\n  const result: Record<string, any> = {};\n\n  searchParams.forEach((value, key) => {\n    try {\n      result[key] = JSON.parse(value);\n    } catch {\n      result[key] = value;\n    }\n  });\n\n  return result as Partial<T>;\n};\n\nexport const downloadFile = async (url: string, filename: string) => {\n  try {\n    const response = await fetch(url);\n    const blob = await response.blob();\n    const objectUrl = URL.createObjectURL(blob);\n\n    const link = document.createElement('a');\n    link.href = objectUrl;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    URL.revokeObjectURL(objectUrl);\n  } catch (error) {\n    handleAPIError(error);\n  }\n};\n\nexport const formatBytes = (bytes: number, decimals = 2) => {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/utils/cn.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/utils/datetime.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'store' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'unit' is defined but never used.","line":83,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { format, formatDistance, formatRelative, isValid } from 'date-fns';\nimport { store } from '../store';\n\nexport const formatDate = (date: Date | string | number, pattern = 'PP'): string => {\n  const dateObj = new Date(date);\n  if (!isValid(dateObj)) return 'Invalid date';\n\n  try {\n    return format(dateObj, pattern);\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return 'Invalid date';\n  }\n};\n\nexport const formatRelativeTime = (date: Date | string | number): string => {\n  const dateObj = new Date(date);\n  if (!isValid(dateObj)) return 'Invalid date';\n\n  try {\n    return formatDistance(dateObj, new Date(), { addSuffix: true });\n  } catch (error) {\n    console.error('Error formatting relative time:', error);\n    return 'Invalid date';\n  }\n};\n\nexport const formatRelativeDate = (\n  date: Date | string | number,\n  baseDate = new Date()\n): string => {\n  const dateObj = new Date(date);\n  if (!isValid(dateObj)) return 'Invalid date';\n\n  try {\n    return formatRelative(dateObj, baseDate);\n  } catch (error) {\n    console.error('Error formatting relative date:', error);\n    return 'Invalid date';\n  }\n};\n\nexport const formatTimeAgo = (date: Date | string | number): string => {\n  const dateObj = new Date(date);\n  if (!isValid(dateObj)) return 'Invalid date';\n\n  const seconds = Math.floor((new Date().getTime() - dateObj.getTime()) / 1000);\n\n  if (seconds < 60) {\n    return 'just now';\n  }\n\n  const intervals = {\n    year: 31536000,\n    month: 2592000,\n    week: 604800,\n    day: 86400,\n    hour: 3600,\n    minute: 60,\n  };\n\n  for (const [unit, secondsInUnit] of Object.entries(intervals)) {\n    const interval = Math.floor(seconds / secondsInUnit);\n    if (interval >= 1) {\n      return `${interval} ${unit}${interval === 1 ? '' : 's'} ago`;\n    }\n  }\n\n  return formatDate(date);\n};\n\nexport const formatDuration = (milliseconds: number): string => {\n  if (milliseconds < 0) return '0s';\n\n  const time = {\n    d: Math.floor(milliseconds / 86400000),\n    h: Math.floor((milliseconds % 86400000) / 3600000),\n    m: Math.floor((milliseconds % 3600000) / 60000),\n    s: Math.floor((milliseconds % 60000) / 1000),\n  };\n\n  return Object.entries(time)\n    .filter(([unit, value]) => value > 0)\n    .map(([unit, value]) => `${value}${unit}`)\n    .join(' ');\n};\n\nexport const getLocalTimezone = (): string => {\n  return Intl.DateTimeFormat().resolvedOptions().timeZone;\n};\n\nexport const convertToLocalTime = (\n  date: Date | string | number,\n  timezone = getLocalTimezone()\n): Date => {\n  const dateObj = new Date(date);\n  if (!isValid(dateObj)) throw new Error('Invalid date');\n\n  return new Date(\n    dateObj.toLocaleString('en-US', {\n      timeZone: timezone,\n    })\n  );\n};\n\nexport const isToday = (date: Date | string | number): boolean => {\n  const dateObj = new Date(date);\n  if (!isValid(dateObj)) return false;\n\n  const today = new Date();\n  return (\n    dateObj.getDate() === today.getDate() &&\n    dateObj.getMonth() === today.getMonth() &&\n    dateObj.getFullYear() === today.getFullYear()\n  );\n};\n\nexport const isYesterday = (date: Date | string | number): boolean => {\n  const dateObj = new Date(date);\n  if (!isValid(dateObj)) return false;\n\n  const yesterday = new Date();\n  yesterday.setDate(yesterday.getDate() - 1);\n  return (\n    dateObj.getDate() === yesterday.getDate() &&\n    dateObj.getMonth() === yesterday.getMonth() &&\n    dateObj.getFullYear() === yesterday.getFullYear()\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/utils/format.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/utils/hooks.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":2,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":42},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":138,"column":6,"nodeType":"Identifier","endLine":138,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'effect'. Either include it or remove the dependency array. If 'effect' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":138,"column":6,"nodeType":"Identifier","endLine":138,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [effect]","fix":{"range":[3562,3566],"text":"[effect]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState, useCallback, useRef } from 'react';\nimport type { RootState, AppDispatch } from '../store';\n\n// Redux hooks\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n// Debounce hook\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\n// Local storage hook\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue] as const;\n}\n\n// Intersection observer hook\nexport function useIntersectionObserver(\n  elementRef: React.RefObject<Element>,\n  options: IntersectionObserverInit = {}\n): boolean {\n  const [isIntersecting, setIsIntersecting] = useState(false);\n\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(([entry]) => {\n      setIsIntersecting(entry.isIntersecting);\n    }, options);\n\n    observer.observe(element);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [elementRef, options]);\n\n  return isIntersecting;\n}\n\n// Event listener hook\nexport function useEventListener<T extends Event>(\n  eventName: string,\n  handler: (event: T) => void,\n  element: Window | Element | null = window\n) {\n  const savedHandler = useRef(handler);\n\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(() => {\n    if (!element) return;\n\n    const eventListener = (event: Event) => savedHandler.current(event as T);\n    element.addEventListener(eventName, eventListener);\n\n    return () => {\n      element.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element]);\n}\n\n// Media query hook\nexport function useMediaQuery(query: string): boolean {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    const media = window.matchMedia(query);\n    if (media.matches !== matches) {\n      setMatches(media.matches);\n    }\n\n    const listener = () => setMatches(media.matches);\n    media.addEventListener('change', listener);\n\n    return () => media.removeEventListener('change', listener);\n  }, [matches, query]);\n\n  return matches;\n}\n\n// Previous value hook\nexport function usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n\n// Async effect hook\nexport function useAsyncEffect(\n  effect: () => Promise<void | (() => void)>,\n  deps?: React.DependencyList\n) {\n  useEffect(() => {\n    const cleanupPromise = effect();\n    return () => {\n      cleanupPromise.then((cleanup) => cleanup && cleanup());\n    };\n  }, deps);\n}\n\n// Throttle hook\nexport function useThrottle<T>(value: T, limit: number) {\n  const [throttledValue, setThrottledValue] = useState<T>(value);\n  const lastRan = useRef(Date.now());\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      if (Date.now() - lastRan.current >= limit) {\n        setThrottledValue(value);\n        lastRan.current = Date.now();\n      }\n    }, limit - (Date.now() - lastRan.current));\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, limit]);\n\n  return throttledValue;\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/utils/index.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/utils/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/utils/theme.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'palette' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":94,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userPreference' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":122,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type ThemeMode = 'light' | 'dark' | 'system';\n\nexport interface ThemeColors {\n  primary: string;\n  secondary: string;\n  accent: string;\n  background: string;\n  surface: string;\n  text: string;\n  textSecondary: string;\n  border: string;\n  error: string;\n  warning: string;\n  success: string;\n  info: string;\n}\n\nexport const lightTheme: ThemeColors = {\n  primary: '#0070f3',\n  secondary: '#7928ca',\n  accent: '#f81ce5',\n  background: '#ffffff',\n  surface: '#f7f7f7',\n  text: '#000000',\n  textSecondary: '#666666',\n  border: '#e0e0e0',\n  error: '#dc2626',\n  warning: '#ea580c',\n  success: '#16a34a',\n  info: '#0284c7',\n};\n\nexport const darkTheme: ThemeColors = {\n  primary: '#0070f3',\n  secondary: '#7928ca',\n  accent: '#f81ce5',\n  background: '#000000',\n  surface: '#111111',\n  text: '#ffffff',\n  textSecondary: '#999999',\n  border: '#333333',\n  error: '#ef4444',\n  warning: '#f97316',\n  success: '#22c55e',\n  info: '#0ea5e9',\n};\n\nexport const getSystemTheme = (): 'light' | 'dark' => {\n  if (typeof window === 'undefined') return 'light';\n  return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n};\n\nexport const hexToRGB = (hex: string): { r: number; g: number; b: number } => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n      }\n    : { r: 0, g: 0, b: 0 };\n};\n\nexport const rgbToHex = (r: number, g: number, b: number): string => {\n  return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n};\n\nexport const adjustBrightness = (color: string, amount: number): string => {\n  const { r, g, b } = hexToRGB(color);\n  const newR = Math.max(0, Math.min(255, r + amount));\n  const newG = Math.max(0, Math.min(255, g + amount));\n  const newB = Math.max(0, Math.min(255, b + amount));\n  return rgbToHex(newR, newG, newB);\n};\n\nexport const getContrastColor = (hexcolor: string): string => {\n  const { r, g, b } = hexToRGB(hexcolor);\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  return yiq >= 128 ? '#000000' : '#ffffff';\n};\n\nexport const generatePalette = (baseColor: string): Record<number, string> => {\n  const palette: Record<number, string> = {};\n\n  for (let i = 1; i <= 9; i++) {\n    const amount = (i - 5) * 40;\n    palette[i * 100] = adjustBrightness(baseColor, amount);\n  }\n\n  return palette;\n};\n\nexport const generateThemeFromColor = (primaryColor: string): ThemeColors => {\n  const palette = generatePalette(primaryColor);\n  const isDark = getContrastColor(primaryColor) === '#ffffff';\n\n  return {\n    primary: primaryColor,\n    secondary: adjustBrightness(primaryColor, isDark ? 40 : -40),\n    accent: adjustBrightness(primaryColor, isDark ? 80 : -80),\n    background: isDark ? '#000000' : '#ffffff',\n    surface: isDark ? '#111111' : '#f7f7f7',\n    text: isDark ? '#ffffff' : '#000000',\n    textSecondary: isDark ? '#999999' : '#666666',\n    border: isDark ? '#333333' : '#e0e0e0',\n    error: '#ff0000',\n    warning: '#f5a623',\n    success: '#28a745',\n    info: '#17a2b8',\n  };\n};\n\nexport const applyTheme = (theme: ThemeColors): void => {\n  const root = document.documentElement;\n  Object.entries(theme).forEach(([key, value]) => {\n    root.style.setProperty(`--color-${key}`, value);\n  });\n};\n\nexport const getThemeValue = (\n  mode: ThemeMode,\n  userPreference: 'light' | 'dark' | null = null\n): ThemeColors => {\n  if (mode === 'system') {\n    return getSystemTheme() === 'dark' ? darkTheme : lightTheme;\n  }\n  return mode === 'dark' ? darkTheme : lightTheme;\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/utils/validation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3776,3779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3776,3779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4150,4153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4150,4153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const isValidEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\nexport const isValidPassword = (password: string): {\n  isValid: boolean;\n  errors: string[];\n} => {\n  const errors: string[] = [];\n\n  if (password.length < 8) {\n    errors.push('Password must be at least 8 characters long');\n  }\n\n  if (!/[A-Z]/.test(password)) {\n    errors.push('Password must contain at least one uppercase letter');\n  }\n\n  if (!/[a-z]/.test(password)) {\n    errors.push('Password must contain at least one lowercase letter');\n  }\n\n  if (!/[0-9]/.test(password)) {\n    errors.push('Password must contain at least one number');\n  }\n\n  if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n    errors.push('Password must contain at least one special character');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n};\n\nexport const isValidPhoneNumber = (phone: string): boolean => {\n  const phoneRegex = /^\\+?[\\d\\s-()]{10,}$/;\n  return phoneRegex.test(phone);\n};\n\nexport const isValidURL = (url: string): boolean => {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nexport const isValidUsername = (username: string): boolean => {\n  const usernameRegex = /^[a-zA-Z0-9_-]{3,20}$/;\n  return usernameRegex.test(username);\n};\n\nexport const isValidDate = (date: string): boolean => {\n  const dateObj = new Date(date);\n  return dateObj instanceof Date && !isNaN(dateObj.getTime());\n};\n\nexport const isValidCreditCard = (cardNumber: string): boolean => {\n  // Luhn algorithm implementation\n  const sanitizedNumber = cardNumber.replace(/\\D/g, '');\n  let sum = 0;\n  let isEven = false;\n\n  for (let i = sanitizedNumber.length - 1; i >= 0; i--) {\n    let digit = parseInt(sanitizedNumber[i]);\n\n    if (isEven) {\n      digit *= 2;\n      if (digit > 9) {\n        digit -= 9;\n      }\n    }\n\n    sum += digit;\n    isEven = !isEven;\n  }\n\n  return sum % 10 === 0;\n};\n\nexport const isValidIPAddress = (ip: string): boolean => {\n  const ipv4Regex = /^(\\d{1,3}\\.){3}\\d{1,3}$/;\n  const ipv6Regex = /^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$/;\n\n  if (ipv4Regex.test(ip)) {\n    return ip.split('.').every((num) => parseInt(num) <= 255);\n  }\n\n  return ipv6Regex.test(ip);\n};\n\nexport const isStrongPassword = (password: string): {\n  score: number;\n  feedback: string[];\n} => {\n  const feedback: string[] = [];\n  let score = 0;\n\n  // Length\n  if (password.length >= 12) {\n    score += 2;\n  } else if (password.length >= 8) {\n    score += 1;\n  } else {\n    feedback.push('Password is too short');\n  }\n\n  // Character types\n  if (/[A-Z]/.test(password)) score += 1;\n  if (/[a-z]/.test(password)) score += 1;\n  if (/[0-9]/.test(password)) score += 1;\n  if (/[!@#$%^&*(),.?\":{}|<>]/.test(password)) score += 1;\n\n  // Complexity\n  if (/(.)\\1{2,}/.test(password)) {\n    feedback.push('Password contains repeated characters');\n    score -= 1;\n  }\n\n  if (/^[a-zA-Z]+$/.test(password)) {\n    feedback.push('Password contains only letters');\n    score -= 1;\n  }\n\n  if (/^[0-9]+$/.test(password)) {\n    feedback.push('Password contains only numbers');\n    score -= 1;\n  }\n\n  // Common patterns\n  const commonPatterns = [\n    'password',\n    '123456',\n    'qwerty',\n    'admin',\n    'letmein',\n    'welcome',\n  ];\n  if (commonPatterns.some((pattern) => password.toLowerCase().includes(pattern))) {\n    feedback.push('Password contains common patterns');\n    score -= 2;\n  }\n\n  // Normalize score\n  score = Math.max(0, Math.min(5, score));\n\n  if (score < 3) {\n    feedback.push('Password is weak');\n  } else if (score < 4) {\n    feedback.push('Password is moderate');\n  } else {\n    feedback.push('Password is strong');\n  }\n\n  return { score, feedback };\n};\n\nexport const validateForm = <T extends Record<string, any>>(\n  data: T,\n  rules: {\n    [K in keyof T]?: {\n      required?: boolean;\n      minLength?: number;\n      maxLength?: number;\n      pattern?: RegExp;\n      validate?: (value: T[K]) => boolean | string;\n    };\n  }\n): { isValid: boolean; errors: { [K in keyof T]?: string } } => {\n  const errors = {} as { [K in keyof T]?: string };\n\n  (Object.entries(rules) as [keyof T, any][]).forEach(([field, rule]) => {\n    const value = data[field];\n\n    if (rule.required && !value) {\n      errors[field] = `${String(field)} is required`;\n    }\n\n    if (value) {\n      if (rule.minLength && String(value).length < rule.minLength) {\n        errors[field] = `${String(field)} must be at least ${rule.minLength} characters`;\n      }\n\n      if (rule.maxLength && String(value).length > rule.maxLength) {\n        errors[field] = `${String(field)} must be no more than ${rule.maxLength} characters`;\n      }\n\n      if (rule.pattern && !rule.pattern.test(String(value))) {\n        errors[field] = `${String(field)} is invalid`;\n      }\n\n      if (rule.validate) {\n        const result = rule.validate(value);\n        if (result !== true) {\n          errors[field] = typeof result === 'string' ? result : `${String(field)} is invalid`;\n        }\n      }\n    }\n  });\n\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors,\n  };\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/src/workflows/CustomerSupportWorkflow.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3016,3019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3016,3019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3046,3049],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3046,3049],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3771,3774],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3771,3774],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3801,3804],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3801,3804],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4183,4186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4183,4186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4213,4216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4213,4216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4887,4890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4887,4890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4917,4920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4917,4920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5484,5487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5484,5487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5514,5517],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5514,5517],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'room' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":184,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":184,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6159,6162],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6159,6162],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6189,6192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6189,6192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ServiceRegistry } from '../services/ServiceRegistry.ts';\nimport { WorkflowStep, Workflow, WorkflowService } from '../services/WorkflowService.ts';\nimport { SecurityService, UserRole } from '../services/SecurityService.ts';\nimport { AIService } from '../services/AIService.ts';\nimport { AnalyticsService } from '../services/AnalyticsService.ts';\nimport { CollaborationService } from '../services/CollaborationService.ts';\n\nexport class CustomerSupportWorkflow {\n  private registry: ServiceRegistry;\n\n  constructor() {\n    this.registry = ServiceRegistry.getInstance();\n  }\n\n  async createSupportWorkflow(): Promise<string> {\n    const workflowService = this.registry.getService<WorkflowService>('workflow');\n    const workflow: Omit<Workflow, 'id' | 'createdAt' | 'updatedAt'> = {\n      name: 'AI-Powered Customer Support',\n      description: 'Automated customer support workflow with AI assistance and team collaboration',\n      trigger: {\n        type: 'event',\n        config: {\n          eventType: 'newSupportRequest',\n        },\n      },\n      status: 'active',\n      steps: this.defineSupportSteps(),\n    };\n\n    return workflowService.createWorkflow(workflow);\n  }\n\n  private defineSupportSteps(): WorkflowStep[] {\n    return [\n      {\n        id: 'initial-ai-analysis',\n        name: 'AI Analysis',\n        type: 'action',\n        config: {\n          action: 'analyzeRequest',\n          handler: this.handleAIAnalysis.bind(this),\n        },\n        nextSteps: ['categorize-request'],\n      },\n      {\n        id: 'categorize-request',\n        name: 'Categorize Request',\n        type: 'condition',\n        config: {\n          condition: 'data.priority === \"high\"',\n          handler: this.handleCategorization.bind(this),\n        },\n        nextSteps: ['assign-support-agent', 'automated-response'],\n      },\n      {\n        id: 'automated-response',\n        name: 'Automated Response',\n        type: 'action',\n        config: {\n          action: 'generateResponse',\n          handler: this.handleAutomatedResponse.bind(this),\n        },\n        nextSteps: ['track-satisfaction'],\n      },\n      {\n        id: 'assign-support-agent',\n        name: 'Assign Support Agent',\n        type: 'action',\n        config: {\n          action: 'assignAgent',\n          handler: this.handleAgentAssignment.bind(this),\n        },\n        nextSteps: ['create-collaboration-room'],\n      },\n      {\n        id: 'create-collaboration-room',\n        name: 'Create Collaboration Room',\n        type: 'action',\n        config: {\n          action: 'createRoom',\n          handler: this.handleCollaborationRoom.bind(this),\n        },\n        nextSteps: ['track-satisfaction'],\n      },\n      {\n        id: 'track-satisfaction',\n        name: 'Track Customer Satisfaction',\n        type: 'action',\n        config: {\n          action: 'trackMetrics',\n          handler: this.handleSatisfactionTracking.bind(this),\n        },\n        nextSteps: [],\n      },\n    ];\n  }\n\n  private async handleAIAnalysis(data: Record<string, any>): Promise<Record<string, any>> {\n    const aiService = this.registry.getService<AIService>('ai');\n    const securityService = this.registry.getService<SecurityService>('security');\n\n    // Check permissions\n    if (!securityService.hasPermission(UserRole.SUPPORT, 'read', 'customer-data')) {\n      throw new Error('Permission denied');\n    }\n\n    // Analyze request using AI\n    const analysis = await aiService.analyzeConversation([data.customerMessage]);\n    \n    // Generate tags\n    const tags = await aiService.generateTags(data.customerMessage);\n\n    return {\n      ...data,\n      analysis,\n      tags,\n      priority: analysis.sentiment === 'negative' ? 'high' : 'normal',\n    };\n  }\n\n  private async handleCategorization(data: Record<string, any>): Promise<Record<string, any>> {\n    const analyticsService = this.registry.getService<AnalyticsService>('analytics');\n\n    // Track categorization event\n    analyticsService.trackEvent('support_request_categorized', {\n      priority: data.priority,\n      sentiment: data.analysis.sentiment,\n      tags: data.tags,\n    });\n\n    return data;\n  }\n\n  private async handleAutomatedResponse(data: Record<string, any>): Promise<Record<string, any>> {\n    const aiService = this.registry.getService<AIService>('ai');\n    const securityService = this.registry.getService<SecurityService>('security');\n\n    // Generate AI response\n    const response = await aiService.generateSuggestions(\n      `Please provide a helpful response to this customer inquiry: ${data.customerMessage}`\n    );\n\n    // Encrypt sensitive data\n    const encryptedResponse = await securityService.encryptMessage(\n      response,\n      process.env.ENCRYPTION_KEY || 'default-key'\n    );\n\n    return {\n      ...data,\n      automatedResponse: response,\n      encryptedResponse,\n    };\n  }\n\n  private async handleAgentAssignment(data: Record<string, any>): Promise<Record<string, any>> {\n    const analyticsService = this.registry.getService<AnalyticsService>('analytics');\n\n    // In a real implementation, this would use an algorithm to find the best agent\n    const assignedAgent = {\n      id: 'agent-123',\n      name: 'John Doe',\n      expertise: data.tags,\n    };\n\n    analyticsService.trackEvent('agent_assigned', {\n      agentId: assignedAgent.id,\n      requestPriority: data.priority,\n      tags: data.tags,\n    });\n\n    return {\n      ...data,\n      assignedAgent,\n    };\n  }\n\n  private async handleCollaborationRoom(data: Record<string, any>): Promise<Record<string, any>> {\n    const collaborationService = this.registry.getService<typeof CollaborationService>('collaboration');\n    const securityService = this.registry.getService<SecurityService>('security');\n\n    // Create a secure collaboration room\n    const roomId = `support-${Date.now()}`;\n    const room = new collaborationService(roomId);\n\n    // Log collaboration room creation\n    securityService.logAudit(\n      data.assignedAgent.id,\n      'create',\n      `collaboration-room-${roomId}`,\n      true\n    );\n\n    return {\n      ...data,\n      collaborationRoomId: roomId,\n    };\n  }\n\n  private async handleSatisfactionTracking(data: Record<string, any>): Promise<Record<string, any>> {\n    const analyticsService = this.registry.getService<AnalyticsService>('analytics');\n\n    // Track metrics\n    analyticsService.trackEvent('support_request_completed', {\n      requestId: data.requestId,\n      duration: Date.now() - data.createdAt,\n      priority: data.priority,\n      agentId: data.assignedAgent?.id,\n      automated: !data.assignedAgent,\n      tags: data.tags,\n    });\n\n    return data;\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/frontend/vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
